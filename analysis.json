{
  "schema_version": "1.0.0",
  "namespaces": [
    {
      "name": "MultiChart",
      "description": " ",
      "summary": "",
      "sourceRange": {
        "file": "drawable/multi-drawable-bubble.html",
        "start": {
          "line": 100,
          "column": 4
        },
        "end": {
          "line": 100,
          "column": 64
        }
      },
      "namespaces": [
        {
          "name": "MultiChart.mixin",
          "description": " ",
          "summary": "",
          "sourceRange": {
            "file": "helper/track-hover-mixin.html",
            "start": {
              "line": 94,
              "column": 1
            },
            "end": {
              "line": 94,
              "column": 57
            }
          },
          "mixins": [
            {
              "description": "##  ConfigHelper\n\nA helper to handle observers",
              "summary": "",
              "path": "helper/config-helper-mixin.html",
              "properties": [],
              "methods": [
                {
                  "name": "pauseObserver",
                  "description": "`pauserObserver` call this to cancel observeConfig to run",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 19,
                      "column": 6
                    },
                    "end": {
                      "line": 21,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "activateObserver",
                  "description": "`activateObserver` make observer functions  active again",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 26,
                      "column": 6
                    },
                    "end": {
                      "line": 28,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "applyConfig",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 30,
                      "column": 6
                    },
                    "end": {
                      "line": 36,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "obj"
                    },
                    {
                      "name": "properties"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "observeConfig",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 38,
                      "column": 6
                    },
                    "end": {
                      "line": 63,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "name"
                    },
                    {
                      "name": "targetName"
                    },
                    {
                      "name": "eventName"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "observeConfigSplices",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 64,
                      "column": 6
                    },
                    "end": {
                      "line": 78,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "splice"
                    },
                    {
                      "name": "name"
                    },
                    {
                      "name": "targetName"
                    },
                    {
                      "name": "eventName"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 80,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.ConfigHelper",
              "attributes": [],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  Logger\n\nlogger for MultiChart",
              "summary": "",
              "path": "helper/logger-mixin.html",
              "properties": [
                {
                  "name": "_verbose",
                  "type": "?",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 35,
                      "column": 5
                    },
                    "end": {
                      "line": 37,
                      "column": 6
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "verbose",
                  "type": "boolean | null | undefined",
                  "description": "`verbose`  If true, error messages will automatically be logged to the console.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 9
                    },
                    "end": {
                      "line": 23,
                      "column": 10
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Boolean"
                    }
                  }
                },
                {
                  "name": "logPrefix",
                  "type": "string | null | undefined",
                  "description": "`logPrefix`",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 9
                    },
                    "end": {
                      "line": 31,
                      "column": 10
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "String"
                    }
                  },
                  "defaultValue": "\"[multi-chart]\""
                }
              ],
              "methods": [
                {
                  "name": "_log",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 39,
                      "column": 5
                    },
                    "end": {
                      "line": 43,
                      "column": 6
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "_warn",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 45,
                      "column": 5
                    },
                    "end": {
                      "line": 49,
                      "column": 6
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "_error",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 51,
                      "column": 5
                    },
                    "end": {
                      "line": 55,
                      "column": 6
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "args",
                      "rest": true
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "line": 58,
                  "column": 3
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.Logger",
              "attributes": [
                {
                  "name": "verbose",
                  "description": "`verbose`  If true, error messages will automatically be logged to the console.",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 9
                    },
                    "end": {
                      "line": 23,
                      "column": 10
                    }
                  },
                  "metadata": {},
                  "type": "boolean | null | undefined"
                },
                {
                  "name": "log-prefix",
                  "description": "`logPrefix`",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 9
                    },
                    "end": {
                      "line": 31,
                      "column": 10
                    }
                  },
                  "metadata": {},
                  "type": "string | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  PolymerExtends\n\nallows to still use `this.fire` and `this.debounce`",
              "summary": "",
              "path": "helper/polymer-extends-mixin.html",
              "properties": [],
              "methods": [],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "line": 26,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.PolymerExtends",
              "attributes": [],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  SVGHelper\n\nA helper mixin for some SVG utility methods",
              "summary": "",
              "path": "helper/svg-helper-mixin.html",
              "properties": [],
              "methods": [
                {
                  "name": "translateCenter",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 16,
                      "column": 6
                    },
                    "end": {
                      "line": 18,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "w"
                    },
                    {
                      "name": "h"
                    }
                  ]
                },
                {
                  "name": "translate",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 20,
                      "column": 6
                    },
                    "end": {
                      "line": 22,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "x"
                    },
                    {
                      "name": "y"
                    }
                  ]
                },
                {
                  "name": "rotate",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 23,
                      "column": 6
                    },
                    "end": {
                      "line": 25,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "angle"
                    }
                  ]
                },
                {
                  "name": "svgScale",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 27,
                      "column": 6
                    },
                    "end": {
                      "line": 29,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "factor"
                    }
                  ]
                },
                {
                  "name": "matrix",
                  "description": "TODO",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 32,
                      "column": 6
                    },
                    "end": {
                      "line": 34,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "fitTo",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "source"
                    },
                    {
                      "name": "target"
                    },
                    {
                      "name": "factor"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 53,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.SVGHelper",
              "attributes": [],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  Registerable\n\nAllow component to be registerable by containters that will listen to `multi-register` event\n\n### Events\nFired when the component is attached so that container can register it",
              "summary": "",
              "path": "helper/registerable-mixin.html",
              "properties": [
                {
                  "name": "groupName",
                  "type": "string | null | undefined",
                  "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "String"
                    }
                  }
                },
                {
                  "name": "registerEventName",
                  "type": "string | null | undefined",
                  "description": "`registerEventName`  the name of the event to be used for registering",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 35,
                      "column": 10
                    },
                    "end": {
                      "line": 38,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "String"
                    }
                  },
                  "defaultValue": "\"multi-register\""
                },
                {
                  "name": "registerOrder",
                  "type": "number | null | undefined",
                  "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 43,
                      "column": 10
                    },
                    "end": {
                      "line": 47,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true,
                      "attributeType": "Number"
                    }
                  },
                  "defaultValue": "0"
                }
              ],
              "methods": [
                {
                  "name": "connectedCallback",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 51,
                      "column": 6
                    },
                    "end": {
                      "line": 54,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "disconnectedCallback",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 56,
                      "column": 6
                    },
                    "end": {
                      "line": 59,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "postRemove",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 61,
                      "column": 6
                    },
                    "end": {
                      "line": 63,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 18,
                  "column": 2
                },
                "end": {
                  "line": 67,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.Registerable",
              "attributes": [
                {
                  "name": "group-name",
                  "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "string | null | undefined"
                },
                {
                  "name": "register-event-name",
                  "description": "`registerEventName`  the name of the event to be used for registering",
                  "sourceRange": {
                    "start": {
                      "line": 35,
                      "column": 10
                    },
                    "end": {
                      "line": 38,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "string | null | undefined"
                },
                {
                  "name": "register-order",
                  "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
                  "sourceRange": {
                    "start": {
                      "line": 43,
                      "column": 10
                    },
                    "end": {
                      "line": 47,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  DispatchSVG\n\ndispatch template elements marked as slot-svg=\"svgID\" to svgHost",
              "summary": "",
              "path": "helper/dispatch-svg-mixin.html",
              "properties": [
                {
                  "name": "svgHost",
                  "type": "Object | null | undefined",
                  "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 23,
                      "column": 10
                    },
                    "end": {
                      "line": 26,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"observeSvgHost\"",
                      "attributeType": "Object"
                    }
                  }
                },
                {
                  "name": "_hostedNodes",
                  "type": "Object | null | undefined",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 10
                    },
                    "end": {
                      "line": 31,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Object"
                    }
                  },
                  "defaultValue": "{}"
                }
              ],
              "methods": [
                {
                  "name": "observeSvgHost",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 53,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "host"
                    },
                    {
                      "name": "old"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "afterRegister",
                  "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 56,
                      "column": 6
                    },
                    "end": {
                      "line": 58,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "host"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "afterUnregister",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 60,
                      "column": 6
                    },
                    "end": {
                      "line": 62,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "postRemove",
                  "description": "`postRemove` is called by `registerable-mixin` on disconnectedCallback.\nIt unregisters this element from svgHost.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 68,
                      "column": 6
                    },
                    "end": {
                      "line": 73,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 13,
                  "column": 2
                },
                "end": {
                  "line": 76,
                  "column": 5
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.DispatchSVG",
              "attributes": [
                {
                  "name": "svg-host",
                  "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
                  "sourceRange": {
                    "start": {
                      "line": 23,
                      "column": 10
                    },
                    "end": {
                      "line": 26,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Object | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  Resizable\n\nhandles size and resizing",
              "summary": "",
              "path": "helper/resizable-mixin.html",
              "properties": [
                {
                  "name": "container",
                  "type": "?",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 55,
                      "column": 5
                    },
                    "end": {
                      "line": 57,
                      "column": 6
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "containerWidth",
                  "type": "?",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 59,
                      "column": 5
                    },
                    "end": {
                      "line": 61,
                      "column": 6
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "containerHeight",
                  "type": "?",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 63,
                      "column": 5
                    },
                    "end": {
                      "line": 65,
                      "column": 6
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "width",
                  "type": "number | null | undefined",
                  "description": "`width`  of SVG host",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 26,
                      "column": 9
                    },
                    "end": {
                      "line": 29,
                      "column": 10
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true,
                      "attributeType": "Number"
                    }
                  }
                },
                {
                  "name": "height",
                  "type": "number | null | undefined",
                  "description": "`height` of SVG host",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 34,
                      "column": 9
                    },
                    "end": {
                      "line": 37,
                      "column": 10
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true,
                      "attributeType": "Number"
                    }
                  }
                },
                {
                  "name": "center",
                  "type": "Array | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 39,
                      "column": 9
                    },
                    "end": {
                      "line": 42,
                      "column": 10
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true,
                      "attributeType": "Array"
                    }
                  }
                },
                {
                  "name": "minSize",
                  "type": "number | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 44,
                      "column": 9
                    },
                    "end": {
                      "line": 47,
                      "column": 10
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true,
                      "attributeType": "Number"
                    }
                  }
                }
              ],
              "methods": [
                {
                  "name": "connectedCallback",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 67,
                      "column": 4
                    },
                    "end": {
                      "line": 72,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "onResize",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 74,
                      "column": 4
                    },
                    "end": {
                      "line": 77,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "e"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "_computeCenter",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 79,
                      "column": 4
                    },
                    "end": {
                      "line": 81,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "width"
                    },
                    {
                      "name": "height"
                    }
                  ]
                },
                {
                  "name": "_computeMinSize",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 83,
                      "column": 4
                    },
                    "end": {
                      "line": 88,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "width"
                    },
                    {
                      "name": "height"
                    }
                  ]
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "line": 93,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.Resizable",
              "attributes": [
                {
                  "name": "width",
                  "description": "`width`  of SVG host",
                  "sourceRange": {
                    "start": {
                      "line": 26,
                      "column": 9
                    },
                    "end": {
                      "line": 29,
                      "column": 10
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                },
                {
                  "name": "height",
                  "description": "`height` of SVG host",
                  "sourceRange": {
                    "start": {
                      "line": 34,
                      "column": 9
                    },
                    "end": {
                      "line": 37,
                      "column": 10
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                },
                {
                  "name": "center",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 39,
                      "column": 9
                    },
                    "end": {
                      "line": 42,
                      "column": 10
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                },
                {
                  "name": "min-size",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 44,
                      "column": 9
                    },
                    "end": {
                      "line": 47,
                      "column": 10
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  Draw\n\nhandles drawable drawing mechanism",
              "summary": "",
              "path": "drawable/draw-mixin.html",
              "properties": [
                {
                  "name": "drawableData",
                  "type": "?",
                  "description": " \n`getDrawable` allows to specify which data to use for generating the chart.\nThis is usefull for multi-geo where chart is generated by topojson feature and not by raw data.\n       ",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 60,
                      "column": 6
                    },
                    "end": {
                      "line": 62,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "shallTransition",
                  "type": "?",
                  "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 162,
                      "column": 6
                    },
                    "end": {
                      "line": 165,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "data",
                  "type": "Array | null | undefined",
                  "description": "`data`  to draw the chart from",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 22,
                      "column": 10
                    },
                    "end": {
                      "line": 24,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  }
                },
                {
                  "name": "transition",
                  "type": "Function | null | undefined",
                  "description": "`transition` a transition composer function",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 10
                    },
                    "end": {
                      "line": 36,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "filter",
                  "type": "Function | null | undefined",
                  "description": "`filter` a way to filter data passed to draw method",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 42,
                      "column": 11
                    },
                    "end": {
                      "line": 44,
                      "column": 14
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                }
              ],
              "methods": [
                {
                  "name": "ready",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 49,
                      "column": 6
                    },
                    "end": {
                      "line": 54,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "setData",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 64,
                      "column": 6
                    },
                    "end": {
                      "line": 73,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "data"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "redraw",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 75,
                      "column": 6
                    },
                    "end": {
                      "line": 79,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "dataChanged",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 81,
                      "column": 6
                    },
                    "end": {
                      "line": 84,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "transition"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "shape",
                  "description": "`shape` some charts are easier to draw is data is reshaped (for instance, stack chart)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 89,
                      "column": 6
                    },
                    "end": {
                      "line": 91,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "data"
                    }
                  ]
                },
                {
                  "name": "render",
                  "description": "`render` the rendering logic: predraw => shape => draw => postDraw\nif drawing is not successfull, `render` function is called again in 50ms, 4 additional time.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 97,
                      "column": 6
                    },
                    "end": {
                      "line": 124,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "transition"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "debounceRender",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 126,
                      "column": 6
                    },
                    "end": {
                      "line": 132,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "preDraw",
                  "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 137,
                      "column": 6
                    },
                    "end": {
                      "line": 142,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "chart"
                    }
                  ]
                },
                {
                  "name": "draw",
                  "description": "`draw` this is where we work !",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 147,
                      "column": 6
                    },
                    "end": {
                      "line": 149,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "postDraw",
                  "description": "`postDraw` set click/tap/mouseenter/mouseleave event.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 154,
                      "column": 6
                    },
                    "end": {
                      "line": 157,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "onMultiRefresh",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 167,
                      "column": 6
                    },
                    "end": {
                      "line": 170,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "e"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "onResize",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 172,
                      "column": 6
                    },
                    "end": {
                      "line": 175,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "postRemove",
                  "description": "`postRemove` is called when the element is disconnected from DOM",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 180,
                      "column": 6
                    },
                    "end": {
                      "line": 184,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "applyTransition",
                  "description": "`applyTransition`  applies a transition to chart",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 189,
                      "column": 6
                    },
                    "end": {
                      "line": 192,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "chart"
                    },
                    {
                      "name": "transition"
                    }
                  ]
                },
                {
                  "name": "onEndTransition",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 194,
                      "column": 6
                    },
                    "end": {
                      "line": 194,
                      "column": 26
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 196,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.Draw",
              "attributes": [
                {
                  "name": "data",
                  "description": "`data`  to draw the chart from",
                  "sourceRange": {
                    "start": {
                      "line": 22,
                      "column": 10
                    },
                    "end": {
                      "line": 24,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                },
                {
                  "name": "transition",
                  "description": "`transition` a transition composer function",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 10
                    },
                    "end": {
                      "line": 36,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "filter",
                  "description": "`filter` a way to filter data passed to draw method",
                  "sourceRange": {
                    "start": {
                      "line": 42,
                      "column": 11
                    },
                    "end": {
                      "line": 44,
                      "column": 14
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  ZoomableProperties\n\nMixin managing [d3-zoom]() API properies",
              "summary": "",
              "path": "d3-zoom/zoomable-properties-mixin.html",
              "properties": [
                {
                  "name": "enableZoom",
                  "type": "boolean | null | undefined",
                  "description": "`enableZoom` set true to enable zoom behaviors",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 10
                    },
                    "end": {
                      "line": 23,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Boolean"
                    }
                  }
                },
                {
                  "name": "extent",
                  "type": "Array | null | undefined",
                  "description": "[`extent`] (https://github.com/d3/d3-zoom#zoom_extent) sets the viewport extent to the specified array of points [[x0, y0], [x1, y1]]",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  }
                },
                {
                  "name": "scaleExtent",
                  "type": "Array | null | undefined",
                  "description": "[`scaleExtent`](https://github.com/d3/d3-zoom#zoom_scaleExtent) sets the scale extent to the specified array of numbers [k0, k1] where k0 is the minimum allowed scale factor and k1 is the maximum allowed scale factor, and returns this zoom behavior.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 35,
                      "column": 10
                    },
                    "end": {
                      "line": 37,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  }
                }
              ],
              "methods": [],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 41,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.ZoomableProperties",
              "attributes": [
                {
                  "name": "enable-zoom",
                  "description": "`enableZoom` set true to enable zoom behaviors",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 10
                    },
                    "end": {
                      "line": 23,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "boolean | null | undefined"
                },
                {
                  "name": "extent",
                  "description": "[`extent`] (https://github.com/d3/d3-zoom#zoom_extent) sets the viewport extent to the specified array of points [[x0, y0], [x1, y1]]",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                },
                {
                  "name": "scale-extent",
                  "description": "[`scaleExtent`](https://github.com/d3/d3-zoom#zoom_scaleExtent) sets the scale extent to the specified array of numbers [k0, k1] where k0 is the minimum allowed scale factor and k1 is the maximum allowed scale factor, and returns this zoom behavior.",
                  "sourceRange": {
                    "start": {
                      "line": 35,
                      "column": 10
                    },
                    "end": {
                      "line": 37,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  Zoomable\n\nallows charts to be zoomable",
              "summary": "",
              "path": "d3-zoom/zoomable-mixin.html",
              "properties": [
                {
                  "name": "zoomedEl",
                  "type": "?",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 43,
                      "column": 6
                    },
                    "end": {
                      "line": 45,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "enableZoom",
                  "type": "boolean | null | undefined",
                  "description": "`enableZoom` set true to enable zoom behaviors",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 26,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"_observeEnableZoom\"",
                      "attributeType": "Boolean"
                    }
                  }
                }
              ],
              "methods": [
                {
                  "name": "_observeEnableZoom",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 47,
                      "column": 6
                    },
                    "end": {
                      "line": 61,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "enable"
                    },
                    {
                      "name": "old"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 14,
                  "column": 2
                },
                "end": {
                  "line": 63,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.Zoomable",
              "attributes": [
                {
                  "name": "enable-zoom",
                  "description": "`enableZoom` set true to enable zoom behaviors",
                  "sourceRange": {
                    "start": {
                      "line": 26,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "boolean | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "## MultiRegister\n\nThe responsibility of this mixin is to observe nodes added to `#obseveNodes`.\nIt adds elements fireing a`multi-register to `_registeredItems` and elements\nfireing `multi-serie-register` to `series`.",
              "summary": "",
              "path": "container/multi-register-mixin.html",
              "properties": [
                {
                  "name": "_registeredItems",
                  "type": "Array | null | undefined",
                  "description": "`_registeredItems`  the list of registered items (registerable items)",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 10
                    },
                    "end": {
                      "line": 33,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  },
                  "defaultValue": "[]"
                },
                {
                  "name": "series",
                  "type": "Array | null | undefined",
                  "description": "`series` the list of data serie registered for this container.\nWe can eiher pass a serie array like [{key: 'apple', label:'apple'}, accessor: d => +d.value.apple}, {key: 'orange', label:'orange'}, accessor: d => +d.value.orange}],\n or use `<multi-serie>` component to register series via markup",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 41,
                      "column": 10
                    },
                    "end": {
                      "line": 47,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Array"
                    }
                  },
                  "defaultValue": "[]"
                },
                {
                  "name": "data",
                  "type": "Array | null | undefined",
                  "description": "`data` to display the chart",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 52,
                      "column": 10
                    },
                    "end": {
                      "line": 54,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  }
                },
                {
                  "name": "transition",
                  "type": "Function | null | undefined",
                  "description": "`transition` to apply while drawing",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 59,
                      "column": 10
                    },
                    "end": {
                      "line": 61,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "serieValueDomain",
                  "type": "Object | null | undefined",
                  "description": "`serieValueDomain` value domain for each serie groupName.\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 67,
                      "column": 10
                    },
                    "end": {
                      "line": 70,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Object"
                    }
                  }
                },
                {
                  "name": "serieOrdinalDomain",
                  "type": "Object | null | undefined",
                  "description": "`serieOrdinalDomain` ordinal domain for series",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 75,
                      "column": 10
                    },
                    "end": {
                      "line": 78,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Object"
                    }
                  }
                },
                {
                  "name": "ordinalDomainMapper",
                  "type": "Function | null | undefined",
                  "description": "`ordinalDomainMapper` a mapper for serie ordinal valued. By default, identity function.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 83,
                      "column": 10
                    },
                    "end": {
                      "line": 85,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "_multiData",
                  "type": "Array | null | undefined",
                  "description": "`_multiData` reshaped data to use internally within MultiChart.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 91,
                      "column": 10
                    },
                    "end": {
                      "line": 93,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  }
                }
              ],
              "methods": [
                {
                  "name": "ready",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 105,
                      "column": 6
                    },
                    "end": {
                      "line": 110,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "_observeDataGenerators",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 112,
                      "column": 6
                    },
                    "end": {
                      "line": 157,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "getOrdinalDomain",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 159,
                      "column": 6
                    },
                    "end": {
                      "line": 169,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "mapper"
                    }
                  ]
                },
                {
                  "name": "_callDataChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 171,
                      "column": 6
                    },
                    "end": {
                      "line": 175,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "splices"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "_registerItem",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 177,
                      "column": 6
                    },
                    "end": {
                      "line": 184,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "name"
                    },
                    {
                      "name": "item"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "_onMultiRegister",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 186,
                      "column": 6
                    },
                    "end": {
                      "line": 199,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "e"
                    },
                    {
                      "name": "d"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "_onMultiSerieRegister",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 201,
                      "column": 6
                    },
                    "end": {
                      "line": 204,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "e"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "_onRefresh",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 207,
                      "column": 6
                    },
                    "end": {
                      "line": 210,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "e"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "onResize",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 212,
                      "column": 6
                    },
                    "end": {
                      "line": 215,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "unregister",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 217,
                      "column": 6
                    },
                    "end": {
                      "line": 224,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "registered"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "shallNotify",
                  "description": "`shallNotify` should return true to actually render the component",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 229,
                      "column": 6
                    },
                    "end": {
                      "line": 231,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "data"
                    }
                  ]
                },
                {
                  "name": "callRegistered",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 233,
                      "column": 6
                    },
                    "end": {
                      "line": 248,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "methodName"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 15,
                  "column": 2
                },
                "end": {
                  "line": 252,
                  "column": 5
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.MultiRegister",
              "attributes": [
                {
                  "name": "series",
                  "description": "`series` the list of data serie registered for this container.\nWe can eiher pass a serie array like [{key: 'apple', label:'apple'}, accessor: d => +d.value.apple}, {key: 'orange', label:'orange'}, accessor: d => +d.value.orange}],\n or use `<multi-serie>` component to register series via markup",
                  "sourceRange": {
                    "start": {
                      "line": 41,
                      "column": 10
                    },
                    "end": {
                      "line": 47,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                },
                {
                  "name": "data",
                  "description": "`data` to display the chart",
                  "sourceRange": {
                    "start": {
                      "line": 52,
                      "column": 10
                    },
                    "end": {
                      "line": 54,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                },
                {
                  "name": "transition",
                  "description": "`transition` to apply while drawing",
                  "sourceRange": {
                    "start": {
                      "line": 59,
                      "column": 10
                    },
                    "end": {
                      "line": 61,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "serie-value-domain",
                  "description": "`serieValueDomain` value domain for each serie groupName.\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
                  "sourceRange": {
                    "start": {
                      "line": 67,
                      "column": 10
                    },
                    "end": {
                      "line": 70,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Object | null | undefined"
                },
                {
                  "name": "serie-ordinal-domain",
                  "description": "`serieOrdinalDomain` ordinal domain for series",
                  "sourceRange": {
                    "start": {
                      "line": 75,
                      "column": 10
                    },
                    "end": {
                      "line": 78,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Object | null | undefined"
                },
                {
                  "name": "ordinal-domain-mapper",
                  "description": "`ordinalDomainMapper` a mapper for serie ordinal valued. By default, identity function.",
                  "sourceRange": {
                    "start": {
                      "line": 83,
                      "column": 10
                    },
                    "end": {
                      "line": 85,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  MultiChartProperty\n\nSmall mixing holding",
              "summary": "",
              "path": "chart/multi-chart-property-mixin.html",
              "properties": [
                {
                  "name": "data",
                  "type": "Array | null | undefined",
                  "description": "`data` to display the chart",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 22,
                      "column": 10
                    },
                    "end": {
                      "line": 24,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  }
                },
                {
                  "name": "transition",
                  "type": "Function | null | undefined",
                  "description": "`transition` to apply while drawing",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 10
                    },
                    "end": {
                      "line": 31,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                }
              ],
              "methods": [],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "line": 35,
                  "column": 3
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.MultiChartProperty",
              "attributes": [
                {
                  "name": "data",
                  "description": "`data` to display the chart",
                  "sourceRange": {
                    "start": {
                      "line": 22,
                      "column": 10
                    },
                    "end": {
                      "line": 24,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                },
                {
                  "name": "transition",
                  "description": "`transition` to apply while drawing",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 10
                    },
                    "end": {
                      "line": 31,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  D3ScaleProperty\n\nProperties for d3-scale",
              "summary": "",
              "path": "d3-scale/d3-scale-property-mixin.html",
              "properties": [
                {
                  "name": "scaleType",
                  "type": "string | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 19,
                      "column": 10
                    },
                    "end": {
                      "line": 23,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "String"
                    }
                  },
                  "defaultValue": "\"scaleLinear\""
                },
                {
                  "name": "elastic",
                  "type": "boolean | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 25,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Boolean"
                    }
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "domain",
                  "type": "Array | null | undefined",
                  "description": "`domain` domain for this scale. It will be recomputed when data changes",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 35,
                      "column": 10
                    },
                    "end": {
                      "line": 39,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Array"
                    }
                  }
                },
                {
                  "name": "accessor",
                  "type": "Function | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 41,
                      "column": 10
                    },
                    "end": {
                      "line": 44,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "range",
                  "type": "Array | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 46,
                      "column": 10
                    },
                    "end": {
                      "line": 49,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  }
                },
                {
                  "name": "padding",
                  "type": "number | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 51,
                      "column": 10
                    },
                    "end": {
                      "line": 54,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Number"
                    }
                  }
                },
                {
                  "name": "domainMin",
                  "type": "number | null | undefined",
                  "description": "`domainMin` if set, will be used as the min value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 59,
                      "column": 10
                    },
                    "end": {
                      "line": 62,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Number"
                    }
                  }
                },
                {
                  "name": "domainMax",
                  "type": "number | null | undefined",
                  "description": "`domainMax` if set, will be used as the max value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 67,
                      "column": 10
                    },
                    "end": {
                      "line": 70,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Number"
                    }
                  }
                }
              ],
              "methods": [],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 74,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.D3ScaleProperty",
              "attributes": [
                {
                  "name": "scale-type",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 19,
                      "column": 10
                    },
                    "end": {
                      "line": 23,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "string | null | undefined"
                },
                {
                  "name": "elastic",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 25,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "boolean | null | undefined"
                },
                {
                  "name": "domain",
                  "description": "`domain` domain for this scale. It will be recomputed when data changes",
                  "sourceRange": {
                    "start": {
                      "line": 35,
                      "column": 10
                    },
                    "end": {
                      "line": 39,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                },
                {
                  "name": "accessor",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 41,
                      "column": 10
                    },
                    "end": {
                      "line": 44,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "range",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 46,
                      "column": 10
                    },
                    "end": {
                      "line": 49,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                },
                {
                  "name": "padding",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 51,
                      "column": 10
                    },
                    "end": {
                      "line": 54,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                },
                {
                  "name": "domain-min",
                  "description": "`domainMin` if set, will be used as the min value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
                  "sourceRange": {
                    "start": {
                      "line": 59,
                      "column": 10
                    },
                    "end": {
                      "line": 62,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                },
                {
                  "name": "domain-max",
                  "description": "`domainMax` if set, will be used as the max value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
                  "sourceRange": {
                    "start": {
                      "line": 67,
                      "column": 10
                    },
                    "end": {
                      "line": 70,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "## AxisProperty\n\na mixin for constructing `top`, `left`, `bottom` and `right` properties",
              "summary": "",
              "path": "d3-axis/multi-axis-property-mixin.html",
              "properties": [],
              "methods": [],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "line": 39,
                  "column": 3
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.AxisProperty",
              "attributes": [],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  ContainerAxisProperties\n\nProperties for container axis.",
              "summary": "",
              "path": "container/multi-container-axis-properties-mixin.html",
              "properties": [
                {
                  "name": "data",
                  "type": "Array | null | undefined",
                  "description": "`data` to display the chart",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 10
                    },
                    "end": {
                      "line": 23,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  }
                },
                {
                  "name": "margin",
                  "type": "Object | null | undefined",
                  "description": "`margin` applied to svg container (not css margin, wich can also be applied as per normal css rules)\nBy default margins are slightly bigger than for simple `multi-container-svg`",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 10
                    },
                    "end": {
                      "line": 37,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Object"
                    }
                  },
                  "defaultValue": "{\"top\":20,\"right\":20,\"bottom\":20,\"left\":20}"
                },
                {
                  "name": "scales",
                  "type": "Object | null | undefined",
                  "description": "`scales` key-value [scale](https://github.com/d3/d3-scale) for the active axis. `bottom` and `left` scales are always calculated. `right` and `top` scales are set only when\nright and top axis is drawn.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 43,
                      "column": 10
                    },
                    "end": {
                      "line": 49,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Object"
                    }
                  },
                  "defaultValue": "{}"
                },
                {
                  "name": "domains",
                  "type": "Object | null | undefined",
                  "description": "`domains` key-value [domain](https://github.com/d3/d3-scale#domain) for active axis. By default, `{bottom: bottomDomain, left:leftDomain}`",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 54,
                      "column": 10
                    },
                    "end": {
                      "line": 60,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Object"
                    }
                  },
                  "defaultValue": "{}"
                },
                {
                  "name": "ranges",
                  "type": "Object | null | undefined",
                  "description": "`ranges` key-value [range](https://github.com/d3/d3-scale#range) for active axis.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 65,
                      "column": 10
                    },
                    "end": {
                      "line": 71,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Object"
                    }
                  },
                  "defaultValue": "{}"
                },
                {
                  "name": "accessors",
                  "type": "Object | null | undefined",
                  "description": "`accessors` key-value accessor functions for active axis.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 75,
                      "column": 10
                    },
                    "end": {
                      "line": 81,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Object"
                    }
                  },
                  "defaultValue": "{}"
                },
                {
                  "name": "topAxis",
                  "type": "boolean | null | undefined",
                  "description": "`topAxis` true to display top axis",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 86,
                      "column": 10
                    },
                    "end": {
                      "line": 89,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Boolean"
                    }
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "rightAxis",
                  "type": "boolean | null | undefined",
                  "description": "`rightAxis` true to display right axis",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 94,
                      "column": 10
                    },
                    "end": {
                      "line": 97,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Boolean"
                    }
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "bottomAxis",
                  "type": "boolean | null | undefined",
                  "description": "`bottomAxis` true to display bottom axis",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 101,
                      "column": 10
                    },
                    "end": {
                      "line": 104,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Boolean"
                    }
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "leftAxis",
                  "type": "boolean | null | undefined",
                  "description": "`leftAxis` true to display left axis",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 109,
                      "column": 10
                    },
                    "end": {
                      "line": 112,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Boolean"
                    }
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "leftTextAngle",
                  "type": "number | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 115,
                      "column": 10
                    },
                    "end": {
                      "line": 118,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Number"
                    }
                  },
                  "defaultValue": "-90"
                },
                {
                  "name": "leftYText",
                  "type": "number | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 120,
                      "column": 10
                    },
                    "end": {
                      "line": 123,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Number"
                    }
                  },
                  "defaultValue": "6"
                },
                {
                  "name": "leftDy",
                  "type": "string | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 125,
                      "column": 10
                    },
                    "end": {
                      "line": 128,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "String"
                    }
                  },
                  "defaultValue": "\"0.6em\""
                },
                {
                  "name": "serieValueDomain",
                  "type": "Object | null | undefined",
                  "description": "`serieValueDomain` value domain for each serie groupName, calculated in `multi-register-mixin`\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 134,
                      "column": 10
                    },
                    "end": {
                      "line": 137,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Object"
                    }
                  }
                },
                {
                  "name": "serieOrdinalDomain",
                  "type": "Object | null | undefined",
                  "description": "`serieOrdinalDomain` ordinal domain for series",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 142,
                      "column": 10
                    },
                    "end": {
                      "line": 145,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Object"
                    }
                  }
                },
                {
                  "name": "serieDomainMapping",
                  "type": "Object | null | undefined",
                  "description": "`serieDomainMapping` a mapping object that will make sure that scale domains are properly set when we use data series.\nthe default mapping will use value domain for left axis and ordinal domain for bottom axis",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 151,
                      "column": 10
                    },
                    "end": {
                      "line": 157,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Object"
                    }
                  },
                  "defaultValue": "{\"bottom\":\"serieOrdinalDomain.default\",\"left\":\"serieValueDomain.default\"}"
                },
                {
                  "name": "ordinalDomainMapper",
                  "type": "Function | null | undefined",
                  "description": "`ordinalDomainMapper` a mapper for serie ordinal valued.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 162,
                      "column": 10
                    },
                    "end": {
                      "line": 164,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "topAccessorPath",
                  "type": "string | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 166,
                      "column": 10
                    },
                    "end": {
                      "line": 166,
                      "column": 33
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "String"
                    }
                  }
                },
                {
                  "name": "rightAccessorPath",
                  "type": "string | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 167,
                      "column": 10
                    },
                    "end": {
                      "line": 167,
                      "column": 35
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "String"
                    }
                  }
                },
                {
                  "name": "bottomAccessorPath",
                  "type": "string | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 168,
                      "column": 10
                    },
                    "end": {
                      "line": 168,
                      "column": 36
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "String"
                    }
                  }
                },
                {
                  "name": "leftAccessorPath",
                  "type": "string | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 169,
                      "column": 10
                    },
                    "end": {
                      "line": 169,
                      "column": 34
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "String"
                    }
                  }
                }
              ],
              "methods": [],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 174,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.ContainerAxisProperties",
              "attributes": [
                {
                  "name": "data",
                  "description": "`data` to display the chart",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 10
                    },
                    "end": {
                      "line": 23,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                },
                {
                  "name": "margin",
                  "description": "`margin` applied to svg container (not css margin, wich can also be applied as per normal css rules)\nBy default margins are slightly bigger than for simple `multi-container-svg`",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 10
                    },
                    "end": {
                      "line": 37,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Object | null | undefined"
                },
                {
                  "name": "scales",
                  "description": "`scales` key-value [scale](https://github.com/d3/d3-scale) for the active axis. `bottom` and `left` scales are always calculated. `right` and `top` scales are set only when\nright and top axis is drawn.",
                  "sourceRange": {
                    "start": {
                      "line": 43,
                      "column": 10
                    },
                    "end": {
                      "line": 49,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Object | null | undefined"
                },
                {
                  "name": "domains",
                  "description": "`domains` key-value [domain](https://github.com/d3/d3-scale#domain) for active axis. By default, `{bottom: bottomDomain, left:leftDomain}`",
                  "sourceRange": {
                    "start": {
                      "line": 54,
                      "column": 10
                    },
                    "end": {
                      "line": 60,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Object | null | undefined"
                },
                {
                  "name": "ranges",
                  "description": "`ranges` key-value [range](https://github.com/d3/d3-scale#range) for active axis.",
                  "sourceRange": {
                    "start": {
                      "line": 65,
                      "column": 10
                    },
                    "end": {
                      "line": 71,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Object | null | undefined"
                },
                {
                  "name": "accessors",
                  "description": "`accessors` key-value accessor functions for active axis.",
                  "sourceRange": {
                    "start": {
                      "line": 75,
                      "column": 10
                    },
                    "end": {
                      "line": 81,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Object | null | undefined"
                },
                {
                  "name": "top-axis",
                  "description": "`topAxis` true to display top axis",
                  "sourceRange": {
                    "start": {
                      "line": 86,
                      "column": 10
                    },
                    "end": {
                      "line": 89,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "boolean | null | undefined"
                },
                {
                  "name": "right-axis",
                  "description": "`rightAxis` true to display right axis",
                  "sourceRange": {
                    "start": {
                      "line": 94,
                      "column": 10
                    },
                    "end": {
                      "line": 97,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "boolean | null | undefined"
                },
                {
                  "name": "bottom-axis",
                  "description": "`bottomAxis` true to display bottom axis",
                  "sourceRange": {
                    "start": {
                      "line": 101,
                      "column": 10
                    },
                    "end": {
                      "line": 104,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "boolean | null | undefined"
                },
                {
                  "name": "left-axis",
                  "description": "`leftAxis` true to display left axis",
                  "sourceRange": {
                    "start": {
                      "line": 109,
                      "column": 10
                    },
                    "end": {
                      "line": 112,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "boolean | null | undefined"
                },
                {
                  "name": "left-text-angle",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 115,
                      "column": 10
                    },
                    "end": {
                      "line": 118,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                },
                {
                  "name": "left-y-text",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 120,
                      "column": 10
                    },
                    "end": {
                      "line": 123,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                },
                {
                  "name": "left-dy",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 125,
                      "column": 10
                    },
                    "end": {
                      "line": 128,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "string | null | undefined"
                },
                {
                  "name": "serie-value-domain",
                  "description": "`serieValueDomain` value domain for each serie groupName, calculated in `multi-register-mixin`\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
                  "sourceRange": {
                    "start": {
                      "line": 134,
                      "column": 10
                    },
                    "end": {
                      "line": 137,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Object | null | undefined"
                },
                {
                  "name": "serie-ordinal-domain",
                  "description": "`serieOrdinalDomain` ordinal domain for series",
                  "sourceRange": {
                    "start": {
                      "line": 142,
                      "column": 10
                    },
                    "end": {
                      "line": 145,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Object | null | undefined"
                },
                {
                  "name": "serie-domain-mapping",
                  "description": "`serieDomainMapping` a mapping object that will make sure that scale domains are properly set when we use data series.\nthe default mapping will use value domain for left axis and ordinal domain for bottom axis",
                  "sourceRange": {
                    "start": {
                      "line": 151,
                      "column": 10
                    },
                    "end": {
                      "line": 157,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Object | null | undefined"
                },
                {
                  "name": "ordinal-domain-mapper",
                  "description": "`ordinalDomainMapper` a mapper for serie ordinal valued.",
                  "sourceRange": {
                    "start": {
                      "line": 162,
                      "column": 10
                    },
                    "end": {
                      "line": 164,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "top-accessor-path",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 166,
                      "column": 10
                    },
                    "end": {
                      "line": 166,
                      "column": 33
                    }
                  },
                  "metadata": {},
                  "type": "string | null | undefined"
                },
                {
                  "name": "right-accessor-path",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 167,
                      "column": 10
                    },
                    "end": {
                      "line": 167,
                      "column": 35
                    }
                  },
                  "metadata": {},
                  "type": "string | null | undefined"
                },
                {
                  "name": "bottom-accessor-path",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 168,
                      "column": 10
                    },
                    "end": {
                      "line": 168,
                      "column": 36
                    }
                  },
                  "metadata": {},
                  "type": "string | null | undefined"
                },
                {
                  "name": "left-accessor-path",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 169,
                      "column": 10
                    },
                    "end": {
                      "line": 169,
                      "column": 34
                    }
                  },
                  "metadata": {},
                  "type": "string | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  D3ShapeCoordinate\n\nCoordinate properties (x and y)",
              "summary": "",
              "path": "d3-shape/d3-shape-coordinate-mixin.html",
              "properties": [
                {
                  "name": "x",
                  "type": "Function | null | undefined",
                  "description": "`x` the x accessor to be applied to the line generator",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 10
                    },
                    "end": {
                      "line": 24,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true,
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "xAccessor",
                  "type": "Function | null | undefined",
                  "description": "`xAccessor`  the accessor function for x data",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 10
                    },
                    "end": {
                      "line": 31,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "xScale",
                  "type": "Function | null | undefined",
                  "description": "`xScale`  scale function for x domain",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 36,
                      "column": 10
                    },
                    "end": {
                      "line": 38,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "y",
                  "type": "Function | null | undefined",
                  "description": "`y` the y accessor to be applied to the line generator",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 43,
                      "column": 10
                    },
                    "end": {
                      "line": 46,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true,
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "yAccessor",
                  "type": "Function | null | undefined",
                  "description": "`yAccessor`  the accessor function for y data",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 51,
                      "column": 10
                    },
                    "end": {
                      "line": 53,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "yScale",
                  "type": "Function | null | undefined",
                  "description": "`yScale`  scale function for y domain",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 58,
                      "column": 10
                    },
                    "end": {
                      "line": 60,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                }
              ],
              "methods": [
                {
                  "name": "_observeScaleAccessor",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 71,
                      "column": 6
                    },
                    "end": {
                      "line": 78,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "scale"
                    },
                    {
                      "name": "accessor"
                    },
                    {
                      "name": "name"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 81,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.D3ShapeCoordinate",
              "attributes": [
                {
                  "name": "x",
                  "description": "`x` the x accessor to be applied to the line generator",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 10
                    },
                    "end": {
                      "line": 24,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "x-accessor",
                  "description": "`xAccessor`  the accessor function for x data",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 10
                    },
                    "end": {
                      "line": 31,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "x-scale",
                  "description": "`xScale`  scale function for x domain",
                  "sourceRange": {
                    "start": {
                      "line": 36,
                      "column": 10
                    },
                    "end": {
                      "line": 38,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "y",
                  "description": "`y` the y accessor to be applied to the line generator",
                  "sourceRange": {
                    "start": {
                      "line": 43,
                      "column": 10
                    },
                    "end": {
                      "line": 46,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "y-accessor",
                  "description": "`yAccessor`  the accessor function for y data",
                  "sourceRange": {
                    "start": {
                      "line": 51,
                      "column": 10
                    },
                    "end": {
                      "line": 53,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "y-scale",
                  "description": "`yScale`  scale function for y domain",
                  "sourceRange": {
                    "start": {
                      "line": 58,
                      "column": 10
                    },
                    "end": {
                      "line": 60,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  MultiDrawableSerie\n\na Mixin to implement generic draw function for seriest",
              "summary": "",
              "path": "drawable/multi-drawable-serie-mixin.html",
              "properties": [
                {
                  "name": "shapeClass",
                  "type": "?",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 41,
                      "column": 6
                    },
                    "end": {
                      "line": 44,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "shapeName",
                  "type": "?",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 46,
                      "column": 6
                    },
                    "end": {
                      "line": 48,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "shaper",
                  "type": "Function | null | undefined",
                  "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 10
                    },
                    "end": {
                      "line": 23,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "xAccessor",
                  "type": "Function | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 25,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "yAccessor",
                  "type": "Function | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 32,
                      "column": 10
                    },
                    "end": {
                      "line": 37,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                }
              ],
              "methods": [
                {
                  "name": "drawSerieElement",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 50,
                      "column": 6
                    },
                    "end": {
                      "line": 53,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "chart"
                    },
                    {
                      "name": "data"
                    }
                  ]
                },
                {
                  "name": "drawSerieGroup",
                  "description": "`drawSerieGroup` builds one level of data  binding -> remove superfluous -> append new -> merge -> return chart\nWe can hence call this function for first grouping all keys and then build individual shapes (see multi-drawable-bubble)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 59,
                      "column": 6
                    },
                    "end": {
                      "line": 79,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "shapeName"
                    },
                    {
                      "name": "shapeClass"
                    },
                    {
                      "name": "chart"
                    },
                    {
                      "name": "transition"
                    }
                  ]
                },
                {
                  "name": "draw",
                  "description": "`draw` serie data, which are in the form of [{key, label, data: [dataValues]}]",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 84,
                      "column": 6
                    },
                    "end": {
                      "line": 91,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "data"
                    }
                  ]
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 93,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.MultiDrawableSerie",
              "attributes": [
                {
                  "name": "shaper",
                  "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 10
                    },
                    "end": {
                      "line": 23,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "x-accessor",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 25,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "y-accessor",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 32,
                      "column": 10
                    },
                    "end": {
                      "line": 37,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  TrackHover\n\ntrack which element is being hovered",
              "summary": "",
              "path": "helper/track-hover-mixin.html",
              "properties": [
                {
                  "name": "trackHover",
                  "type": "boolean | null | undefined",
                  "description": "`trackHover` set true if selector listen to mouseenter/mouseleave events and set hoveredItem accordingly.\nWhen true, this element also and fires `multi-mouseenter` and multi-mouseleave.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 22,
                      "column": 10
                    },
                    "end": {
                      "line": 25,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Boolean"
                    }
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "hovered",
                  "type": "string | null | undefined",
                  "description": "`hovered` the hovered item, tracked when `trackHover` is set to true.\nThis is usefull for instance when we want to highlight the legend being hovered",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 31,
                      "column": 10
                    },
                    "end": {
                      "line": 35,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "observer": "\"_observerHovered\"",
                      "attributeType": "String"
                    }
                  }
                }
              ],
              "methods": [
                {
                  "name": "attachListeners",
                  "description": "`attachListeners` listen to click, mouseenter and mouseleave and\nfires their respective `multi` events (`multi-tap`, `multi-mouse-enter` and `multi-mouse-leave`)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 43,
                      "column": 6
                    },
                    "end": {
                      "line": 50,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "sel"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "detatchListeners",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 52,
                      "column": 6
                    },
                    "end": {
                      "line": 56,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "sel"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "onMouseenter",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 58,
                      "column": 6
                    },
                    "end": {
                      "line": 61,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "d"
                    },
                    {
                      "name": "i"
                    },
                    {
                      "name": "el"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "onMouseleave",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 63,
                      "column": 6
                    },
                    "end": {
                      "line": 66,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "d"
                    },
                    {
                      "name": "i"
                    },
                    {
                      "name": "el"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "getKey",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 68,
                      "column": 6
                    },
                    "end": {
                      "line": 70,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "d"
                    }
                  ]
                },
                {
                  "name": "_observerHovered",
                  "description": "`_observerHoveredItem` add `.hovered` class to all items with same key as hovered",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 75,
                      "column": 6
                    },
                    "end": {
                      "line": 83,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "hovered"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "line": 85,
                  "column": 3
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.TrackHover",
              "attributes": [
                {
                  "name": "track-hover",
                  "description": "`trackHover` set true if selector listen to mouseenter/mouseleave events and set hoveredItem accordingly.\nWhen true, this element also and fires `multi-mouseenter` and multi-mouseleave.",
                  "sourceRange": {
                    "start": {
                      "line": 22,
                      "column": 10
                    },
                    "end": {
                      "line": 25,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "boolean | null | undefined"
                },
                {
                  "name": "hovered",
                  "description": "`hovered` the hovered item, tracked when `trackHover` is set to true.\nThis is usefull for instance when we want to highlight the legend being hovered",
                  "sourceRange": {
                    "start": {
                      "line": 31,
                      "column": 10
                    },
                    "end": {
                      "line": 35,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "string | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            }
          ]
        }
      ],
      "elements": [
        {
          "description": "## MultiAccessor\n\n`<multi-accessor>` creates an accessor function from a String path",
          "summary": "",
          "path": "helper/multi-accessor.html",
          "properties": [
            {
              "name": "accessor",
              "type": "Function | null | undefined",
              "description": "`accessor` the accessor function\nexample function : `d => {return +d.count}`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 10
                },
                "end": {
                  "line": 27,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "path",
              "type": "string | null | undefined",
              "description": "`path` the path from which tha accessor function is built\nFor instance `+count` will create `d => {return +d.count}` function.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 33,
                  "column": 10
                },
                "end": {
                  "line": 35,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "subPath",
              "type": "boolean | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "_observePath",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 48,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "subPath"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 14,
              "column": 4
            },
            "end": {
              "line": 63,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "Polymer.Element",
          "name": "MultiChart.MultiAccessor",
          "attributes": [
            {
              "name": "accessor",
              "description": "`accessor` the accessor function\nexample function : `d => {return +d.count}`",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 10
                },
                "end": {
                  "line": 27,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "path",
              "description": "`path` the path from which tha accessor function is built\nFor instance `+count` will create `d => {return +d.count}` function.",
              "sourceRange": {
                "start": {
                  "line": 33,
                  "column": 10
                },
                "end": {
                  "line": 35,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "sub-path",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "accessor-changed",
              "description": "Fired when the `accessor` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-accessor"
        },
        {
          "description": "## D3Shape\n\n`<d3-shape>` a base class for creating d3-shape (https://github.com/d3/d3-shape)",
          "summary": "",
          "path": "d3-shape/d3-shape.html",
          "properties": [
            {
              "name": "_verbose",
              "type": "?",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 35,
                  "column": 5
                },
                "end": {
                  "line": 37,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "verbose",
              "type": "boolean | null | undefined",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "logPrefix",
              "type": "string | null | undefined",
              "description": "`logPrefix`",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"[multi-chart]\"",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "shaper",
              "type": "Function | null | undefined",
              "description": "`shaper` the generator function - will be overriden in more specific subClass (e.g. pie, bar)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 34,
                  "column": 10
                },
                "end": {
                  "line": 43,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "pauseObserver",
              "description": "`pauserObserver` call this to cancel observeConfig to run",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 19,
                  "column": 6
                },
                "end": {
                  "line": 21,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "activateObserver",
              "description": "`activateObserver` make observer functions  active again",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 26,
                  "column": 6
                },
                "end": {
                  "line": 28,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "applyConfig",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 30,
                  "column": 6
                },
                "end": {
                  "line": 36,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                },
                {
                  "name": "properties"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "observeConfig",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 38,
                  "column": 6
                },
                "end": {
                  "line": 63,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                },
                {
                  "name": "name"
                },
                {
                  "name": "targetName"
                },
                {
                  "name": "eventName"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "observeConfigSplices",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 64,
                  "column": 6
                },
                "end": {
                  "line": 78,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "splice"
                },
                {
                  "name": "name"
                },
                {
                  "name": "targetName"
                },
                {
                  "name": "eventName"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "_log",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 39,
                  "column": 5
                },
                "end": {
                  "line": 43,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_warn",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 45,
                  "column": 5
                },
                "end": {
                  "line": 49,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_error",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 51,
                  "column": 5
                },
                "end": {
                  "line": 55,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args",
                  "rest": true
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 4
            },
            "end": {
              "line": 46,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.D3Shape",
          "attributes": [
            {
              "name": "verbose",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "log-prefix",
              "description": "`logPrefix`",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "shaper",
              "description": "`shaper` the generator function - will be overriden in more specific subClass (e.g. pie, bar)",
              "sourceRange": {
                "start": {
                  "line": 34,
                  "column": 10
                },
                "end": {
                  "line": 43,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "shaper-changed",
              "description": "Fired when the `shaper` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-shape",
          "mixins": [
            "MultiChart.mixin.PolymerExtends",
            "MultiChart.mixin.ConfigHelper",
            "MultiChart.mixin.Logger"
          ]
        },
        {
          "description": "## D3ShapePie\n\n`<d3-shape-pie>` a path generator for pie",
          "summary": "",
          "path": "d3-shape/d3-shape-pie.html",
          "properties": [
            {
              "name": "_verbose",
              "type": "?",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 35,
                  "column": 5
                },
                "end": {
                  "line": 37,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "verbose",
              "type": "boolean | null | undefined",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "logPrefix",
              "type": "string | null | undefined",
              "description": "`logPrefix`",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"[multi-chart]\"",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "shaper",
              "type": "Function | null | undefined",
              "description": "`shaper` the [pie](https://github.com/d3/d3-shape#pie) shaper function",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 26,
                  "column": 10
                },
                "end": {
                  "line": 33,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "value",
              "type": "Function | null | undefined",
              "description": "`value` as in [value](https://github.com/d3/d3-shape#pie_value) to be applied to the pie. If not set by host, can be computed by providing a valuePath.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "padAngle",
              "type": "?",
              "description": "`padAngle` as in [padAngle](https://github.com/d3/d3-shape#pie_padAngle) to be applied to the pie.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            },
            {
              "name": "sort",
              "type": "Function | null | undefined",
              "description": "`sort` as in [sort](https://github.com/d3/d3-shape#pie_sort). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 55,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "defaultValue": "null"
            },
            {
              "name": "sortValues",
              "type": "Function | null | undefined",
              "description": "`sortValue` as in [sortValues](https://github.com/d3/d3-shape#pie_sortValues). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "defaultValue": "null"
            }
          ],
          "methods": [
            {
              "name": "pauseObserver",
              "description": "`pauserObserver` call this to cancel observeConfig to run",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 19,
                  "column": 6
                },
                "end": {
                  "line": 21,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "activateObserver",
              "description": "`activateObserver` make observer functions  active again",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 26,
                  "column": 6
                },
                "end": {
                  "line": 28,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "applyConfig",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 30,
                  "column": 6
                },
                "end": {
                  "line": 36,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                },
                {
                  "name": "properties"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "observeConfig",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 38,
                  "column": 6
                },
                "end": {
                  "line": 63,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                },
                {
                  "name": "name"
                },
                {
                  "name": "targetName"
                },
                {
                  "name": "eventName"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "observeConfigSplices",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 64,
                  "column": 6
                },
                "end": {
                  "line": 78,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "splice"
                },
                {
                  "name": "name"
                },
                {
                  "name": "targetName"
                },
                {
                  "name": "eventName"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "_log",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 39,
                  "column": 5
                },
                "end": {
                  "line": 43,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_warn",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 45,
                  "column": 5
                },
                "end": {
                  "line": 49,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_error",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 51,
                  "column": 5
                },
                "end": {
                  "line": 55,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args",
                  "rest": true
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            }
          ],
          "staticMethods": [],
          "demos": [
            {
              "url": "index.html#multi-pie-demo",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 17,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "MultiChart.D3Shape",
          "name": "MultiChart.D3ShapePie",
          "attributes": [
            {
              "name": "verbose",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "log-prefix",
              "description": "`logPrefix`",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "shaper",
              "description": "`shaper` the [pie](https://github.com/d3/d3-shape#pie) shaper function",
              "sourceRange": {
                "start": {
                  "line": 26,
                  "column": 10
                },
                "end": {
                  "line": 33,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "value",
              "description": "`value` as in [value](https://github.com/d3/d3-shape#pie_value) to be applied to the pie. If not set by host, can be computed by providing a valuePath.",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "pad-angle",
              "description": "`padAngle` as in [padAngle](https://github.com/d3/d3-shape#pie_padAngle) to be applied to the pie.",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {}
            },
            {
              "name": "sort",
              "description": "`sort` as in [sort](https://github.com/d3/d3-shape#pie_sort). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 55,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "sort-values",
              "description": "`sortValue` as in [sortValues](https://github.com/d3/d3-shape#pie_sortValues). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "shaper-changed",
              "description": "Fired when the `shaper` property changes.",
              "metadata": {},
              "inheritedFrom": "MultiChart.D3Shape"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-shape-pie"
        },
        {
          "description": "## MultiDrawable\n\n`<multi-drawable>` it a base Class for chart element that can be drawn (e.g. line, circle ...)",
          "summary": "",
          "path": "drawable/multi-drawable.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerOrder",
              "type": "number | null | undefined",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "drawableData",
              "type": "?",
              "description": " \n`getDrawable` allows to specify which data to use for generating the chart.\nThis is usefull for multi-geo where chart is generated by topojson feature and not by raw data.\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "shallTransition",
              "type": "?",
              "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 162,
                  "column": 6
                },
                "end": {
                  "line": 165,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data`  to draw the chart from",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` a transition composer function",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` a way to filter data passed to draw method",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_verbose",
              "type": "?",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 35,
                  "column": 5
                },
                "end": {
                  "line": 37,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "verbose",
              "type": "boolean | null | undefined",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "logPrefix",
              "type": "string | null | undefined",
              "description": "`logPrefix`",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"[multi-chart]\"",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "targetElement",
              "type": "?",
              "description": "`targetElement` getter override lifecycle Behavior and called during attached\n       ",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 53,
                  "column": 6
                },
                "end": {
                  "line": 55,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 43,
                  "column": 11
                },
                "end": {
                  "line": 45,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 67,
                  "column": 4
                },
                "end": {
                  "line": 72,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called when the element is disconnected from DOM",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 184,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 53,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 172,
                  "column": 6
                },
                "end": {
                  "line": 175,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 81,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 83,
                  "column": 4
                },
                "end": {
                  "line": 88,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "setData",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 64,
                  "column": 6
                },
                "end": {
                  "line": 73,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "redraw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 75,
                  "column": 6
                },
                "end": {
                  "line": 79,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 81,
                  "column": 6
                },
                "end": {
                  "line": 84,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "shape",
              "description": "`shape` some charts are easier to draw is data is reshaped (for instance, stack chart)",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 89,
                  "column": 6
                },
                "end": {
                  "line": 91,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "render",
              "description": "`render` the rendering logic: predraw => shape => draw => postDraw\nif drawing is not successfull, `render` function is called again in 50ms, 4 additional time.",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 97,
                  "column": 6
                },
                "end": {
                  "line": 124,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "debounceRender",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 132,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "preDraw",
              "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 137,
                  "column": 6
                },
                "end": {
                  "line": 142,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "draw",
              "description": "`draw` this is where we work !",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 147,
                  "column": 6
                },
                "end": {
                  "line": 149,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "postDraw",
              "description": "`postDraw` set click/tap/mouseenter/mouseleave event.",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 154,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onMultiRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 167,
                  "column": 6
                },
                "end": {
                  "line": 170,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "applyTransition",
              "description": "`applyTransition`  applies a transition to chart",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 189,
                  "column": 6
                },
                "end": {
                  "line": 192,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onEndTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 194,
                  "column": 6
                },
                "end": {
                  "line": 194,
                  "column": 26
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_log",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 39,
                  "column": 5
                },
                "end": {
                  "line": 43,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_warn",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 45,
                  "column": 5
                },
                "end": {
                  "line": 49,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_error",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 51,
                  "column": 5
                },
                "end": {
                  "line": 55,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args",
                  "rest": true
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "identity",
              "description": "helper functions",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 7
                },
                "end": {
                  "line": 60,
                  "column": 30
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ]
            },
            {
              "name": "indexAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 61,
                  "column": 7
                },
                "end": {
                  "line": 61,
                  "column": 38
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ]
            },
            {
              "name": "keyAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 7
                },
                "end": {
                  "line": 62,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ]
            },
            {
              "name": "valueAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 63,
                  "column": 7
                },
                "end": {
                  "line": 63,
                  "column": 44
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ]
            },
            {
              "name": "dataAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 64,
                  "column": 7
                },
                "end": {
                  "line": 64,
                  "column": 42
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiDrawable",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-order",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "data",
              "description": "`data`  to draw the chart from",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "description": "`transition` a transition composer function",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "description": "`filter` a way to filter data passed to draw method",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "verbose",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "log-prefix",
              "description": "`logPrefix`",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "key",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "sourceRange": {
                "start": {
                  "line": 43,
                  "column": 11
                },
                "end": {
                  "line": 45,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-drawable",
          "mixins": [
            "MultiChart.mixin.SVGHelper",
            "MultiChart.mixin.Registerable",
            "MultiChart.mixin.DispatchSVG",
            "MultiChart.mixin.Resizable",
            "MultiChart.mixin.Draw",
            "MultiChart.mixin.Logger"
          ]
        },
        {
          "description": "## MultiDrawablePie\n\n`<multi-drawable-pie>` draws a pie",
          "summary": "",
          "path": "drawable/multi-drawable-pie.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerOrder",
              "type": "number | null | undefined",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "drawableData",
              "type": "?",
              "description": " \n`getDrawable` allows to specify which data to use for generating the chart.\nThis is usefull for multi-geo where chart is generated by topojson feature and not by raw data.\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "shallTransition",
              "type": "?",
              "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 162,
                  "column": 6
                },
                "end": {
                  "line": 165,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data`  to draw the chart from",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` a transition composer function",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` a way to filter data passed to draw method",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_verbose",
              "type": "?",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 35,
                  "column": 5
                },
                "end": {
                  "line": 37,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "verbose",
              "type": "boolean | null | undefined",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "logPrefix",
              "type": "string | null | undefined",
              "description": "`logPrefix`",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"[multi-chart]\"",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "targetElement",
              "type": "?",
              "description": "`targetElement` getter override lifecycle Behavior and called during attached\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 53,
                  "column": 6
                },
                "end": {
                  "line": 55,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 43,
                  "column": 11
                },
                "end": {
                  "line": 45,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "shapeClass",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 129,
                  "column": 6
                },
                "end": {
                  "line": 131,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "shapeName",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 132,
                  "column": 6
                },
                "end": {
                  "line": 134,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "shaper",
              "type": "Function | null | undefined",
              "description": "`shaper`  shaper function for generating a pie path ([pie](https://github.com/d3/d3-shape#pie))",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "innerRadius",
              "type": "?",
              "description": "`innerRadius` the inner radius for the pie chart. It might be calculated by setting `radiusWidth` property",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            },
            {
              "name": "pieWidth",
              "type": "string | null | undefined",
              "description": "`pieWidth` a way to indicate the width of the radius (either in % or absolute value).\nIf set, inner radius will be inferred.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 53,
                  "column": 10
                },
                "end": {
                  "line": 55,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "outerRadius",
              "type": "Function | null | undefined",
              "description": "`outerRadius` the outer radius for the pie. Computed as half the max size of the chart.\nIt can be set as a Function :\n`function(d){return 20 + Math.sqrt(d.value)}`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 10
                },
                "end": {
                  "line": 64,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "cornerRadius",
              "type": "number | null | undefined",
              "description": "`cornerRadius`corner radius for the arc as in [cornerRadius](https://github.com/d3/d3-shape#arc_cornerRadius)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 69,
                  "column": 10
                },
                "end": {
                  "line": 72,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            },
            {
              "name": "arc",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 74,
                  "column": 10
                },
                "end": {
                  "line": 77,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "sort",
              "type": "Function | null | undefined",
              "description": "`sort` as in [sort](https://github.com/d3/d3-shape#pie_sort). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 82,
                  "column": 10
                },
                "end": {
                  "line": 84,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "sortValues",
              "type": "Function | null | undefined",
              "description": "`sortValue` as in [sortValues](https://github.com/d3/d3-shape#pie_sortValues). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 89,
                  "column": 10
                },
                "end": {
                  "line": 91,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "accessor",
              "type": "Function | null | undefined",
              "description": "`accessor` function to get value from dataset (e.g. `d => +d.value.count`)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 96,
                  "column": 10
                },
                "end": {
                  "line": 98,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 67,
                  "column": 4
                },
                "end": {
                  "line": 72,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called when the element is disconnected from DOM",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 184,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 53,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 172,
                  "column": 6
                },
                "end": {
                  "line": 175,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 81,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 83,
                  "column": 4
                },
                "end": {
                  "line": 88,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "setData",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 64,
                  "column": 6
                },
                "end": {
                  "line": 73,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "redraw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 75,
                  "column": 6
                },
                "end": {
                  "line": 79,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 81,
                  "column": 6
                },
                "end": {
                  "line": 84,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "shape",
              "description": "`shape` some charts are easier to draw is data is reshaped (for instance, stack chart)",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 89,
                  "column": 6
                },
                "end": {
                  "line": 91,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "render",
              "description": "`render` the rendering logic: predraw => shape => draw => postDraw\nif drawing is not successfull, `render` function is called again in 50ms, 4 additional time.",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 97,
                  "column": 6
                },
                "end": {
                  "line": 124,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "debounceRender",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 132,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "preDraw",
              "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 137,
                  "column": 6
                },
                "end": {
                  "line": 142,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 136,
                  "column": 6
                },
                "end": {
                  "line": 187,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "postDraw",
              "description": "`postDraw` set click/tap/mouseenter/mouseleave event.",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 154,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onMultiRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 167,
                  "column": 6
                },
                "end": {
                  "line": 170,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "applyTransition",
              "description": "`applyTransition`  applies a transition to chart",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 189,
                  "column": 6
                },
                "end": {
                  "line": 192,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onEndTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 194,
                  "column": 6
                },
                "end": {
                  "line": 194,
                  "column": 26
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_log",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 39,
                  "column": 5
                },
                "end": {
                  "line": 43,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_warn",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 45,
                  "column": 5
                },
                "end": {
                  "line": 49,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_error",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 51,
                  "column": 5
                },
                "end": {
                  "line": 55,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args",
                  "rest": true
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "identity",
              "description": "helper functions",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 60,
                  "column": 7
                },
                "end": {
                  "line": 60,
                  "column": 30
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "indexAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 61,
                  "column": 7
                },
                "end": {
                  "line": 61,
                  "column": 38
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "keyAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 62,
                  "column": 7
                },
                "end": {
                  "line": 62,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "valueAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 63,
                  "column": 7
                },
                "end": {
                  "line": 63,
                  "column": 44
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "dataAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 64,
                  "column": 7
                },
                "end": {
                  "line": 64,
                  "column": 42
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "_observeForRadius",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 109,
                  "column": 6
                },
                "end": {
                  "line": 113,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "minSize"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_observePieWidth",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 115,
                  "column": 6
                },
                "end": {
                  "line": 119,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "radius"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeArc",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 121,
                  "column": 6
                },
                "end": {
                  "line": 127,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "innerRadius"
                },
                {
                  "name": "outerRadius"
                },
                {
                  "name": "cornerRadius"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [
            {
              "url": "index.html#multi-pie-demo",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 4
            },
            "end": {
              "line": 188,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "MultiChart.MultiDrawable",
          "name": "MultiChart.MultiDrawablePie",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-order",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "data",
              "description": "`data`  to draw the chart from",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "description": "`transition` a transition composer function",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "description": "`filter` a way to filter data passed to draw method",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "verbose",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "log-prefix",
              "description": "`logPrefix`",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "key",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 43,
                  "column": 11
                },
                "end": {
                  "line": 45,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "shaper",
              "description": "`shaper`  shaper function for generating a pie path ([pie](https://github.com/d3/d3-shape#pie))",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "inner-radius",
              "description": "`innerRadius` the inner radius for the pie chart. It might be calculated by setting `radiusWidth` property",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {}
            },
            {
              "name": "pie-width",
              "description": "`pieWidth` a way to indicate the width of the radius (either in % or absolute value).\nIf set, inner radius will be inferred.",
              "sourceRange": {
                "start": {
                  "line": 53,
                  "column": 10
                },
                "end": {
                  "line": 55,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "outer-radius",
              "description": "`outerRadius` the outer radius for the pie. Computed as half the max size of the chart.\nIt can be set as a Function :\n`function(d){return 20 + Math.sqrt(d.value)}`",
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 10
                },
                "end": {
                  "line": 64,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "corner-radius",
              "description": "`cornerRadius`corner radius for the arc as in [cornerRadius](https://github.com/d3/d3-shape#arc_cornerRadius)",
              "sourceRange": {
                "start": {
                  "line": 69,
                  "column": 10
                },
                "end": {
                  "line": 72,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "arc",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 74,
                  "column": 10
                },
                "end": {
                  "line": 77,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "sort",
              "description": "`sort` as in [sort](https://github.com/d3/d3-shape#pie_sort). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "sourceRange": {
                "start": {
                  "line": 82,
                  "column": 10
                },
                "end": {
                  "line": 84,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "sort-values",
              "description": "`sortValue` as in [sortValues](https://github.com/d3/d3-shape#pie_sortValues). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "sourceRange": {
                "start": {
                  "line": 89,
                  "column": 10
                },
                "end": {
                  "line": 91,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "accessor",
              "description": "`accessor` function to get value from dataset (e.g. `d => +d.value.count`)",
              "sourceRange": {
                "start": {
                  "line": 96,
                  "column": 10
                },
                "end": {
                  "line": 98,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-drawable-pie"
        },
        {
          "description": "# MultiContainerSVG\n\n`<multi-chart-base>` is a base element for buiding charts\n\n\n### Events\nFired when `multi-container-svg` is attached .",
          "summary": "",
          "path": "container/multi-container-svg.html",
          "properties": [
            {
              "name": "_registeredItems",
              "type": "Array | null | undefined",
              "description": "`_registeredItems`  the list of registered items (registerable items)",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 33,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "defaultValue": "[]",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "series",
              "type": "Array | null | undefined",
              "description": "`series` the list of data serie registered for this container.\nWe can eiher pass a serie array like [{key: 'apple', label:'apple'}, accessor: d => +d.value.apple}, {key: 'orange', label:'orange'}, accessor: d => +d.value.orange}],\n or use `<multi-serie>` component to register series via markup",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "defaultValue": "[]",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data` to display the chart",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` to apply while drawing",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 61,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "serieValueDomain",
              "type": "Object | null | undefined",
              "description": "`serieValueDomain` value domain for each serie groupName.\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "serieOrdinalDomain",
              "type": "Object | null | undefined",
              "description": "`serieOrdinalDomain` ordinal domain for series",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 75,
                  "column": 10
                },
                "end": {
                  "line": 78,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "ordinalDomainMapper",
              "type": "Function | null | undefined",
              "description": "`ordinalDomainMapper` a mapper for serie ordinal valued. By default, identity function.",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 83,
                  "column": 10
                },
                "end": {
                  "line": 85,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_multiData",
              "type": "Array | null | undefined",
              "description": "`_multiData` reshaped data to use internally within MultiChart.",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 91,
                  "column": 10
                },
                "end": {
                  "line": 93,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "zoomedEl",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 6
                },
                "end": {
                  "line": 45,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Zoomable"
            },
            {
              "name": "enableZoom",
              "type": "boolean | null | undefined",
              "description": "`enableZoom` set true to enable zoom behaviors",
              "privacy": "public",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_observeEnableZoom\"",
                  "attributeType": "Boolean"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Zoomable"
            },
            {
              "name": "margin",
              "type": "Object | null | undefined",
              "description": "`margin` applied to svg container (not css margin, wich can also be applied as per normal css rules)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 114,
                  "column": 10
                },
                "end": {
                  "line": 122,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{\"top\":10,\"right\":5,\"bottom\":10,\"left\":5}"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of the chart area. Equals actual width of component - margins",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 127,
                  "column": 10
                },
                "end": {
                  "line": 130,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height`  of the chart area. Equals actual height of component - margins",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 135,
                  "column": 10
                },
                "end": {
                  "line": 138,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 143,
                  "column": 10
                },
                "end": {
                  "line": 145,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 105,
                  "column": 6
                },
                "end": {
                  "line": 110,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_observeDataGenerators",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 112,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "getOrdinalDomain",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 159,
                  "column": 6
                },
                "end": {
                  "line": 169,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "mapper"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_callDataChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 171,
                  "column": 6
                },
                "end": {
                  "line": 175,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "splices"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_registerItem",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 177,
                  "column": 6
                },
                "end": {
                  "line": 184,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name"
                },
                {
                  "name": "item"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_onMultiRegister",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 186,
                  "column": 6
                },
                "end": {
                  "line": 199,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                },
                {
                  "name": "d"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_onMultiSerieRegister",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 201,
                  "column": 6
                },
                "end": {
                  "line": 204,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_onRefresh",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 207,
                  "column": 6
                },
                "end": {
                  "line": 210,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 178,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "unregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 217,
                  "column": 6
                },
                "end": {
                  "line": 224,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "registered"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "shallNotify",
              "description": "`shallNotify` should return true to actually render the component",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 229,
                  "column": 6
                },
                "end": {
                  "line": 231,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "callRegistered",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 233,
                  "column": 6
                },
                "end": {
                  "line": 248,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "methodName"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "_observeEnableZoom",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-mixin.html",
                "start": {
                  "line": 47,
                  "column": 6
                },
                "end": {
                  "line": 61,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "enable"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Zoomable"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 155,
                  "column": 6
                },
                "end": {
                  "line": 164,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_observeMargin",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 166,
                  "column": 6
                },
                "end": {
                  "line": 168,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 171,
                  "column": 6
                },
                "end": {
                  "line": 176,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 4
            },
            "end": {
              "line": 185,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiContainerSVG",
          "attributes": [
            {
              "name": "series",
              "description": "`series` the list of data serie registered for this container.\nWe can eiher pass a serie array like [{key: 'apple', label:'apple'}, accessor: d => +d.value.apple}, {key: 'orange', label:'orange'}, accessor: d => +d.value.orange}],\n or use `<multi-serie>` component to register series via markup",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "data",
              "description": "`data` to display the chart",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "transition",
              "description": "`transition` to apply while drawing",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 61,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "serie-value-domain",
              "description": "`serieValueDomain` value domain for each serie groupName.\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "serie-ordinal-domain",
              "description": "`serieOrdinalDomain` ordinal domain for series",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 75,
                  "column": 10
                },
                "end": {
                  "line": 78,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "ordinal-domain-mapper",
              "description": "`ordinalDomainMapper` a mapper for serie ordinal valued. By default, identity function.",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 83,
                  "column": 10
                },
                "end": {
                  "line": 85,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "enable-zoom",
              "description": "`enableZoom` set true to enable zoom behaviors",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Zoomable"
            },
            {
              "name": "margin",
              "description": "`margin` applied to svg container (not css margin, wich can also be applied as per normal css rules)",
              "sourceRange": {
                "start": {
                  "line": 114,
                  "column": 10
                },
                "end": {
                  "line": 122,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "width",
              "description": "`width`  of the chart area. Equals actual width of component - margins",
              "sourceRange": {
                "start": {
                  "line": 127,
                  "column": 10
                },
                "end": {
                  "line": 130,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "height",
              "description": "`height`  of the chart area. Equals actual height of component - margins",
              "sourceRange": {
                "start": {
                  "line": 135,
                  "column": 10
                },
                "end": {
                  "line": 138,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "start": {
                  "line": 143,
                  "column": 10
                },
                "end": {
                  "line": 145,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [
            {
              "description": "",
              "name": "header",
              "range": {
                "start": {
                  "line": 48,
                  "column": 4
                },
                "end": {
                  "line": 48,
                  "column": 31
                }
              }
            },
            {
              "description": "",
              "name": "",
              "range": {
                "start": {
                  "line": 50,
                  "column": 6
                },
                "end": {
                  "line": 50,
                  "column": 19
                }
              }
            },
            {
              "description": "",
              "name": "footer",
              "range": {
                "start": {
                  "line": 66,
                  "column": 4
                },
                "end": {
                  "line": 66,
                  "column": 31
                }
              }
            }
          ],
          "tagname": "multi-container-svg",
          "mixins": [
            "MultiChart.mixin.MultiRegister",
            "MultiChart.mixin.SVGHelper",
            "MultiChart.mixin.PolymerExtends",
            "MultiChart.mixin.Zoomable"
          ]
        },
        {
          "description": "## MultiChartPie\n\n`<multi-chart-pie>` a simple Pie chart\n\n ### Example\n ```html\n  <multi-chart-pie\n    id=\"chart\"\n    value-path=\"[[valuePath]]\"\n    inner-radius=\"[[innerRadius]]\"\n    pad-angle=\"[[padAngle]]\"\n    color-scale=\"[[colorScale]]\"\n    data=\"[[data]]\">\n    <!-- add a legend -->\n    <multi-legend scale=\"[[colorScale]]\" position=\"top-right\"></multi-legend>\n    <!-- make it selectable -->\n    <multi-selector selected=\"{{selected}}\" track-hover></multi-selector>\n    <h2 slot=\"header\">[[title]]</h2>\n    <code slot=\"footer\">selected: [[selected]]</code>\n  </multi-chart-pie>\n ```",
          "summary": "",
          "path": "chart/multi-chart-pie.html",
          "properties": [
            {
              "name": "innerRadius",
              "type": "?",
              "description": "`innerRadius` the inner radius for the pie chart. It might be calculated by setting `radiusWidth` property",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 74,
                  "column": 10
                },
                "end": {
                  "line": 76,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            },
            {
              "name": "pieWidth",
              "type": "string | null | undefined",
              "description": "`pieWidth` a way to indicate the width of the radius (either in % or absolute value).\nIf set, inner radius will be inferred.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 82,
                  "column": 10
                },
                "end": {
                  "line": 84,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "outerRadius",
              "type": "Function | null | undefined",
              "description": "`outerRadius` the outer radius for the pie. Computed as half the max size of the chart.\nIt can be set as a Function :\n`function(d){return 20 + Math.sqrt(d.value)}`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 91,
                  "column": 10
                },
                "end": {
                  "line": 93,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "cornerRadius",
              "type": "number | null | undefined",
              "description": "`cornerRadius`corner radius for the arc as in [cornerRadius](https://github.com/d3/d3-shape#arc_cornerRadius)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 98,
                  "column": 10
                },
                "end": {
                  "line": 101,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            },
            {
              "name": "sort",
              "type": "Function | null | undefined",
              "description": "`sort` as in [sort](https://github.com/d3/d3-shape#pie_sort). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 106,
                  "column": 10
                },
                "end": {
                  "line": 108,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "sortValues",
              "type": "Function | null | undefined",
              "description": "`sortValue` as in [sortValues](https://github.com/d3/d3-shape#pie_sortValues). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 113,
                  "column": 10
                },
                "end": {
                  "line": 115,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "accessor",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 117,
                  "column": 10
                },
                "end": {
                  "line": 119,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [
            {
              "url": "index.html#multi-pie-demo",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 4
            },
            "end": {
              "line": 123,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiChartPie",
          "attributes": [
            {
              "name": "inner-radius",
              "description": "`innerRadius` the inner radius for the pie chart. It might be calculated by setting `radiusWidth` property",
              "sourceRange": {
                "start": {
                  "line": 74,
                  "column": 10
                },
                "end": {
                  "line": 76,
                  "column": 11
                }
              },
              "metadata": {}
            },
            {
              "name": "pie-width",
              "description": "`pieWidth` a way to indicate the width of the radius (either in % or absolute value).\nIf set, inner radius will be inferred.",
              "sourceRange": {
                "start": {
                  "line": 82,
                  "column": 10
                },
                "end": {
                  "line": 84,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "outer-radius",
              "description": "`outerRadius` the outer radius for the pie. Computed as half the max size of the chart.\nIt can be set as a Function :\n`function(d){return 20 + Math.sqrt(d.value)}`",
              "sourceRange": {
                "start": {
                  "line": 91,
                  "column": 10
                },
                "end": {
                  "line": 93,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "corner-radius",
              "description": "`cornerRadius`corner radius for the arc as in [cornerRadius](https://github.com/d3/d3-shape#arc_cornerRadius)",
              "sourceRange": {
                "start": {
                  "line": 98,
                  "column": 10
                },
                "end": {
                  "line": 101,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "sort",
              "description": "`sort` as in [sort](https://github.com/d3/d3-shape#pie_sort). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "sourceRange": {
                "start": {
                  "line": 106,
                  "column": 10
                },
                "end": {
                  "line": 108,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "sort-values",
              "description": "`sortValue` as in [sortValues](https://github.com/d3/d3-shape#pie_sortValues). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "sourceRange": {
                "start": {
                  "line": 113,
                  "column": 10
                },
                "end": {
                  "line": 115,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "accessor",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 117,
                  "column": 10
                },
                "end": {
                  "line": 119,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [
            {
              "description": "",
              "name": "header",
              "range": {
                "start": {
                  "line": 15,
                  "column": 6
                },
                "end": {
                  "line": 15,
                  "column": 47
                }
              }
            },
            {
              "description": "",
              "name": "",
              "range": {
                "start": {
                  "line": 28,
                  "column": 6
                },
                "end": {
                  "line": 28,
                  "column": 19
                }
              }
            },
            {
              "description": "",
              "name": "footer",
              "range": {
                "start": {
                  "line": 29,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 47
                }
              }
            }
          ],
          "tagname": "multi-chart-pie"
        },
        {
          "description": "## MultiScale\n\n`<d3-scale->` d3-scale component wrapper",
          "summary": "",
          "path": "d3-scale/d3-scale.html",
          "properties": [
            {
              "name": "scaleType",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 19,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"scaleLinear\"",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "elastic",
              "type": "boolean | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domain",
              "type": "Array | null | undefined",
              "description": "`domain` domain for this scale. It will be recomputed when data changes",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 39,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "accessor",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 44,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "range",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 46,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "padding",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domainMin",
              "type": "number | null | undefined",
              "description": "`domainMin` if set, will be used as the min value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 62,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domainMax",
              "type": "number | null | undefined",
              "description": "`domainMax` if set, will be used as the max value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "_verbose",
              "type": "?",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 35,
                  "column": 5
                },
                "end": {
                  "line": 37,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "verbose",
              "type": "boolean | null | undefined",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "logPrefix",
              "type": "string | null | undefined",
              "description": "`logPrefix`",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"[multi-chart]\"",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "scale",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 39,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "readOnly": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "_effectiveDomain",
              "type": "Array | null | undefined",
              "description": "`_effectiveDomain` needed to reflect domain change to associated scale.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 44,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "pretendContinuous",
              "type": "boolean | null | undefined",
              "description": "`pretendContinuous` set true to force ordinal scale into continuous range",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "_family",
              "type": "string | null | undefined",
              "description": "`_family` inferred by scaleType.\nOne of `continuous`, `sequential`, `quantize`, `quantile`, `threshold`, `ordinal`,",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 64,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "readOnly": true,
                  "attributeType": "String"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "pauseObserver",
              "description": "`pauserObserver` call this to cancel observeConfig to run",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 19,
                  "column": 6
                },
                "end": {
                  "line": 21,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "activateObserver",
              "description": "`activateObserver` make observer functions  active again",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 26,
                  "column": 6
                },
                "end": {
                  "line": 28,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "applyConfig",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 30,
                  "column": 6
                },
                "end": {
                  "line": 36,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                },
                {
                  "name": "properties"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "observeConfig",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 38,
                  "column": 6
                },
                "end": {
                  "line": 63,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                },
                {
                  "name": "name"
                },
                {
                  "name": "targetName"
                },
                {
                  "name": "eventName"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "observeConfigSplices",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 64,
                  "column": 6
                },
                "end": {
                  "line": 78,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "splice"
                },
                {
                  "name": "name"
                },
                {
                  "name": "targetName"
                },
                {
                  "name": "eventName"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "_log",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 39,
                  "column": 5
                },
                "end": {
                  "line": 43,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_warn",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 45,
                  "column": 5
                },
                "end": {
                  "line": 49,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_error",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 51,
                  "column": 5
                },
                "end": {
                  "line": 55,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args",
                  "rest": true
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 78,
                  "column": 6
                },
                "end": {
                  "line": 89,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_observeDomainMinMax",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 91,
                  "column": 6
                },
                "end": {
                  "line": 98,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "min"
                },
                {
                  "name": "max"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeDomain",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 100,
                  "column": 6
                },
                "end": {
                  "line": 140,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "force"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeScale",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 142,
                  "column": 6
                },
                "end": {
                  "line": 149,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "type"
                }
              ]
            },
            {
              "name": "_computeEffectiveDomain",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 151,
                  "column": 6
                },
                "end": {
                  "line": 158,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "_family"
                }
              ]
            },
            {
              "name": "_computeFamily",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 160,
                  "column": 6
                },
                "end": {
                  "line": 188,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "type"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 24,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiScale",
          "attributes": [
            {
              "name": "scale-type",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 19,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "elastic",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domain",
              "description": "`domain` domain for this scale. It will be recomputed when data changes",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 39,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "accessor",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 44,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "range",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 46,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "padding",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domain-min",
              "description": "`domainMin` if set, will be used as the min value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 62,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domain-max",
              "description": "`domainMax` if set, will be used as the max value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "verbose",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "log-prefix",
              "description": "`logPrefix`",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "scale",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 39,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "pretend-continuous",
              "description": "`pretendContinuous` set true to force ordinal scale into continuous range",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "scale-changed",
              "description": "Fired when the `scale` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-scale",
          "mixins": [
            "MultiChart.mixin.Registerable",
            "MultiChart.mixin.ConfigHelper",
            "MultiChart.mixin.D3ScaleProperty",
            "MultiChart.mixin.Logger"
          ]
        },
        {
          "description": "## D3Axis\n\n`<d3-axis>` a wrapper for d3-axis",
          "summary": "",
          "path": "d3-axis/d3-axis.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerOrder",
              "type": "number | null | undefined",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "drawableData",
              "type": "?",
              "description": " \n`getDrawable` allows to specify which data to use for generating the chart.\nThis is usefull for multi-geo where chart is generated by topojson feature and not by raw data.\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "shallTransition",
              "type": "?",
              "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 162,
                  "column": 6
                },
                "end": {
                  "line": 165,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data`  to draw the chart from",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` a transition composer function",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` a way to filter data passed to draw method",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_verbose",
              "type": "?",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 35,
                  "column": 5
                },
                "end": {
                  "line": 37,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "verbose",
              "type": "boolean | null | undefined",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "logPrefix",
              "type": "string | null | undefined",
              "description": "`logPrefix`",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"[multi-chart]\"",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "targetElement",
              "type": "?",
              "description": "`targetElement` getter override lifecycle Behavior and called during attached\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 53,
                  "column": 6
                },
                "end": {
                  "line": 55,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 43,
                  "column": 11
                },
                "end": {
                  "line": 45,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "type": "Function | null | undefined",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 79,
                  "column": 10
                },
                "end": {
                  "line": 82,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "scale",
              "type": "Function | null | undefined",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 88,
                  "column": 10
                },
                "end": {
                  "line": 90,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "range",
              "type": "Array | null | undefined",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 97,
                  "column": 10
                },
                "end": {
                  "line": 100,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "_x",
              "type": "number | null | undefined",
              "description": "`_x` x translation for the axis. is set depending on position and height",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 105,
                  "column": 10
                },
                "end": {
                  "line": 108,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            },
            {
              "name": "_y",
              "type": "number | null | undefined",
              "description": "`_y` y translation for the axis. is set depending on position and width",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 113,
                  "column": 10
                },
                "end": {
                  "line": 116,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            },
            {
              "name": "text",
              "type": "string | null | undefined",
              "description": "`text` text for the axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 121,
                  "column": 10
                },
                "end": {
                  "line": 124,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "xText",
              "type": "number | null | undefined",
              "description": "`xText` value to be set to the axisText x attribute",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 129,
                  "column": 10
                },
                "end": {
                  "line": 132,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "yText",
              "type": "number | null | undefined",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 137,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            },
            {
              "name": "dx",
              "type": "string | null | undefined",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 146,
                  "column": 10
                },
                "end": {
                  "line": 149,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "dy",
              "type": "string | null | undefined",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 154,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "textAngle",
              "type": "number | null | undefined",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 162,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            },
            {
              "name": "ticks",
              "type": "Array | null | undefined",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 175,
                  "column": 10
                },
                "end": {
                  "line": 178,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "tickFormat",
              "type": "string | null | undefined",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 185,
                  "column": 11
                },
                "end": {
                  "line": 188,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "position",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 190,
                  "column": 10
                },
                "end": {
                  "line": 195,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "TODO(cg): Review if this is usefull ?.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 207,
                  "column": 6
                },
                "end": {
                  "line": 210,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called when the element is disconnected from DOM",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 184,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 53,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 172,
                  "column": 6
                },
                "end": {
                  "line": 175,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 81,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 83,
                  "column": 4
                },
                "end": {
                  "line": 88,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "setData",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 64,
                  "column": 6
                },
                "end": {
                  "line": 73,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "redraw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 75,
                  "column": 6
                },
                "end": {
                  "line": 79,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 81,
                  "column": 6
                },
                "end": {
                  "line": 84,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "shape",
              "description": "`shape` some charts are easier to draw is data is reshaped (for instance, stack chart)",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 89,
                  "column": 6
                },
                "end": {
                  "line": 91,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "render",
              "description": "`render` the rendering logic: predraw => shape => draw => postDraw\nif drawing is not successfull, `render` function is called again in 50ms, 4 additional time.",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 97,
                  "column": 6
                },
                "end": {
                  "line": 124,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "debounceRender",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 132,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "preDraw",
              "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 137,
                  "column": 6
                },
                "end": {
                  "line": 142,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 238,
                  "column": 6
                },
                "end": {
                  "line": 247,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "postDraw",
              "description": "`postDraw` set click/tap/mouseenter/mouseleave event.",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 154,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onMultiRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 167,
                  "column": 6
                },
                "end": {
                  "line": 170,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "applyTransition",
              "description": "`applyTransition`  applies a transition to chart",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 189,
                  "column": 6
                },
                "end": {
                  "line": 192,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onEndTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 194,
                  "column": 6
                },
                "end": {
                  "line": 194,
                  "column": 26
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_log",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 39,
                  "column": 5
                },
                "end": {
                  "line": 43,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_warn",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 45,
                  "column": 5
                },
                "end": {
                  "line": 49,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_error",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 51,
                  "column": 5
                },
                "end": {
                  "line": 55,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args",
                  "rest": true
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "identity",
              "description": "helper functions",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 60,
                  "column": 7
                },
                "end": {
                  "line": 60,
                  "column": 30
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "indexAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 61,
                  "column": 7
                },
                "end": {
                  "line": 61,
                  "column": 38
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "keyAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 62,
                  "column": 7
                },
                "end": {
                  "line": 62,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "valueAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 63,
                  "column": 7
                },
                "end": {
                  "line": 63,
                  "column": 44
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "dataAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 64,
                  "column": 7
                },
                "end": {
                  "line": 64,
                  "column": 42
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "computeAxis",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 212,
                  "column": 6
                },
                "end": {
                  "line": 214,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "observeTicks",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 216,
                  "column": 6
                },
                "end": {
                  "line": 225,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "ticks"
                }
              ]
            },
            {
              "name": "observeTickFormat",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 227,
                  "column": 6
                },
                "end": {
                  "line": 236,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "format"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 6
            },
            "end": {
              "line": 249,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "MultiChart.MultiDrawable",
          "name": "MultiChart.D3Axis",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-order",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "data",
              "description": "`data`  to draw the chart from",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "description": "`transition` a transition composer function",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "description": "`filter` a way to filter data passed to draw method",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "verbose",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "log-prefix",
              "description": "`logPrefix`",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "key",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 43,
                  "column": 11
                },
                "end": {
                  "line": 45,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "sourceRange": {
                "start": {
                  "line": 79,
                  "column": 10
                },
                "end": {
                  "line": 82,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "scale",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "sourceRange": {
                "start": {
                  "line": 88,
                  "column": 10
                },
                "end": {
                  "line": 90,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "range",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "sourceRange": {
                "start": {
                  "line": 97,
                  "column": 10
                },
                "end": {
                  "line": 100,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "text",
              "description": "`text` text for the axis",
              "sourceRange": {
                "start": {
                  "line": 121,
                  "column": 10
                },
                "end": {
                  "line": 124,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "x-text",
              "description": "`xText` value to be set to the axisText x attribute",
              "sourceRange": {
                "start": {
                  "line": 129,
                  "column": 10
                },
                "end": {
                  "line": 132,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "y-text",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "sourceRange": {
                "start": {
                  "line": 137,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "dx",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "sourceRange": {
                "start": {
                  "line": 146,
                  "column": 10
                },
                "end": {
                  "line": 149,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "dy",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "sourceRange": {
                "start": {
                  "line": 154,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "text-angle",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "sourceRange": {
                "start": {
                  "line": 162,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "ticks",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "sourceRange": {
                "start": {
                  "line": 175,
                  "column": 10
                },
                "end": {
                  "line": 178,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "tick-format",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "sourceRange": {
                "start": {
                  "line": 185,
                  "column": 11
                },
                "end": {
                  "line": 188,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "position",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 190,
                  "column": 10
                },
                "end": {
                  "line": 195,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "range-changed",
              "description": "Fired when the `range` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-axis"
        },
        {
          "description": "## D3TopAxis\n\n`<d3-axis-top>` a drawable top axis",
          "summary": "",
          "path": "d3-axis/d3-axis-top.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerOrder",
              "type": "number | null | undefined",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "drawableData",
              "type": "?",
              "description": " \n`getDrawable` allows to specify which data to use for generating the chart.\nThis is usefull for multi-geo where chart is generated by topojson feature and not by raw data.\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "shallTransition",
              "type": "?",
              "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 162,
                  "column": 6
                },
                "end": {
                  "line": 165,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data`  to draw the chart from",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` a transition composer function",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` a way to filter data passed to draw method",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_verbose",
              "type": "?",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 35,
                  "column": 5
                },
                "end": {
                  "line": 37,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "verbose",
              "type": "boolean | null | undefined",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "logPrefix",
              "type": "string | null | undefined",
              "description": "`logPrefix`",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"[multi-chart]\"",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "targetElement",
              "type": "?",
              "description": "`targetElement` getter override lifecycle Behavior and called during attached\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 53,
                  "column": 6
                },
                "end": {
                  "line": 55,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 43,
                  "column": 11
                },
                "end": {
                  "line": 45,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "type": "Function | null | undefined",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 79,
                  "column": 10
                },
                "end": {
                  "line": 82,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "scale",
              "type": "Function | null | undefined",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 88,
                  "column": 10
                },
                "end": {
                  "line": 90,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "range",
              "type": "Array | null | undefined",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 97,
                  "column": 10
                },
                "end": {
                  "line": 100,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "_x",
              "type": "number | null | undefined",
              "description": "`_x` x translation for the axis. is set depending on position and height",
              "privacy": "protected",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 105,
                  "column": 10
                },
                "end": {
                  "line": 108,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "_y",
              "type": "number | null | undefined",
              "description": "`_y` y translation for the axis. is set depending on position and width",
              "privacy": "protected",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 113,
                  "column": 10
                },
                "end": {
                  "line": 116,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text",
              "type": "string | null | undefined",
              "description": "`text` text for the axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 121,
                  "column": 10
                },
                "end": {
                  "line": 124,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "xText",
              "type": "number | null | undefined",
              "description": "`xText` value to be set to the axisText x attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 129,
                  "column": 10
                },
                "end": {
                  "line": 132,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "yText",
              "type": "number | null | undefined",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 137,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dx",
              "type": "string | null | undefined",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 146,
                  "column": 10
                },
                "end": {
                  "line": 149,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dy",
              "type": "string | null | undefined",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 154,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "textAngle",
              "type": "number | null | undefined",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 162,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "ticks",
              "type": "Array | null | undefined",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 175,
                  "column": 10
                },
                "end": {
                  "line": 178,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "tickFormat",
              "type": "string | null | undefined",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 185,
                  "column": 11
                },
                "end": {
                  "line": 188,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "position",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 190,
                  "column": 10
                },
                "end": {
                  "line": 195,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "TODO(cg): Review if this is usefull ?.",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 207,
                  "column": 6
                },
                "end": {
                  "line": 210,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called when the element is disconnected from DOM",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 184,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 53,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 28,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 81,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 83,
                  "column": 4
                },
                "end": {
                  "line": 88,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "setData",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 64,
                  "column": 6
                },
                "end": {
                  "line": 73,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "redraw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 75,
                  "column": 6
                },
                "end": {
                  "line": 79,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 81,
                  "column": 6
                },
                "end": {
                  "line": 84,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "shape",
              "description": "`shape` some charts are easier to draw is data is reshaped (for instance, stack chart)",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 89,
                  "column": 6
                },
                "end": {
                  "line": 91,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "render",
              "description": "`render` the rendering logic: predraw => shape => draw => postDraw\nif drawing is not successfull, `render` function is called again in 50ms, 4 additional time.",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 97,
                  "column": 6
                },
                "end": {
                  "line": 124,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "debounceRender",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 132,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "preDraw",
              "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 137,
                  "column": 6
                },
                "end": {
                  "line": 142,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 238,
                  "column": 6
                },
                "end": {
                  "line": 247,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "postDraw",
              "description": "`postDraw` set click/tap/mouseenter/mouseleave event.",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 154,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onMultiRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 167,
                  "column": 6
                },
                "end": {
                  "line": 170,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "applyTransition",
              "description": "`applyTransition`  applies a transition to chart",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 189,
                  "column": 6
                },
                "end": {
                  "line": 192,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onEndTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 194,
                  "column": 6
                },
                "end": {
                  "line": 194,
                  "column": 26
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_log",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 39,
                  "column": 5
                },
                "end": {
                  "line": 43,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_warn",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 45,
                  "column": 5
                },
                "end": {
                  "line": 49,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_error",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 51,
                  "column": 5
                },
                "end": {
                  "line": 55,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args",
                  "rest": true
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "identity",
              "description": "helper functions",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 60,
                  "column": 7
                },
                "end": {
                  "line": 60,
                  "column": 30
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "indexAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 61,
                  "column": 7
                },
                "end": {
                  "line": 61,
                  "column": 38
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "keyAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 62,
                  "column": 7
                },
                "end": {
                  "line": 62,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "valueAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 63,
                  "column": 7
                },
                "end": {
                  "line": 63,
                  "column": 44
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "dataAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 64,
                  "column": 7
                },
                "end": {
                  "line": 64,
                  "column": 42
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "computeAxis",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 6
                },
                "end": {
                  "line": 26,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "scale"
                }
              ]
            },
            {
              "name": "observeTicks",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 216,
                  "column": 6
                },
                "end": {
                  "line": 225,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "ticks"
                }
              ],
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "observeTickFormat",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 227,
                  "column": 6
                },
                "end": {
                  "line": 236,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "format"
                }
              ],
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 35,
              "column": 3
            }
          },
          "privacy": "public",
          "superclass": "MultiChart.D3Axis",
          "name": "MultiChart.D3TopAxis",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-order",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "data",
              "description": "`data`  to draw the chart from",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "description": "`transition` a transition composer function",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "description": "`filter` a way to filter data passed to draw method",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "verbose",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "log-prefix",
              "description": "`logPrefix`",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "key",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 43,
                  "column": 11
                },
                "end": {
                  "line": 45,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 79,
                  "column": 10
                },
                "end": {
                  "line": 82,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "scale",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 88,
                  "column": 10
                },
                "end": {
                  "line": 90,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "range",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 97,
                  "column": 10
                },
                "end": {
                  "line": 100,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text",
              "description": "`text` text for the axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 121,
                  "column": 10
                },
                "end": {
                  "line": 124,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "x-text",
              "description": "`xText` value to be set to the axisText x attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 129,
                  "column": 10
                },
                "end": {
                  "line": 132,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "y-text",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 137,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dx",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 146,
                  "column": 10
                },
                "end": {
                  "line": 149,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dy",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 154,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text-angle",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 162,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "ticks",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 175,
                  "column": 10
                },
                "end": {
                  "line": 178,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "tick-format",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 185,
                  "column": 11
                },
                "end": {
                  "line": 188,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "position",
              "description": "",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 190,
                  "column": 10
                },
                "end": {
                  "line": 195,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "range-changed",
              "description": "Fired when the `range` property changes.",
              "metadata": {},
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-axis-top"
        },
        {
          "description": "## D3RightAxis\n\n`<d3-axis-right>` a drawable right axis",
          "summary": "",
          "path": "d3-axis/d3-axis-right.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerOrder",
              "type": "number | null | undefined",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "drawableData",
              "type": "?",
              "description": " \n`getDrawable` allows to specify which data to use for generating the chart.\nThis is usefull for multi-geo where chart is generated by topojson feature and not by raw data.\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "shallTransition",
              "type": "?",
              "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 162,
                  "column": 6
                },
                "end": {
                  "line": 165,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data`  to draw the chart from",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` a transition composer function",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` a way to filter data passed to draw method",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_verbose",
              "type": "?",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 35,
                  "column": 5
                },
                "end": {
                  "line": 37,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "verbose",
              "type": "boolean | null | undefined",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "logPrefix",
              "type": "string | null | undefined",
              "description": "`logPrefix`",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"[multi-chart]\"",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "targetElement",
              "type": "?",
              "description": "`targetElement` getter override lifecycle Behavior and called during attached\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 53,
                  "column": 6
                },
                "end": {
                  "line": 55,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 43,
                  "column": 11
                },
                "end": {
                  "line": 45,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "type": "Function | null | undefined",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 79,
                  "column": 10
                },
                "end": {
                  "line": 82,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "scale",
              "type": "Function | null | undefined",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 88,
                  "column": 10
                },
                "end": {
                  "line": 90,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "range",
              "type": "Array | null | undefined",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 97,
                  "column": 10
                },
                "end": {
                  "line": 100,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "_x",
              "type": "number | null | undefined",
              "description": "`_x` x translation for the axis. is set depending on position and height",
              "privacy": "protected",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 105,
                  "column": 10
                },
                "end": {
                  "line": 108,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "_y",
              "type": "number | null | undefined",
              "description": "`_y` y translation for the axis. is set depending on position and width",
              "privacy": "protected",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 113,
                  "column": 10
                },
                "end": {
                  "line": 116,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text",
              "type": "string | null | undefined",
              "description": "`text` text for the axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 121,
                  "column": 10
                },
                "end": {
                  "line": 124,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "xText",
              "type": "number | null | undefined",
              "description": "`xText` value to be set to the axisText x attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 129,
                  "column": 10
                },
                "end": {
                  "line": 132,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "yText",
              "type": "number | null | undefined",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 137,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dx",
              "type": "string | null | undefined",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 146,
                  "column": 10
                },
                "end": {
                  "line": 149,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dy",
              "type": "string | null | undefined",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 154,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "textAngle",
              "type": "number | null | undefined",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 162,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "ticks",
              "type": "Array | null | undefined",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 175,
                  "column": 10
                },
                "end": {
                  "line": 178,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "tickFormat",
              "type": "string | null | undefined",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 185,
                  "column": 11
                },
                "end": {
                  "line": 188,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "position",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 190,
                  "column": 10
                },
                "end": {
                  "line": 195,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "TODO(cg): Review if this is usefull ?.",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 207,
                  "column": 6
                },
                "end": {
                  "line": 210,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called when the element is disconnected from DOM",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 184,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 53,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 28,
                  "column": 6
                },
                "end": {
                  "line": 33,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 81,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 83,
                  "column": 4
                },
                "end": {
                  "line": 88,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "setData",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 64,
                  "column": 6
                },
                "end": {
                  "line": 73,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "redraw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 75,
                  "column": 6
                },
                "end": {
                  "line": 79,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 81,
                  "column": 6
                },
                "end": {
                  "line": 84,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "shape",
              "description": "`shape` some charts are easier to draw is data is reshaped (for instance, stack chart)",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 89,
                  "column": 6
                },
                "end": {
                  "line": 91,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "render",
              "description": "`render` the rendering logic: predraw => shape => draw => postDraw\nif drawing is not successfull, `render` function is called again in 50ms, 4 additional time.",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 97,
                  "column": 6
                },
                "end": {
                  "line": 124,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "debounceRender",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 132,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "preDraw",
              "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 137,
                  "column": 6
                },
                "end": {
                  "line": 142,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 238,
                  "column": 6
                },
                "end": {
                  "line": 247,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "postDraw",
              "description": "`postDraw` set click/tap/mouseenter/mouseleave event.",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 154,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onMultiRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 167,
                  "column": 6
                },
                "end": {
                  "line": 170,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "applyTransition",
              "description": "`applyTransition`  applies a transition to chart",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 189,
                  "column": 6
                },
                "end": {
                  "line": 192,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onEndTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 194,
                  "column": 6
                },
                "end": {
                  "line": 194,
                  "column": 26
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_log",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 39,
                  "column": 5
                },
                "end": {
                  "line": 43,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_warn",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 45,
                  "column": 5
                },
                "end": {
                  "line": 49,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_error",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 51,
                  "column": 5
                },
                "end": {
                  "line": 55,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args",
                  "rest": true
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "identity",
              "description": "helper functions",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 60,
                  "column": 7
                },
                "end": {
                  "line": 60,
                  "column": 30
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "indexAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 61,
                  "column": 7
                },
                "end": {
                  "line": 61,
                  "column": 38
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "keyAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 62,
                  "column": 7
                },
                "end": {
                  "line": 62,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "valueAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 63,
                  "column": 7
                },
                "end": {
                  "line": 63,
                  "column": 44
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "dataAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 64,
                  "column": 7
                },
                "end": {
                  "line": 64,
                  "column": 42
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "computeAxis",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 6
                },
                "end": {
                  "line": 26,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "scale"
                }
              ]
            },
            {
              "name": "observeTicks",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 216,
                  "column": 6
                },
                "end": {
                  "line": 225,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "ticks"
                }
              ],
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "observeTickFormat",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 227,
                  "column": 6
                },
                "end": {
                  "line": 236,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "format"
                }
              ],
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 34,
              "column": 3
            }
          },
          "privacy": "public",
          "superclass": "MultiChart.D3Axis",
          "name": "MultiChart.D3RightAxis",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-order",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "data",
              "description": "`data`  to draw the chart from",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "description": "`transition` a transition composer function",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "description": "`filter` a way to filter data passed to draw method",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "verbose",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "log-prefix",
              "description": "`logPrefix`",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "key",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 43,
                  "column": 11
                },
                "end": {
                  "line": 45,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 79,
                  "column": 10
                },
                "end": {
                  "line": 82,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "scale",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 88,
                  "column": 10
                },
                "end": {
                  "line": 90,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "range",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 97,
                  "column": 10
                },
                "end": {
                  "line": 100,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text",
              "description": "`text` text for the axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 121,
                  "column": 10
                },
                "end": {
                  "line": 124,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "x-text",
              "description": "`xText` value to be set to the axisText x attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 129,
                  "column": 10
                },
                "end": {
                  "line": 132,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "y-text",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 137,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dx",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 146,
                  "column": 10
                },
                "end": {
                  "line": 149,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dy",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 154,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text-angle",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 162,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "ticks",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 175,
                  "column": 10
                },
                "end": {
                  "line": 178,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "tick-format",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 185,
                  "column": 11
                },
                "end": {
                  "line": 188,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "position",
              "description": "",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 190,
                  "column": 10
                },
                "end": {
                  "line": 195,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "range-changed",
              "description": "Fired when the `range` property changes.",
              "metadata": {},
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-axis-right"
        },
        {
          "description": "## D3LeftAxis\n\n`<d3-axis-left>` a drawable left axis",
          "summary": "",
          "path": "d3-axis/d3-axis-left.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerOrder",
              "type": "number | null | undefined",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "drawableData",
              "type": "?",
              "description": " \n`getDrawable` allows to specify which data to use for generating the chart.\nThis is usefull for multi-geo where chart is generated by topojson feature and not by raw data.\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "shallTransition",
              "type": "?",
              "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 162,
                  "column": 6
                },
                "end": {
                  "line": 165,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data`  to draw the chart from",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` a transition composer function",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` a way to filter data passed to draw method",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_verbose",
              "type": "?",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 35,
                  "column": 5
                },
                "end": {
                  "line": 37,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "verbose",
              "type": "boolean | null | undefined",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "logPrefix",
              "type": "string | null | undefined",
              "description": "`logPrefix`",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"[multi-chart]\"",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "targetElement",
              "type": "?",
              "description": "`targetElement` getter override lifecycle Behavior and called during attached\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 53,
                  "column": 6
                },
                "end": {
                  "line": 55,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 43,
                  "column": 11
                },
                "end": {
                  "line": 45,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "type": "Function | null | undefined",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 79,
                  "column": 10
                },
                "end": {
                  "line": 82,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "scale",
              "type": "Function | null | undefined",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 88,
                  "column": 10
                },
                "end": {
                  "line": 90,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "range",
              "type": "Array | null | undefined",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 97,
                  "column": 10
                },
                "end": {
                  "line": 100,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "_x",
              "type": "number | null | undefined",
              "description": "`_x` x translation for the axis. is set depending on position and height",
              "privacy": "protected",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 105,
                  "column": 10
                },
                "end": {
                  "line": 108,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "_y",
              "type": "number | null | undefined",
              "description": "`_y` y translation for the axis. is set depending on position and width",
              "privacy": "protected",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 113,
                  "column": 10
                },
                "end": {
                  "line": 116,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text",
              "type": "string | null | undefined",
              "description": "`text` text for the axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 121,
                  "column": 10
                },
                "end": {
                  "line": 124,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "xText",
              "type": "number | null | undefined",
              "description": "`xText` value to be set to the axisText x attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 129,
                  "column": 10
                },
                "end": {
                  "line": 132,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "yText",
              "type": "number | null | undefined",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 137,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dx",
              "type": "string | null | undefined",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 146,
                  "column": 10
                },
                "end": {
                  "line": 149,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dy",
              "type": "string | null | undefined",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 154,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "textAngle",
              "type": "number | null | undefined",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 162,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "ticks",
              "type": "Array | null | undefined",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 175,
                  "column": 10
                },
                "end": {
                  "line": 178,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "tickFormat",
              "type": "string | null | undefined",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 185,
                  "column": 11
                },
                "end": {
                  "line": 188,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "position",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 190,
                  "column": 10
                },
                "end": {
                  "line": 195,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "TODO(cg): Review if this is usefull ?.",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 207,
                  "column": 6
                },
                "end": {
                  "line": 210,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called when the element is disconnected from DOM",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 184,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 53,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 28,
                  "column": 6
                },
                "end": {
                  "line": 33,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 81,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 83,
                  "column": 4
                },
                "end": {
                  "line": 88,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "setData",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 64,
                  "column": 6
                },
                "end": {
                  "line": 73,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "redraw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 75,
                  "column": 6
                },
                "end": {
                  "line": 79,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 81,
                  "column": 6
                },
                "end": {
                  "line": 84,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "shape",
              "description": "`shape` some charts are easier to draw is data is reshaped (for instance, stack chart)",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 89,
                  "column": 6
                },
                "end": {
                  "line": 91,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "render",
              "description": "`render` the rendering logic: predraw => shape => draw => postDraw\nif drawing is not successfull, `render` function is called again in 50ms, 4 additional time.",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 97,
                  "column": 6
                },
                "end": {
                  "line": 124,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "debounceRender",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 132,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "preDraw",
              "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 137,
                  "column": 6
                },
                "end": {
                  "line": 142,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 238,
                  "column": 6
                },
                "end": {
                  "line": 247,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "postDraw",
              "description": "`postDraw` set click/tap/mouseenter/mouseleave event.",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 154,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onMultiRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 167,
                  "column": 6
                },
                "end": {
                  "line": 170,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "applyTransition",
              "description": "`applyTransition`  applies a transition to chart",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 189,
                  "column": 6
                },
                "end": {
                  "line": 192,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onEndTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 194,
                  "column": 6
                },
                "end": {
                  "line": 194,
                  "column": 26
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_log",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 39,
                  "column": 5
                },
                "end": {
                  "line": 43,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_warn",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 45,
                  "column": 5
                },
                "end": {
                  "line": 49,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_error",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 51,
                  "column": 5
                },
                "end": {
                  "line": 55,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args",
                  "rest": true
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "identity",
              "description": "helper functions",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 60,
                  "column": 7
                },
                "end": {
                  "line": 60,
                  "column": 30
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "indexAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 61,
                  "column": 7
                },
                "end": {
                  "line": 61,
                  "column": 38
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "keyAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 62,
                  "column": 7
                },
                "end": {
                  "line": 62,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "valueAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 63,
                  "column": 7
                },
                "end": {
                  "line": 63,
                  "column": 44
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "dataAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 64,
                  "column": 7
                },
                "end": {
                  "line": 64,
                  "column": 42
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "computeAxis",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 6
                },
                "end": {
                  "line": 26,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "scale"
                }
              ]
            },
            {
              "name": "observeTicks",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 216,
                  "column": 6
                },
                "end": {
                  "line": 225,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "ticks"
                }
              ],
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "observeTickFormat",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 227,
                  "column": 6
                },
                "end": {
                  "line": 236,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "format"
                }
              ],
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 34,
              "column": 3
            }
          },
          "privacy": "public",
          "superclass": "MultiChart.D3Axis",
          "name": "MultiChart.D3LeftAxis",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-order",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "data",
              "description": "`data`  to draw the chart from",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "description": "`transition` a transition composer function",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "description": "`filter` a way to filter data passed to draw method",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "verbose",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "log-prefix",
              "description": "`logPrefix`",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "key",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 43,
                  "column": 11
                },
                "end": {
                  "line": 45,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 79,
                  "column": 10
                },
                "end": {
                  "line": 82,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "scale",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 88,
                  "column": 10
                },
                "end": {
                  "line": 90,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "range",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 97,
                  "column": 10
                },
                "end": {
                  "line": 100,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text",
              "description": "`text` text for the axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 121,
                  "column": 10
                },
                "end": {
                  "line": 124,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "x-text",
              "description": "`xText` value to be set to the axisText x attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 129,
                  "column": 10
                },
                "end": {
                  "line": 132,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "y-text",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 137,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dx",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 146,
                  "column": 10
                },
                "end": {
                  "line": 149,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dy",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 154,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text-angle",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 162,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "ticks",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 175,
                  "column": 10
                },
                "end": {
                  "line": 178,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "tick-format",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 185,
                  "column": 11
                },
                "end": {
                  "line": 188,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "position",
              "description": "",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 190,
                  "column": 10
                },
                "end": {
                  "line": 195,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "range-changed",
              "description": "Fired when the `range` property changes.",
              "metadata": {},
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-axis-left"
        },
        {
          "description": "## D3BottomAxis\n\n`<d3-axis-bottom>` a drawable bottom axis",
          "summary": "",
          "path": "d3-axis/d3-axis-bottom.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerOrder",
              "type": "number | null | undefined",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "drawableData",
              "type": "?",
              "description": " \n`getDrawable` allows to specify which data to use for generating the chart.\nThis is usefull for multi-geo where chart is generated by topojson feature and not by raw data.\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "shallTransition",
              "type": "?",
              "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 162,
                  "column": 6
                },
                "end": {
                  "line": 165,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data`  to draw the chart from",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` a transition composer function",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` a way to filter data passed to draw method",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_verbose",
              "type": "?",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 35,
                  "column": 5
                },
                "end": {
                  "line": 37,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "verbose",
              "type": "boolean | null | undefined",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "logPrefix",
              "type": "string | null | undefined",
              "description": "`logPrefix`",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"[multi-chart]\"",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "targetElement",
              "type": "?",
              "description": "`targetElement` getter override lifecycle Behavior and called during attached\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 53,
                  "column": 6
                },
                "end": {
                  "line": 55,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 43,
                  "column": 11
                },
                "end": {
                  "line": 45,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "type": "Function | null | undefined",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 79,
                  "column": 10
                },
                "end": {
                  "line": 82,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "scale",
              "type": "Function | null | undefined",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 88,
                  "column": 10
                },
                "end": {
                  "line": 90,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "range",
              "type": "Array | null | undefined",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 97,
                  "column": 10
                },
                "end": {
                  "line": 100,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "_x",
              "type": "number | null | undefined",
              "description": "`_x` x translation for the axis. is set depending on position and height",
              "privacy": "protected",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 105,
                  "column": 10
                },
                "end": {
                  "line": 108,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "_y",
              "type": "number | null | undefined",
              "description": "`_y` y translation for the axis. is set depending on position and width",
              "privacy": "protected",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 113,
                  "column": 10
                },
                "end": {
                  "line": 116,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text",
              "type": "string | null | undefined",
              "description": "`text` text for the axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 121,
                  "column": 10
                },
                "end": {
                  "line": 124,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "xText",
              "type": "number | null | undefined",
              "description": "`xText` value to be set to the axisText x attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 129,
                  "column": 10
                },
                "end": {
                  "line": 132,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "yText",
              "type": "number | null | undefined",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 137,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dx",
              "type": "string | null | undefined",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 146,
                  "column": 10
                },
                "end": {
                  "line": 149,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dy",
              "type": "string | null | undefined",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 154,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "textAngle",
              "type": "number | null | undefined",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 162,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "ticks",
              "type": "Array | null | undefined",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 175,
                  "column": 10
                },
                "end": {
                  "line": 178,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "tickFormat",
              "type": "string | null | undefined",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 185,
                  "column": 11
                },
                "end": {
                  "line": 188,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "position",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 190,
                  "column": 10
                },
                "end": {
                  "line": 195,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "TODO(cg): Review if this is usefull ?.",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 207,
                  "column": 6
                },
                "end": {
                  "line": 210,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called when the element is disconnected from DOM",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 184,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 53,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 28,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 81,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 83,
                  "column": 4
                },
                "end": {
                  "line": 88,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "setData",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 64,
                  "column": 6
                },
                "end": {
                  "line": 73,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "redraw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 75,
                  "column": 6
                },
                "end": {
                  "line": 79,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 81,
                  "column": 6
                },
                "end": {
                  "line": 84,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "shape",
              "description": "`shape` some charts are easier to draw is data is reshaped (for instance, stack chart)",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 89,
                  "column": 6
                },
                "end": {
                  "line": 91,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "render",
              "description": "`render` the rendering logic: predraw => shape => draw => postDraw\nif drawing is not successfull, `render` function is called again in 50ms, 4 additional time.",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 97,
                  "column": 6
                },
                "end": {
                  "line": 124,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "debounceRender",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 132,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "preDraw",
              "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 137,
                  "column": 6
                },
                "end": {
                  "line": 142,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 238,
                  "column": 6
                },
                "end": {
                  "line": 247,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "postDraw",
              "description": "`postDraw` set click/tap/mouseenter/mouseleave event.",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 154,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onMultiRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 167,
                  "column": 6
                },
                "end": {
                  "line": 170,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "applyTransition",
              "description": "`applyTransition`  applies a transition to chart",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 189,
                  "column": 6
                },
                "end": {
                  "line": 192,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onEndTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 194,
                  "column": 6
                },
                "end": {
                  "line": 194,
                  "column": 26
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_log",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 39,
                  "column": 5
                },
                "end": {
                  "line": 43,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_warn",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 45,
                  "column": 5
                },
                "end": {
                  "line": 49,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_error",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 51,
                  "column": 5
                },
                "end": {
                  "line": 55,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args",
                  "rest": true
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "identity",
              "description": "helper functions",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 60,
                  "column": 7
                },
                "end": {
                  "line": 60,
                  "column": 30
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "indexAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 61,
                  "column": 7
                },
                "end": {
                  "line": 61,
                  "column": 38
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "keyAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 62,
                  "column": 7
                },
                "end": {
                  "line": 62,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "valueAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 63,
                  "column": 7
                },
                "end": {
                  "line": 63,
                  "column": 44
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "dataAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 64,
                  "column": 7
                },
                "end": {
                  "line": 64,
                  "column": 42
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "computeAxis",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 6
                },
                "end": {
                  "line": 26,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "scale"
                }
              ]
            },
            {
              "name": "observeTicks",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 216,
                  "column": 6
                },
                "end": {
                  "line": 225,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "ticks"
                }
              ],
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "observeTickFormat",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 227,
                  "column": 6
                },
                "end": {
                  "line": 236,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "format"
                }
              ],
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 35,
              "column": 3
            }
          },
          "privacy": "public",
          "superclass": "MultiChart.D3Axis",
          "name": "MultiChart.D3BottomAxis",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-order",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "data",
              "description": "`data`  to draw the chart from",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "description": "`transition` a transition composer function",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "description": "`filter` a way to filter data passed to draw method",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "verbose",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "log-prefix",
              "description": "`logPrefix`",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "key",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 43,
                  "column": 11
                },
                "end": {
                  "line": 45,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 79,
                  "column": 10
                },
                "end": {
                  "line": 82,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "scale",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 88,
                  "column": 10
                },
                "end": {
                  "line": 90,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "range",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 97,
                  "column": 10
                },
                "end": {
                  "line": 100,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text",
              "description": "`text` text for the axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 121,
                  "column": 10
                },
                "end": {
                  "line": 124,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "x-text",
              "description": "`xText` value to be set to the axisText x attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 129,
                  "column": 10
                },
                "end": {
                  "line": 132,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "y-text",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 137,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dx",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 146,
                  "column": 10
                },
                "end": {
                  "line": 149,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dy",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 154,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text-angle",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 162,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "ticks",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 175,
                  "column": 10
                },
                "end": {
                  "line": 178,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "tick-format",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 185,
                  "column": 11
                },
                "end": {
                  "line": 188,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "position",
              "description": "",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 190,
                  "column": 10
                },
                "end": {
                  "line": 195,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "range-changed",
              "description": "Fired when the `range` property changes.",
              "metadata": {},
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-axis-bottom"
        },
        {
          "description": "## MultiScale\n\n`<multi-scale>` compute a scale that can be passed on to an axis",
          "summary": "",
          "path": "d3-scale/multi-scale.html",
          "properties": [
            {
              "name": "scaleType",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 19,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"scaleLinear\"",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "elastic",
              "type": "boolean | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domain",
              "type": "Array | null | undefined",
              "description": "`domain` domain for this scale. It will be recomputed when data changes",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 39,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "accessor",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 44,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "range",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 46,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "padding",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domainMin",
              "type": "number | null | undefined",
              "description": "`domainMin` if set, will be used as the min value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 62,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domainMax",
              "type": "number | null | undefined",
              "description": "`domainMax` if set, will be used as the max value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "scale",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 51,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "accessorPath",
              "type": "string | null | undefined",
              "description": "`accessorPath` the path from which tha accessor function is built\nFor instance `+d.count`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 62,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "family",
              "type": "string | null | undefined",
              "description": "`family` inferred by scaleType .\nOne of `continuous`, `sequential`, `quantize`, `quantile`, `threshold`, `ordinal`,",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 68,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "String"
                }
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 79,
              "column": 3
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiScale",
          "attributes": [
            {
              "name": "scale-type",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 19,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "elastic",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domain",
              "description": "`domain` domain for this scale. It will be recomputed when data changes",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 39,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "accessor",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 44,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "range",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 46,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "padding",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domain-min",
              "description": "`domainMin` if set, will be used as the min value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 62,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domain-max",
              "description": "`domainMax` if set, will be used as the max value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "scale",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 51,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "accessor-path",
              "description": "`accessorPath` the path from which tha accessor function is built\nFor instance `+d.count`",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 62,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "family",
              "description": "`family` inferred by scaleType .\nOne of `continuous`, `sequential`, `quantize`, `quantile`, `threshold`, `ordinal`,",
              "sourceRange": {
                "start": {
                  "line": 68,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "scale-changed",
              "description": "Fired when the `scale` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "family-changed",
              "description": "Fired when the `family` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-scale",
          "mixins": [
            "MultiChart.mixin.D3ScaleProperty"
          ]
        },
        {
          "description": "## MultiChartContainerAxis\n\n`<multi-container-axis>` a container for coordinate data",
          "summary": "",
          "path": "container/multi-container-axis.html",
          "properties": [
            {
              "name": "enableZoom",
              "type": "boolean | null | undefined",
              "description": "`enableZoom` set true to enable zoom behaviors",
              "privacy": "public",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "extent",
              "type": "Array | null | undefined",
              "description": "[`extent`] (https://github.com/d3/d3-zoom#zoom_extent) sets the viewport extent to the specified array of points [[x0, y0], [x1, y1]]",
              "privacy": "public",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "scaleExtent",
              "type": "Array | null | undefined",
              "description": "[`scaleExtent`](https://github.com/d3/d3-zoom#zoom_scaleExtent) sets the scale extent to the specified array of numbers [k0, k1] where k0 is the minimum allowed scale factor and k1 is the maximum allowed scale factor, and returns this zoom behavior.",
              "privacy": "public",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data` to display the chart",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "margin",
              "type": "Object | null | undefined",
              "description": "`margin` applied to svg container (not css margin, wich can also be applied as per normal css rules)\nBy default margins are slightly bigger than for simple `multi-container-svg`",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{\"top\":20,\"right\":20,\"bottom\":20,\"left\":20}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "scales",
              "type": "Object | null | undefined",
              "description": "`scales` key-value [scale](https://github.com/d3/d3-scale) for the active axis. `bottom` and `left` scales are always calculated. `right` and `top` scales are set only when\nright and top axis is drawn.",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "domains",
              "type": "Object | null | undefined",
              "description": "`domains` key-value [domain](https://github.com/d3/d3-scale#domain) for active axis. By default, `{bottom: bottomDomain, left:leftDomain}`",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 54,
                  "column": 10
                },
                "end": {
                  "line": 60,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "ranges",
              "type": "Object | null | undefined",
              "description": "`ranges` key-value [range](https://github.com/d3/d3-scale#range) for active axis.",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 65,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "accessors",
              "type": "Object | null | undefined",
              "description": "`accessors` key-value accessor functions for active axis.",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 75,
                  "column": 10
                },
                "end": {
                  "line": 81,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "topAxis",
              "type": "boolean | null | undefined",
              "description": "`topAxis` true to display top axis",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 86,
                  "column": 10
                },
                "end": {
                  "line": 89,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "rightAxis",
              "type": "boolean | null | undefined",
              "description": "`rightAxis` true to display right axis",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 94,
                  "column": 10
                },
                "end": {
                  "line": 97,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "bottomAxis",
              "type": "boolean | null | undefined",
              "description": "`bottomAxis` true to display bottom axis",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 101,
                  "column": 10
                },
                "end": {
                  "line": 104,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "leftAxis",
              "type": "boolean | null | undefined",
              "description": "`leftAxis` true to display left axis",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 109,
                  "column": 10
                },
                "end": {
                  "line": 112,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "leftTextAngle",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 115,
                  "column": 10
                },
                "end": {
                  "line": 118,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "-90",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "leftYText",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 120,
                  "column": 10
                },
                "end": {
                  "line": 123,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "6",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "leftDy",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 128,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"0.6em\"",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serieValueDomain",
              "type": "Object | null | undefined",
              "description": "`serieValueDomain` value domain for each serie groupName, calculated in `multi-register-mixin`\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 134,
                  "column": 10
                },
                "end": {
                  "line": 137,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serieOrdinalDomain",
              "type": "Object | null | undefined",
              "description": "`serieOrdinalDomain` ordinal domain for series",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 142,
                  "column": 10
                },
                "end": {
                  "line": 145,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serieDomainMapping",
              "type": "Object | null | undefined",
              "description": "`serieDomainMapping` a mapping object that will make sure that scale domains are properly set when we use data series.\nthe default mapping will use value domain for left axis and ordinal domain for bottom axis",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 151,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{\"bottom\":\"serieOrdinalDomain.default\",\"left\":\"serieValueDomain.default\"}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "ordinalDomainMapper",
              "type": "Function | null | undefined",
              "description": "`ordinalDomainMapper` a mapper for serie ordinal valued.",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 162,
                  "column": 10
                },
                "end": {
                  "line": 164,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "topAccessorPath",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 166,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 33
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "rightAccessorPath",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 167,
                  "column": 10
                },
                "end": {
                  "line": 167,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "bottomAccessorPath",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 168,
                  "column": 10
                },
                "end": {
                  "line": 168,
                  "column": 36
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "leftAccessorPath",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 169,
                  "column": 10
                },
                "end": {
                  "line": 169,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            }
          ],
          "methods": [
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 172,
                  "column": 6
                },
                "end": {
                  "line": 177,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_onSetValueDomain",
              "description": "`_onSetValueDomain` some charts will reset domain according to reshaped values (e.g. stack chart)\nThis provides a way to listing to those changes.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 183,
                  "column": 6
                },
                "end": {
                  "line": 187,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_observeSerieDomain",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 189,
                  "column": 6
                },
                "end": {
                  "line": 207,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "mapping"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [
            {
              "url": "index.html#multi-axis-demo",
              "description": ""
            },
            {
              "url": "index.html#multi-bar-demo",
              "description": ""
            },
            {
              "url": "index.html#multi-line-demo",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 4
            },
            "end": {
              "line": 208,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiChartContainerAxis",
          "attributes": [
            {
              "name": "enable-zoom",
              "description": "`enableZoom` set true to enable zoom behaviors",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "extent",
              "description": "[`extent`] (https://github.com/d3/d3-zoom#zoom_extent) sets the viewport extent to the specified array of points [[x0, y0], [x1, y1]]",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "scale-extent",
              "description": "[`scaleExtent`](https://github.com/d3/d3-zoom#zoom_scaleExtent) sets the scale extent to the specified array of numbers [k0, k1] where k0 is the minimum allowed scale factor and k1 is the maximum allowed scale factor, and returns this zoom behavior.",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "data",
              "description": "`data` to display the chart",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "margin",
              "description": "`margin` applied to svg container (not css margin, wich can also be applied as per normal css rules)\nBy default margins are slightly bigger than for simple `multi-container-svg`",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "scales",
              "description": "`scales` key-value [scale](https://github.com/d3/d3-scale) for the active axis. `bottom` and `left` scales are always calculated. `right` and `top` scales are set only when\nright and top axis is drawn.",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "domains",
              "description": "`domains` key-value [domain](https://github.com/d3/d3-scale#domain) for active axis. By default, `{bottom: bottomDomain, left:leftDomain}`",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 54,
                  "column": 10
                },
                "end": {
                  "line": 60,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "ranges",
              "description": "`ranges` key-value [range](https://github.com/d3/d3-scale#range) for active axis.",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 65,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "accessors",
              "description": "`accessors` key-value accessor functions for active axis.",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 75,
                  "column": 10
                },
                "end": {
                  "line": 81,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "top-axis",
              "description": "`topAxis` true to display top axis",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 86,
                  "column": 10
                },
                "end": {
                  "line": 89,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "right-axis",
              "description": "`rightAxis` true to display right axis",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 94,
                  "column": 10
                },
                "end": {
                  "line": 97,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "bottom-axis",
              "description": "`bottomAxis` true to display bottom axis",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 101,
                  "column": 10
                },
                "end": {
                  "line": 104,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "left-axis",
              "description": "`leftAxis` true to display left axis",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 109,
                  "column": 10
                },
                "end": {
                  "line": 112,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "left-text-angle",
              "description": "",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 115,
                  "column": 10
                },
                "end": {
                  "line": 118,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "left-y-text",
              "description": "",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 120,
                  "column": 10
                },
                "end": {
                  "line": 123,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "left-dy",
              "description": "",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 128,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serie-value-domain",
              "description": "`serieValueDomain` value domain for each serie groupName, calculated in `multi-register-mixin`\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 134,
                  "column": 10
                },
                "end": {
                  "line": 137,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serie-ordinal-domain",
              "description": "`serieOrdinalDomain` ordinal domain for series",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 142,
                  "column": 10
                },
                "end": {
                  "line": 145,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serie-domain-mapping",
              "description": "`serieDomainMapping` a mapping object that will make sure that scale domains are properly set when we use data series.\nthe default mapping will use value domain for left axis and ordinal domain for bottom axis",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 151,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "ordinal-domain-mapper",
              "description": "`ordinalDomainMapper` a mapper for serie ordinal valued.",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 162,
                  "column": 10
                },
                "end": {
                  "line": 164,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "top-accessor-path",
              "description": "",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 166,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 33
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "right-accessor-path",
              "description": "",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 167,
                  "column": 10
                },
                "end": {
                  "line": 167,
                  "column": 35
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "bottom-accessor-path",
              "description": "",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 168,
                  "column": 10
                },
                "end": {
                  "line": 168,
                  "column": 36
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "left-accessor-path",
              "description": "",
              "sourceRange": {
                "file": "multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 169,
                  "column": 10
                },
                "end": {
                  "line": 169,
                  "column": 34
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [
            {
              "description": "",
              "name": "header",
              "range": {
                "start": {
                  "line": 124,
                  "column": 6
                },
                "end": {
                  "line": 124,
                  "column": 47
                }
              }
            },
            {
              "description": "",
              "name": "",
              "range": {
                "start": {
                  "line": 125,
                  "column": 6
                },
                "end": {
                  "line": 125,
                  "column": 19
                }
              }
            },
            {
              "description": "",
              "name": "footer",
              "range": {
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 126,
                  "column": 47
                }
              }
            }
          ],
          "tagname": "multi-container-axis",
          "mixins": [
            "MultiChart.mixin.AxisProperty('bottom')",
            "MultiChart.mixin.AxisProperty('top')",
            "MultiChart.mixin.AxisProperty('left')",
            "MultiChart.mixin.ZoomableProperties",
            "MultiChart.mixin.ContainerAxisProperties"
          ]
        },
        {
          "description": "## D3ShapeLine\n\n`<d3-shape-line>` a wrapper for [d3-line](https://github.com/d3/d3-shape#line), a line generator produces a spline or polyline, as in a line chart",
          "summary": "",
          "path": "d3-shape/d3-shape-line.html",
          "properties": [
            {
              "name": "x",
              "type": "Function | null | undefined",
              "description": "`x` the x accessor to be applied to the line generator",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "xAccessor",
              "type": "Function | null | undefined",
              "description": "`xAccessor`  the accessor function for x data",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "xScale",
              "type": "Function | null | undefined",
              "description": "`xScale`  scale function for x domain",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 36,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "y",
              "type": "Function | null | undefined",
              "description": "`y` the y accessor to be applied to the line generator",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 46,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "yAccessor",
              "type": "Function | null | undefined",
              "description": "`yAccessor`  the accessor function for y data",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 53,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "yScale",
              "type": "Function | null | undefined",
              "description": "`yScale`  scale function for y domain",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 58,
                  "column": 10
                },
                "end": {
                  "line": 60,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "shaper",
              "type": "Function | null | undefined",
              "description": "`shaper` the [line](https://github.com/d3/d3-shape#line) shaper function",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 30,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "defined",
              "type": "Function | null | undefined",
              "description": "[`defined`](https://github.com/d3/d3-shape#line_defined)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 45,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "_observeScaleAccessor",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 71,
                  "column": 6
                },
                "end": {
                  "line": 78,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "scale"
                },
                {
                  "name": "accessor"
                },
                {
                  "name": "name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            }
          ],
          "staticMethods": [],
          "demos": [
            {
              "url": "index.html#multi-line-demo",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 56,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.D3ShapeLine",
          "attributes": [
            {
              "name": "x",
              "description": "`x` the x accessor to be applied to the line generator",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "x-accessor",
              "description": "`xAccessor`  the accessor function for x data",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "x-scale",
              "description": "`xScale`  scale function for x domain",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 36,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "y",
              "description": "`y` the y accessor to be applied to the line generator",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 46,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "y-accessor",
              "description": "`yAccessor`  the accessor function for y data",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 53,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "y-scale",
              "description": "`yScale`  scale function for y domain",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 58,
                  "column": 10
                },
                "end": {
                  "line": 60,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "shaper",
              "description": "`shaper` the [line](https://github.com/d3/d3-shape#line) shaper function",
              "sourceRange": {
                "start": {
                  "line": 30,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "defined",
              "description": "[`defined`](https://github.com/d3/d3-shape#line_defined)",
              "sourceRange": {
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 45,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "shaper-changed",
              "description": "Fired when the `shaper` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-shape-line",
          "mixins": [
            "MultiChart.mixin.D3ShapeCoordinate"
          ]
        },
        {
          "description": "## MultiDrawableLine\n\n`<multi-drawable-line>` draws series of lines",
          "summary": "",
          "path": "drawable/multi-drawable-line.html",
          "properties": [
            {
              "name": "shapeClass",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 50,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "shapeName",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 46,
                  "column": 6
                },
                "end": {
                  "line": 48,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "shaper",
              "type": "Function | null | undefined",
              "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 44,
                  "column": 10
                },
                "end": {
                  "line": 46,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "xAccessor",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "yAccessor",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 32,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            }
          ],
          "methods": [
            {
              "name": "drawSerieElement",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 54,
                  "column": 6
                },
                "end": {
                  "line": 60,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                }
              ]
            },
            {
              "name": "drawSerieGroup",
              "description": "`drawSerieGroup` builds one level of data  binding -> remove superfluous -> append new -> merge -> return chart\nWe can hence call this function for first grouping all keys and then build individual shapes (see multi-drawable-bubble)",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 59,
                  "column": 6
                },
                "end": {
                  "line": 79,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "shapeName"
                },
                {
                  "name": "shapeClass"
                },
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "draw",
              "description": "`draw` serie data, which are in the form of [{key, label, data: [dataValues]}]",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 84,
                  "column": 6
                },
                "end": {
                  "line": 91,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            }
          ],
          "staticMethods": [],
          "demos": [
            {
              "url": "index.html#multi-line-demo",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiDrawableLine",
          "attributes": [
            {
              "name": "shaper",
              "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
              "sourceRange": {
                "start": {
                  "line": 44,
                  "column": 10
                },
                "end": {
                  "line": 46,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "x-accessor",
              "description": "",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "y-accessor",
              "description": "",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 32,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-drawable-line",
          "mixins": [
            "MultiChart.mixin.MultiDrawableSerie"
          ]
        },
        {
          "description": "## MultiChartLine\n\n`<multi-chart-line>` an element for displaying data as a line chart.\n\n### Example\n\n```html\n\t<multi-chart-line\n       id=\"chart\"\n       color-scale=\"[[colorScale]]\"\n       data=\"[[data]]\"\n       left-tick-format=\"[[leftTickFormat]]\">\n     <dom-repeat items=\"{{keys}}\">\n       <template>\n        <!-- set the series inthe markup. We can also pass a series object directly to the chart. -->\n        <multi-serie key=\"[[item.key]]\" label=\"[[item.label]]\" accessor=\"{{item.accessor}}\"></multi-serie>\n        <!-- we need a accessor for y-scale -->\n        <multi-accessor accessor=\"{{item.accessor}}\" path=\"+value.[[item.key]]\"></multi-accessor>\n       </template>\n     </dom-repeat>\n   </multi-chart-line>\n```",
          "summary": "",
          "path": "chart/multi-chart-line.html",
          "properties": [
            {
              "name": "zoomedEl",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 6
                },
                "end": {
                  "line": 45,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Zoomable"
            },
            {
              "name": "enableZoom",
              "type": "boolean | null | undefined",
              "description": "`enableZoom` set true to enable zoom behaviors",
              "privacy": "public",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "extent",
              "type": "Array | null | undefined",
              "description": "[`extent`] (https://github.com/d3/d3-zoom#zoom_extent) sets the viewport extent to the specified array of points [[x0, y0], [x1, y1]]",
              "privacy": "public",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "scaleExtent",
              "type": "Array | null | undefined",
              "description": "[`scaleExtent`](https://github.com/d3/d3-zoom#zoom_scaleExtent) sets the scale extent to the specified array of numbers [k0, k1] where k0 is the minimum allowed scale factor and k1 is the maximum allowed scale factor, and returns this zoom behavior.",
              "privacy": "public",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data` to display the chart",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "margin",
              "type": "Object | null | undefined",
              "description": "`margin` applied to svg container (not css margin, wich can also be applied as per normal css rules)\nBy default margins are slightly bigger than for simple `multi-container-svg`",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{\"top\":20,\"right\":20,\"bottom\":20,\"left\":20}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "scales",
              "type": "Object | null | undefined",
              "description": "`scales` key-value [scale](https://github.com/d3/d3-scale) for the active axis. `bottom` and `left` scales are always calculated. `right` and `top` scales are set only when\nright and top axis is drawn.",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "domains",
              "type": "Object | null | undefined",
              "description": "`domains` key-value [domain](https://github.com/d3/d3-scale#domain) for active axis. By default, `{bottom: bottomDomain, left:leftDomain}`",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 54,
                  "column": 10
                },
                "end": {
                  "line": 60,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "ranges",
              "type": "Object | null | undefined",
              "description": "`ranges` key-value [range](https://github.com/d3/d3-scale#range) for active axis.",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 65,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "accessors",
              "type": "Object | null | undefined",
              "description": "`accessors` key-value accessor functions for active axis.",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 75,
                  "column": 10
                },
                "end": {
                  "line": 81,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "topAxis",
              "type": "boolean | null | undefined",
              "description": "`topAxis` true to display top axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 161,
                  "column": 10
                },
                "end": {
                  "line": 164,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "rightAxis",
              "type": "boolean | null | undefined",
              "description": "`rightAxis` true to display right axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 169,
                  "column": 10
                },
                "end": {
                  "line": 172,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "bottomAxis",
              "type": "boolean | null | undefined",
              "description": "`bottomAxis` true to display bottom axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 177,
                  "column": 10
                },
                "end": {
                  "line": 180,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "true"
            },
            {
              "name": "leftAxis",
              "type": "boolean | null | undefined",
              "description": "`leftAxis` true to display left axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 185,
                  "column": 10
                },
                "end": {
                  "line": 188,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "true"
            },
            {
              "name": "leftTextAngle",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 115,
                  "column": 10
                },
                "end": {
                  "line": 118,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "-90",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "leftYText",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 120,
                  "column": 10
                },
                "end": {
                  "line": 123,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "6",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "leftDy",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 128,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"0.6em\"",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serieValueDomain",
              "type": "Object | null | undefined",
              "description": "`serieValueDomain` value domain for each serie groupName, calculated in `multi-register-mixin`\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 134,
                  "column": 10
                },
                "end": {
                  "line": 137,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serieOrdinalDomain",
              "type": "Object | null | undefined",
              "description": "`serieOrdinalDomain` ordinal domain for series",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 142,
                  "column": 10
                },
                "end": {
                  "line": 145,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serieDomainMapping",
              "type": "Object | null | undefined",
              "description": "`serieDomainMapping` a mapping object that will make sure that scale domains are properly set when we use data series.\nthe default mapping will use value domain for left axis and ordinal domain for bottom axis",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 151,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{\"bottom\":\"serieOrdinalDomain.default\",\"left\":\"serieValueDomain.default\"}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "ordinalDomainMapper",
              "type": "Function | null | undefined",
              "description": "`ordinalDomainMapper` a mapper for serie ordinal valued.",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 162,
                  "column": 10
                },
                "end": {
                  "line": 164,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "topAccessorPath",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 166,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 33
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "rightAccessorPath",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 167,
                  "column": 10
                },
                "end": {
                  "line": 167,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "bottomAccessorPath",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 168,
                  "column": 10
                },
                "end": {
                  "line": 168,
                  "column": 36
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "leftAccessorPath",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 169,
                  "column": 10
                },
                "end": {
                  "line": 169,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "colorScale",
              "type": "Function | null | undefined",
              "description": "`colorScale` colorScale to use for the chart (example d3.scaleOrdinal().range(d3.schemeCategory10);)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 154,
                  "column": 6
                },
                "end": {
                  "line": 156,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "series",
              "type": "Array | null | undefined",
              "description": "`series`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 193,
                  "column": 10
                },
                "end": {
                  "line": 196,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "bottomScaleType",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 198,
                  "column": 9
                },
                "end": {
                  "line": 201,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"scalePoint\""
            }
          ],
          "methods": [
            {
              "name": "_observeEnableZoom",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-mixin.html",
                "start": {
                  "line": 47,
                  "column": 6
                },
                "end": {
                  "line": 61,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "enable"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Zoomable"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 204,
                  "column": 3
                },
                "end": {
                  "line": 210,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [
            {
              "url": "index.html#multi-line-demo",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 2
            },
            "end": {
              "line": 211,
              "column": 3
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiChartLine",
          "attributes": [
            {
              "name": "enable-zoom",
              "description": "`enableZoom` set true to enable zoom behaviors",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "extent",
              "description": "[`extent`] (https://github.com/d3/d3-zoom#zoom_extent) sets the viewport extent to the specified array of points [[x0, y0], [x1, y1]]",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "scale-extent",
              "description": "[`scaleExtent`](https://github.com/d3/d3-zoom#zoom_scaleExtent) sets the scale extent to the specified array of numbers [k0, k1] where k0 is the minimum allowed scale factor and k1 is the maximum allowed scale factor, and returns this zoom behavior.",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "data",
              "description": "`data` to display the chart",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "margin",
              "description": "`margin` applied to svg container (not css margin, wich can also be applied as per normal css rules)\nBy default margins are slightly bigger than for simple `multi-container-svg`",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "scales",
              "description": "`scales` key-value [scale](https://github.com/d3/d3-scale) for the active axis. `bottom` and `left` scales are always calculated. `right` and `top` scales are set only when\nright and top axis is drawn.",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "domains",
              "description": "`domains` key-value [domain](https://github.com/d3/d3-scale#domain) for active axis. By default, `{bottom: bottomDomain, left:leftDomain}`",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 54,
                  "column": 10
                },
                "end": {
                  "line": 60,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "ranges",
              "description": "`ranges` key-value [range](https://github.com/d3/d3-scale#range) for active axis.",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 65,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "accessors",
              "description": "`accessors` key-value accessor functions for active axis.",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 75,
                  "column": 10
                },
                "end": {
                  "line": 81,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "top-axis",
              "description": "`topAxis` true to display top axis",
              "sourceRange": {
                "start": {
                  "line": 161,
                  "column": 10
                },
                "end": {
                  "line": 164,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "right-axis",
              "description": "`rightAxis` true to display right axis",
              "sourceRange": {
                "start": {
                  "line": 169,
                  "column": 10
                },
                "end": {
                  "line": 172,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "bottom-axis",
              "description": "`bottomAxis` true to display bottom axis",
              "sourceRange": {
                "start": {
                  "line": 177,
                  "column": 10
                },
                "end": {
                  "line": 180,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "left-axis",
              "description": "`leftAxis` true to display left axis",
              "sourceRange": {
                "start": {
                  "line": 185,
                  "column": 10
                },
                "end": {
                  "line": 188,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "left-text-angle",
              "description": "",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 115,
                  "column": 10
                },
                "end": {
                  "line": 118,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "left-y-text",
              "description": "",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 120,
                  "column": 10
                },
                "end": {
                  "line": 123,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "left-dy",
              "description": "",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 128,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serie-value-domain",
              "description": "`serieValueDomain` value domain for each serie groupName, calculated in `multi-register-mixin`\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 134,
                  "column": 10
                },
                "end": {
                  "line": 137,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serie-ordinal-domain",
              "description": "`serieOrdinalDomain` ordinal domain for series",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 142,
                  "column": 10
                },
                "end": {
                  "line": 145,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serie-domain-mapping",
              "description": "`serieDomainMapping` a mapping object that will make sure that scale domains are properly set when we use data series.\nthe default mapping will use value domain for left axis and ordinal domain for bottom axis",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 151,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "ordinal-domain-mapper",
              "description": "`ordinalDomainMapper` a mapper for serie ordinal valued.",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 162,
                  "column": 10
                },
                "end": {
                  "line": 164,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "top-accessor-path",
              "description": "",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 166,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 33
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "right-accessor-path",
              "description": "",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 167,
                  "column": 10
                },
                "end": {
                  "line": 167,
                  "column": 35
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "bottom-accessor-path",
              "description": "",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 168,
                  "column": 10
                },
                "end": {
                  "line": 168,
                  "column": 36
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "left-accessor-path",
              "description": "",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 169,
                  "column": 10
                },
                "end": {
                  "line": 169,
                  "column": 34
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "color-scale",
              "description": "`colorScale` colorScale to use for the chart (example d3.scaleOrdinal().range(d3.schemeCategory10);)",
              "sourceRange": {
                "start": {
                  "line": 154,
                  "column": 6
                },
                "end": {
                  "line": 156,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "series",
              "description": "`series`",
              "sourceRange": {
                "start": {
                  "line": 193,
                  "column": 10
                },
                "end": {
                  "line": 196,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "bottom-scale-type",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 198,
                  "column": 9
                },
                "end": {
                  "line": 201,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "series-changed",
              "description": "Fired when the `series` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [
            {
              "description": "",
              "name": "header",
              "range": {
                "start": {
                  "line": 93,
                  "column": 2
                },
                "end": {
                  "line": 93,
                  "column": 43
                }
              }
            },
            {
              "description": "",
              "name": "",
              "range": {
                "start": {
                  "line": 94,
                  "column": 2
                },
                "end": {
                  "line": 94,
                  "column": 15
                }
              }
            },
            {
              "description": "",
              "name": "footer",
              "range": {
                "start": {
                  "line": 95,
                  "column": 3
                },
                "end": {
                  "line": 95,
                  "column": 44
                }
              }
            }
          ],
          "tagname": "multi-chart-line",
          "mixins": [
            "MultiChart.mixin.Zoomable",
            "MultiChart.mixin.AxisProperty('bottom')",
            "MultiChart.mixin.AxisProperty('top')",
            "MultiChart.mixin.AxisProperty('left')",
            "MultiChart.mixin.ZoomableProperties",
            "MultiChart.mixin.ContainerAxisProperties"
          ]
        },
        {
          "description": "## MultiChartLine\n\n`<multi-chart-bar>` an element for displaying data as a bar or stack chart.\n\n### Example\n\n```html\n\t<multi-chart-bar\n       id=\"chart\"\n       color-scale=\"[[colorScale]]\"\n       data=\"[[data]]\"\n\t\t\t  leys=\"[[keys]]\"\n       left-tick-format=\"[[leftTickFormat]]\">\n     <dom-repeat items=\"{{keys}}\">\n       <template>\n        <!-- set the series inthe markup. We can also pass a series object directly to the chart. -->\n        <multi-serie key=\"[[item]]\" label=\"[[item]]\"></multi-serie>\n       </template>\n     </dom-repeat>\n   </multi-chart-bar>\n```",
          "summary": "",
          "path": "chart/multi-chart-bar.html",
          "properties": [
            {
              "name": "zoomedEl",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 6
                },
                "end": {
                  "line": 45,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Zoomable"
            },
            {
              "name": "enableZoom",
              "type": "boolean | null | undefined",
              "description": "`enableZoom` set true to enable zoom behaviors",
              "privacy": "public",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "extent",
              "type": "Array | null | undefined",
              "description": "[`extent`] (https://github.com/d3/d3-zoom#zoom_extent) sets the viewport extent to the specified array of points [[x0, y0], [x1, y1]]",
              "privacy": "public",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "scaleExtent",
              "type": "Array | null | undefined",
              "description": "[`scaleExtent`](https://github.com/d3/d3-zoom#zoom_scaleExtent) sets the scale extent to the specified array of numbers [k0, k1] where k0 is the minimum allowed scale factor and k1 is the maximum allowed scale factor, and returns this zoom behavior.",
              "privacy": "public",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data` to display the chart",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "margin",
              "type": "Object | null | undefined",
              "description": "`margin` applied to svg container (not css margin, wich can also be applied as per normal css rules)\nBy default margins are slightly bigger than for simple `multi-container-svg`",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{\"top\":20,\"right\":20,\"bottom\":20,\"left\":20}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "scales",
              "type": "Object | null | undefined",
              "description": "`scales` key-value [scale](https://github.com/d3/d3-scale) for the active axis. `bottom` and `left` scales are always calculated. `right` and `top` scales are set only when\nright and top axis is drawn.",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "domains",
              "type": "Object | null | undefined",
              "description": "`domains` key-value [domain](https://github.com/d3/d3-scale#domain) for active axis. By default, `{bottom: bottomDomain, left:leftDomain}`",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 54,
                  "column": 10
                },
                "end": {
                  "line": 60,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "ranges",
              "type": "Object | null | undefined",
              "description": "`ranges` key-value [range](https://github.com/d3/d3-scale#range) for active axis.",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 65,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "accessors",
              "type": "Object | null | undefined",
              "description": "`accessors` key-value accessor functions for active axis.",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 75,
                  "column": 10
                },
                "end": {
                  "line": 81,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "topAxis",
              "type": "boolean | null | undefined",
              "description": "`topAxis` true to display top axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 177,
                  "column": 10
                },
                "end": {
                  "line": 180,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "rightAxis",
              "type": "boolean | null | undefined",
              "description": "`rightAxis` true to display right axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 185,
                  "column": 10
                },
                "end": {
                  "line": 188,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "bottomAxis",
              "type": "boolean | null | undefined",
              "description": "`bottomAxis` true to display bottom axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 193,
                  "column": 10
                },
                "end": {
                  "line": 196,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "true"
            },
            {
              "name": "leftAxis",
              "type": "boolean | null | undefined",
              "description": "`leftAxis` true to display left axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 201,
                  "column": 10
                },
                "end": {
                  "line": 204,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "true"
            },
            {
              "name": "leftTextAngle",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 115,
                  "column": 10
                },
                "end": {
                  "line": 118,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "-90",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "leftYText",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 120,
                  "column": 10
                },
                "end": {
                  "line": 123,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "6",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "leftDy",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 128,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"0.6em\"",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serieValueDomain",
              "type": "Object | null | undefined",
              "description": "`serieValueDomain` value domain for each serie groupName, calculated in `multi-register-mixin`\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 134,
                  "column": 10
                },
                "end": {
                  "line": 137,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serieOrdinalDomain",
              "type": "Object | null | undefined",
              "description": "`serieOrdinalDomain` ordinal domain for series",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 142,
                  "column": 10
                },
                "end": {
                  "line": 145,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serieDomainMapping",
              "type": "Object | null | undefined",
              "description": "`serieDomainMapping` a mapping object that will make sure that scale domains are properly set when we use data series.\nthe default mapping will use value domain for left axis and ordinal domain for bottom axis",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 151,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{\"bottom\":\"serieOrdinalDomain.default\",\"left\":\"serieValueDomain.default\"}",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "ordinalDomainMapper",
              "type": "Function | null | undefined",
              "description": "`ordinalDomainMapper` a mapper for serie ordinal valued.",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 162,
                  "column": 10
                },
                "end": {
                  "line": 164,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "topAccessorPath",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 166,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 33
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "rightAccessorPath",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 167,
                  "column": 10
                },
                "end": {
                  "line": 167,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "bottomAccessorPath",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 168,
                  "column": 10
                },
                "end": {
                  "line": 168,
                  "column": 36
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "leftAccessorPath",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 169,
                  "column": 10
                },
                "end": {
                  "line": 169,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "stacked",
              "type": "boolean | null | undefined",
              "description": "`stacked` if true, draw a stack chart, otherwise, default bar chart",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 155,
                  "column": 11
                },
                "end": {
                  "line": 158,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"redraw\"",
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "keys",
              "type": "Array | null | undefined",
              "description": "[`keys`](https://github.com/d3/d3-shape#bar_keys)  - the keys accessors for the bar",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 163,
                  "column": 10
                },
                "end": {
                  "line": 165,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "colorScale",
              "type": "Function | null | undefined",
              "description": "`colorScale` colorScale to use for the chart (example d3.scaleOrdinal().range(d3.schemeCategory10);)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 170,
                  "column": 6
                },
                "end": {
                  "line": 172,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "series",
              "type": "Array | null | undefined",
              "description": "`series`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 209,
                  "column": 10
                },
                "end": {
                  "line": 212,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "bottomScaleType",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 214,
                  "column": 9
                },
                "end": {
                  "line": 217,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"scaleBand\""
            }
          ],
          "methods": [
            {
              "name": "_observeEnableZoom",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-mixin.html",
                "start": {
                  "line": 47,
                  "column": 6
                },
                "end": {
                  "line": 61,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "enable"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Zoomable"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 220,
                  "column": 3
                },
                "end": {
                  "line": 226,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [
            {
              "url": "index.html#multi-bar-demo",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 2
            },
            "end": {
              "line": 227,
              "column": 3
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiChartLine",
          "attributes": [
            {
              "name": "enable-zoom",
              "description": "`enableZoom` set true to enable zoom behaviors",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "extent",
              "description": "[`extent`] (https://github.com/d3/d3-zoom#zoom_extent) sets the viewport extent to the specified array of points [[x0, y0], [x1, y1]]",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "scale-extent",
              "description": "[`scaleExtent`](https://github.com/d3/d3-zoom#zoom_scaleExtent) sets the scale extent to the specified array of numbers [k0, k1] where k0 is the minimum allowed scale factor and k1 is the maximum allowed scale factor, and returns this zoom behavior.",
              "sourceRange": {
                "file": "../d3-zoom/zoomable-properties-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ZoomableProperties"
            },
            {
              "name": "data",
              "description": "`data` to display the chart",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "margin",
              "description": "`margin` applied to svg container (not css margin, wich can also be applied as per normal css rules)\nBy default margins are slightly bigger than for simple `multi-container-svg`",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "scales",
              "description": "`scales` key-value [scale](https://github.com/d3/d3-scale) for the active axis. `bottom` and `left` scales are always calculated. `right` and `top` scales are set only when\nright and top axis is drawn.",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "domains",
              "description": "`domains` key-value [domain](https://github.com/d3/d3-scale#domain) for active axis. By default, `{bottom: bottomDomain, left:leftDomain}`",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 54,
                  "column": 10
                },
                "end": {
                  "line": 60,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "ranges",
              "description": "`ranges` key-value [range](https://github.com/d3/d3-scale#range) for active axis.",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 65,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "accessors",
              "description": "`accessors` key-value accessor functions for active axis.",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 75,
                  "column": 10
                },
                "end": {
                  "line": 81,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "top-axis",
              "description": "`topAxis` true to display top axis",
              "sourceRange": {
                "start": {
                  "line": 177,
                  "column": 10
                },
                "end": {
                  "line": 180,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "right-axis",
              "description": "`rightAxis` true to display right axis",
              "sourceRange": {
                "start": {
                  "line": 185,
                  "column": 10
                },
                "end": {
                  "line": 188,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "bottom-axis",
              "description": "`bottomAxis` true to display bottom axis",
              "sourceRange": {
                "start": {
                  "line": 193,
                  "column": 10
                },
                "end": {
                  "line": 196,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "left-axis",
              "description": "`leftAxis` true to display left axis",
              "sourceRange": {
                "start": {
                  "line": 201,
                  "column": 10
                },
                "end": {
                  "line": 204,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "left-text-angle",
              "description": "",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 115,
                  "column": 10
                },
                "end": {
                  "line": 118,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "left-y-text",
              "description": "",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 120,
                  "column": 10
                },
                "end": {
                  "line": 123,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "left-dy",
              "description": "",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 128,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serie-value-domain",
              "description": "`serieValueDomain` value domain for each serie groupName, calculated in `multi-register-mixin`\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 134,
                  "column": 10
                },
                "end": {
                  "line": 137,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serie-ordinal-domain",
              "description": "`serieOrdinalDomain` ordinal domain for series",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 142,
                  "column": 10
                },
                "end": {
                  "line": 145,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "serie-domain-mapping",
              "description": "`serieDomainMapping` a mapping object that will make sure that scale domains are properly set when we use data series.\nthe default mapping will use value domain for left axis and ordinal domain for bottom axis",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 151,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "ordinal-domain-mapper",
              "description": "`ordinalDomainMapper` a mapper for serie ordinal valued.",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 162,
                  "column": 10
                },
                "end": {
                  "line": 164,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "top-accessor-path",
              "description": "",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 166,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 33
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "right-accessor-path",
              "description": "",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 167,
                  "column": 10
                },
                "end": {
                  "line": 167,
                  "column": 35
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "bottom-accessor-path",
              "description": "",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 168,
                  "column": 10
                },
                "end": {
                  "line": 168,
                  "column": 36
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "left-accessor-path",
              "description": "",
              "sourceRange": {
                "file": "../container/multi-container-axis-properties-mixin.html",
                "start": {
                  "line": 169,
                  "column": 10
                },
                "end": {
                  "line": 169,
                  "column": 34
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.ContainerAxisProperties"
            },
            {
              "name": "stacked",
              "description": "`stacked` if true, draw a stack chart, otherwise, default bar chart",
              "sourceRange": {
                "start": {
                  "line": 155,
                  "column": 11
                },
                "end": {
                  "line": 158,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "keys",
              "description": "[`keys`](https://github.com/d3/d3-shape#bar_keys)  - the keys accessors for the bar",
              "sourceRange": {
                "start": {
                  "line": 163,
                  "column": 10
                },
                "end": {
                  "line": 165,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "color-scale",
              "description": "`colorScale` colorScale to use for the chart (example d3.scaleOrdinal().range(d3.schemeCategory10);)",
              "sourceRange": {
                "start": {
                  "line": 170,
                  "column": 6
                },
                "end": {
                  "line": 172,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "series",
              "description": "`series`",
              "sourceRange": {
                "start": {
                  "line": 209,
                  "column": 10
                },
                "end": {
                  "line": 212,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "bottom-scale-type",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 214,
                  "column": 9
                },
                "end": {
                  "line": 217,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "series-changed",
              "description": "Fired when the `series` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [
            {
              "description": "",
              "name": "header",
              "range": {
                "start": {
                  "line": 95,
                  "column": 2
                },
                "end": {
                  "line": 95,
                  "column": 43
                }
              }
            },
            {
              "description": "",
              "name": "",
              "range": {
                "start": {
                  "line": 96,
                  "column": 2
                },
                "end": {
                  "line": 96,
                  "column": 15
                }
              }
            },
            {
              "description": "",
              "name": "footer",
              "range": {
                "start": {
                  "line": 97,
                  "column": 3
                },
                "end": {
                  "line": 97,
                  "column": 44
                }
              }
            }
          ],
          "tagname": "multi-chart-bar",
          "mixins": [
            "MultiChart.mixin.Zoomable",
            "MultiChart.mixin.AxisProperty('bottom')",
            "MultiChart.mixin.AxisProperty('top')",
            "MultiChart.mixin.AxisProperty('left')",
            "MultiChart.mixin.ZoomableProperties",
            "MultiChart.mixin.ContainerAxisProperties"
          ]
        },
        {
          "description": "# MultiContainerG\n\n`<multi-container-g>` is a proxy for svg g element.\nIt will be inserted within `multi-container-svg#slot-chart` and can contain other svg content like geo layer.\n\n\n### Events\nFired when `multi-container-g` is attached .",
          "summary": "",
          "path": "container/multi-container-g.html",
          "properties": [
            {
              "name": "_registeredItems",
              "type": "Array | null | undefined",
              "description": "`_registeredItems`  the list of registered items (registerable items)",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 33,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "defaultValue": "[]",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "series",
              "type": "Array | null | undefined",
              "description": "`series` the list of data serie registered for this container.\nWe can eiher pass a serie array like [{key: 'apple', label:'apple'}, accessor: d => +d.value.apple}, {key: 'orange', label:'orange'}, accessor: d => +d.value.orange}],\n or use `<multi-serie>` component to register series via markup",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "defaultValue": "[]",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data` to display the chart",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` to apply while drawing",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 61,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "serieValueDomain",
              "type": "Object | null | undefined",
              "description": "`serieValueDomain` value domain for each serie groupName.\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "serieOrdinalDomain",
              "type": "Object | null | undefined",
              "description": "`serieOrdinalDomain` ordinal domain for series",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 75,
                  "column": 10
                },
                "end": {
                  "line": 78,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "ordinalDomainMapper",
              "type": "Function | null | undefined",
              "description": "`ordinalDomainMapper` a mapper for serie ordinal valued. By default, identity function.",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 83,
                  "column": 10
                },
                "end": {
                  "line": 85,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_multiData",
              "type": "Array | null | undefined",
              "description": "`_multiData` reshaped data to use internally within MultiChart.",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 91,
                  "column": 10
                },
                "end": {
                  "line": 93,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 72,
                  "column": 10
                },
                "end": {
                  "line": 74,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerOrder",
              "type": "number | null | undefined",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            }
          ],
          "methods": [
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 105,
                  "column": 6
                },
                "end": {
                  "line": 110,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_observeDataGenerators",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 112,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "getOrdinalDomain",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 159,
                  "column": 6
                },
                "end": {
                  "line": 169,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "mapper"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_callDataChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 171,
                  "column": 6
                },
                "end": {
                  "line": 175,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "splices"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_registerItem",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 177,
                  "column": 6
                },
                "end": {
                  "line": 184,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name"
                },
                {
                  "name": "item"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_onMultiRegister",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 186,
                  "column": 6
                },
                "end": {
                  "line": 199,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                },
                {
                  "name": "d"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_onMultiSerieRegister",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 201,
                  "column": 6
                },
                "end": {
                  "line": 204,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_onRefresh",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 207,
                  "column": 6
                },
                "end": {
                  "line": 210,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 92,
                  "column": 6
                },
                "end": {
                  "line": 99,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "unregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 217,
                  "column": 6
                },
                "end": {
                  "line": 224,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "registered"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "shallNotify",
              "description": "`shallNotify` should return true to actually render the component",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 229,
                  "column": 6
                },
                "end": {
                  "line": 231,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "callRegistered",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 233,
                  "column": 6
                },
                "end": {
                  "line": 248,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "methodName"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 78,
                  "column": 6
                },
                "end": {
                  "line": 83,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called by `registerable-mixin` on disconnectedCallback.\nIt unregisters this element from svgHost.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 68,
                  "column": 6
                },
                "end": {
                  "line": 73,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 53,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "dataChanged",
              "description": "`dataChanges` relay dataChanged to registeredItems",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 88,
                  "column": 6
                },
                "end": {
                  "line": 90,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiContainerG",
          "attributes": [
            {
              "name": "series",
              "description": "`series` the list of data serie registered for this container.\nWe can eiher pass a serie array like [{key: 'apple', label:'apple'}, accessor: d => +d.value.apple}, {key: 'orange', label:'orange'}, accessor: d => +d.value.orange}],\n or use `<multi-serie>` component to register series via markup",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "data",
              "description": "`data` to display the chart",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "transition",
              "description": "`transition` to apply while drawing",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 61,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "serie-value-domain",
              "description": "`serieValueDomain` value domain for each serie groupName.\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "serie-ordinal-domain",
              "description": "`serieOrdinalDomain` ordinal domain for series",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 75,
                  "column": 10
                },
                "end": {
                  "line": 78,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "ordinal-domain-mapper",
              "description": "`ordinalDomainMapper` a mapper for serie ordinal valued. By default, identity function.",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 83,
                  "column": 10
                },
                "end": {
                  "line": 85,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "start": {
                  "line": 72,
                  "column": 10
                },
                "end": {
                  "line": 74,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-order",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [
            {
              "description": "",
              "name": "",
              "range": {
                "start": {
                  "line": 17,
                  "column": 6
                },
                "end": {
                  "line": 17,
                  "column": 19
                }
              }
            }
          ],
          "tagname": "multi-container-g",
          "mixins": [
            "MultiChart.mixin.MultiRegister",
            "MultiChart.mixin.Registerable",
            "MultiChart.mixin.DispatchSVG",
            "MultiChart.mixin.SVGHelper",
            "MultiChart.mixin.Resizable",
            "MultiChart.mixin.PolymerExtends"
          ]
        },
        {
          "description": "## MultiSerie\n\n`<multi-serie>` a helper to transform data so that it is easier to draw.",
          "summary": "",
          "path": "helper/multi-serie.html",
          "properties": [
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key` the key used for this data serie",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 26,
                  "column": 10
                },
                "end": {
                  "line": 28,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "label",
              "type": "string | null | undefined",
              "description": "`label` a label describing the serie",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 33,
                  "column": 10
                },
                "end": {
                  "line": 35,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "accessor",
              "type": "Function | null | undefined",
              "description": "`accessor` the accessor function for transforming data.\nData will be reshaped as  `[{key: key, label: label, value: data.map(d=>accessor(d))}]",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 43,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 49,
                  "column": 10
                },
                "end": {
                  "line": 52,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-serie-register\""
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 17,
              "column": 4
            },
            "end": {
              "line": 55,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiSerie",
          "attributes": [
            {
              "name": "key",
              "description": "`key` the key used for this data serie",
              "sourceRange": {
                "start": {
                  "line": 26,
                  "column": 10
                },
                "end": {
                  "line": 28,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "label",
              "description": "`label` a label describing the serie",
              "sourceRange": {
                "start": {
                  "line": 33,
                  "column": 10
                },
                "end": {
                  "line": 35,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "accessor",
              "description": "`accessor` the accessor function for transforming data.\nData will be reshaped as  `[{key: key, label: label, value: data.map(d=>accessor(d))}]",
              "sourceRange": {
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 43,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "start": {
                  "line": 49,
                  "column": 10
                },
                "end": {
                  "line": 52,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-serie",
          "mixins": [
            "MultiChart.mixin.Registerable"
          ]
        },
        {
          "description": "## MultiLegend\n\n`<multi-legend>` a element for displaying chart legends\nRelying on [d3-legend](https://d3-legend.susielu.com/), A library to make legends in svg-land easy as pie.\n\n### Styling\n`<multi-drawable-feature>` provides the following custom properties and mixins\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--multi-legend-color` | text color for legends | `#292929`\n`--multi-legend-background` | background color for legenx box | `#efefef`\n`--multi-legend-stroke` | stroke color for legend box | `none`\n`--multi-legend-opacity` | opacity for legend box | `0.6`\n`--multi-legend` | Mixin applied to legend | `{}`",
          "summary": "",
          "path": "helper/multi-legend.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerOrder",
              "type": "number | null | undefined",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "privacy": "public",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "trackHover",
              "type": "boolean | null | undefined",
              "description": "`trackHover` set true if selector listen to mouseenter/mouseleave events and set hoveredItem accordingly.\nWhen true, this element also and fires `multi-mouseenter` and multi-mouseleave.",
              "privacy": "public",
              "sourceRange": {
                "file": "track-hover-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 25,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false",
              "inheritedFrom": "MultiChart.mixin.TrackHover"
            },
            {
              "name": "hovered",
              "type": "string | null | undefined",
              "description": "`hovered` the hovered item, tracked when `trackHover` is set to true.\nThis is usefull for instance when we want to highlight the legend being hovered",
              "privacy": "public",
              "sourceRange": {
                "file": "track-hover-mixin.html",
                "start": {
                  "line": 31,
                  "column": 10
                },
                "end": {
                  "line": 35,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "observer": "\"_observerHovered\"",
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.TrackHover"
            },
            {
              "name": "legendType",
              "type": "string | null | undefined",
              "description": "`legendType` the type of legend (`legendColor`, `legendSize`, `legendSymbol`)\nfor instantiating the legend ([d3-legend](http://d3-legend.susielu.com/).",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 90,
                  "column": 10
                },
                "end": {
                  "line": 93,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"legendColor\""
            },
            {
              "name": "size",
              "type": "Object | null | undefined",
              "description": "`size` of legend in the format {width, height}. This is usefull if we want to align chart margin with size of legend.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 98,
                  "column": 10
                },
                "end": {
                  "line": 101,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "rectOffset",
              "type": "number | null | undefined",
              "description": "`retOffset` the offset for legend rect",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 106,
                  "column": 10
                },
                "end": {
                  "line": 109,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "5"
            },
            {
              "name": "legend",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 111,
                  "column": 10
                },
                "end": {
                  "line": 114,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "anchor",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 116,
                  "column": 10
                },
                "end": {
                  "line": 119,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"legend\""
            },
            {
              "name": "scaleFactor",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 121,
                  "column": 10
                },
                "end": {
                  "line": 124,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0.7"
            },
            {
              "name": "position",
              "type": "string | null | undefined",
              "description": "`position` this position within the chart. e.g. top-right, bottom-left\nposition is recalculated on resize.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 130,
                  "column": 10
                },
                "end": {
                  "line": 132,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "padding",
              "type": "number | null | undefined",
              "description": "`padding` the padding to be applied when calculation the position",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 137,
                  "column": 10
                },
                "end": {
                  "line": 140,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "10"
            },
            {
              "name": "x",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 142,
                  "column": 10
                },
                "end": {
                  "line": 145,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            },
            {
              "name": "y",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 147,
                  "column": 10
                },
                "end": {
                  "line": 150,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            },
            {
              "name": "scale",
              "type": "Function | null | undefined",
              "description": "API Properties",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 154,
                  "column": 10
                },
                "end": {
                  "line": 156,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "labels",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 157,
                  "column": 10
                },
                "end": {
                  "line": 159,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "cells",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 160,
                  "column": 10
                },
                "end": {
                  "line": 162,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "orient",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 163,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "ascending",
              "type": "boolean | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 167,
                  "column": 10
                },
                "end": {
                  "line": 169,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "shape",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 170,
                  "column": 10
                },
                "end": {
                  "line": 172,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "shapeWidth",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 173,
                  "column": 10
                },
                "end": {
                  "line": 175,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "shapeHeight",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 176,
                  "column": 10
                },
                "end": {
                  "line": 178,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "shapeRadius",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 179,
                  "column": 10
                },
                "end": {
                  "line": 181,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "shapePadding",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 182,
                  "column": 10
                },
                "end": {
                  "line": 184,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "useClass",
              "type": "boolean | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 185,
                  "column": 10
                },
                "end": {
                  "line": 187,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "classPrefix",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 188,
                  "column": 10
                },
                "end": {
                  "line": 190,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "title",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 191,
                  "column": 10
                },
                "end": {
                  "line": 193,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "labelAlign",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 194,
                  "column": 10
                },
                "end": {
                  "line": 196,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "labelWrap",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 197,
                  "column": 10
                },
                "end": {
                  "line": 199,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "labelFormat",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 200,
                  "column": 10
                },
                "end": {
                  "line": 202,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "labelOffset",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 203,
                  "column": 10
                },
                "end": {
                  "line": 205,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "labelDelimiter",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 206,
                  "column": 10
                },
                "end": {
                  "line": 208,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 240,
                  "column": 6
                },
                "end": {
                  "line": 246,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called by `registerable-mixin` on disconnectedCallback.\nIt unregisters this element from svgHost.",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 68,
                  "column": 6
                },
                "end": {
                  "line": 73,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 53,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 253,
                  "column": 6
                },
                "end": {
                  "line": 256,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 81,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 83,
                  "column": 4
                },
                "end": {
                  "line": 88,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "attachListeners",
              "description": "`attachListeners` listen to click, mouseenter and mouseleave and\nfires their respective `multi` events (`multi-tap`, `multi-mouse-enter` and `multi-mouse-leave`)",
              "privacy": "public",
              "sourceRange": {
                "file": "track-hover-mixin.html",
                "start": {
                  "line": 43,
                  "column": 6
                },
                "end": {
                  "line": 50,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "sel"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.TrackHover"
            },
            {
              "name": "detatchListeners",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "track-hover-mixin.html",
                "start": {
                  "line": 52,
                  "column": 6
                },
                "end": {
                  "line": 56,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "sel"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.TrackHover"
            },
            {
              "name": "onMouseenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "track-hover-mixin.html",
                "start": {
                  "line": 58,
                  "column": 6
                },
                "end": {
                  "line": 61,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                },
                {
                  "name": "el"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.TrackHover"
            },
            {
              "name": "onMouseleave",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "track-hover-mixin.html",
                "start": {
                  "line": 63,
                  "column": 6
                },
                "end": {
                  "line": 66,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                },
                {
                  "name": "el"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.TrackHover"
            },
            {
              "name": "getKey",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "track-hover-mixin.html",
                "start": {
                  "line": 68,
                  "column": 6
                },
                "end": {
                  "line": 70,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.TrackHover"
            },
            {
              "name": "_observerHovered",
              "description": "`_observerHoveredItem` add `.hovered` class to all items with same key as hovered",
              "privacy": "protected",
              "sourceRange": {
                "file": "track-hover-mixin.html",
                "start": {
                  "line": 75,
                  "column": 6
                },
                "end": {
                  "line": 83,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hovered"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.TrackHover"
            },
            {
              "name": "observeConfig",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 235,
                  "column": 6
                },
                "end": {
                  "line": 238,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                },
                {
                  "name": "name"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "onRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 248,
                  "column": 6
                },
                "end": {
                  "line": 251,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "debounceDraw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 262,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 264,
                  "column": 6
                },
                "end": {
                  "line": 270,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeLegend",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 272,
                  "column": 6
                },
                "end": {
                  "line": 303,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "legendType"
                }
              ]
            },
            {
              "name": "setPosition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 305,
                  "column": 6
                },
                "end": {
                  "line": 334,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 4
            },
            "end": {
              "line": 335,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiLegend",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-order",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "track-hover",
              "description": "`trackHover` set true if selector listen to mouseenter/mouseleave events and set hoveredItem accordingly.\nWhen true, this element also and fires `multi-mouseenter` and multi-mouseleave.",
              "sourceRange": {
                "file": "track-hover-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 25,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.TrackHover"
            },
            {
              "name": "hovered",
              "description": "`hovered` the hovered item, tracked when `trackHover` is set to true.\nThis is usefull for instance when we want to highlight the legend being hovered",
              "sourceRange": {
                "file": "track-hover-mixin.html",
                "start": {
                  "line": 31,
                  "column": 10
                },
                "end": {
                  "line": 35,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.TrackHover"
            },
            {
              "name": "legend-type",
              "description": "`legendType` the type of legend (`legendColor`, `legendSize`, `legendSymbol`)\nfor instantiating the legend ([d3-legend](http://d3-legend.susielu.com/).",
              "sourceRange": {
                "start": {
                  "line": 90,
                  "column": 10
                },
                "end": {
                  "line": 93,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "size",
              "description": "`size` of legend in the format {width, height}. This is usefull if we want to align chart margin with size of legend.",
              "sourceRange": {
                "start": {
                  "line": 98,
                  "column": 10
                },
                "end": {
                  "line": 101,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "rect-offset",
              "description": "`retOffset` the offset for legend rect",
              "sourceRange": {
                "start": {
                  "line": 106,
                  "column": 10
                },
                "end": {
                  "line": 109,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "legend",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 111,
                  "column": 10
                },
                "end": {
                  "line": 114,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "anchor",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 116,
                  "column": 10
                },
                "end": {
                  "line": 119,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "scale-factor",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 121,
                  "column": 10
                },
                "end": {
                  "line": 124,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "position",
              "description": "`position` this position within the chart. e.g. top-right, bottom-left\nposition is recalculated on resize.",
              "sourceRange": {
                "start": {
                  "line": 130,
                  "column": 10
                },
                "end": {
                  "line": 132,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "padding",
              "description": "`padding` the padding to be applied when calculation the position",
              "sourceRange": {
                "start": {
                  "line": 137,
                  "column": 10
                },
                "end": {
                  "line": 140,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "x",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 142,
                  "column": 10
                },
                "end": {
                  "line": 145,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "y",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 147,
                  "column": 10
                },
                "end": {
                  "line": 150,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "scale",
              "description": "API Properties",
              "sourceRange": {
                "start": {
                  "line": 154,
                  "column": 10
                },
                "end": {
                  "line": 156,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "labels",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 157,
                  "column": 10
                },
                "end": {
                  "line": 159,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "cells",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 160,
                  "column": 10
                },
                "end": {
                  "line": 162,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "orient",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 163,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "ascending",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 167,
                  "column": 10
                },
                "end": {
                  "line": 169,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "shape",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 170,
                  "column": 10
                },
                "end": {
                  "line": 172,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "shape-width",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 173,
                  "column": 10
                },
                "end": {
                  "line": 175,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "shape-height",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 176,
                  "column": 10
                },
                "end": {
                  "line": 178,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "shape-radius",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 179,
                  "column": 10
                },
                "end": {
                  "line": 181,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "shape-padding",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 182,
                  "column": 10
                },
                "end": {
                  "line": 184,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "use-class",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 185,
                  "column": 10
                },
                "end": {
                  "line": 187,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "class-prefix",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 188,
                  "column": 10
                },
                "end": {
                  "line": 190,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "title",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 191,
                  "column": 10
                },
                "end": {
                  "line": 193,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "label-align",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 194,
                  "column": 10
                },
                "end": {
                  "line": 196,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "label-wrap",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 197,
                  "column": 10
                },
                "end": {
                  "line": 199,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "label-format",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 200,
                  "column": 10
                },
                "end": {
                  "line": 202,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "label-offset",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 203,
                  "column": 10
                },
                "end": {
                  "line": 205,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "label-delimiter",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 206,
                  "column": 10
                },
                "end": {
                  "line": 208,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "size-changed",
              "description": "Fired when the `size` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-legend",
          "mixins": [
            "MultiChart.mixin.SVGHelper",
            "MultiChart.mixin.Registerable",
            "MultiChart.mixin.DispatchSVG",
            "MultiChart.mixin.Resizable",
            "MultiChart.mixin.TrackHover",
            "MultiChart.mixin.Draw"
          ]
        },
        {
          "description": "## MultiSelector\n\n`<multi-selector>` is an element for selecting ranges or chart shapes.",
          "summary": "",
          "path": "helper/multi-selector.html",
          "properties": [
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerOrder",
              "type": "number | null | undefined",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.\n`multi-selector` need to be last in the list of registered items, so that we attach\nevents after all shapes are drawn.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 10
                },
                "end": {
                  "line": 66,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "defaultValue": "100"
            },
            {
              "name": "trackHover",
              "type": "boolean | null | undefined",
              "description": "`trackHover` set true if selector listen to mouseenter/mouseleave events and set hoveredItem accordingly.\nWhen true, this element also and fires `multi-mouseenter` and multi-mouseleave.",
              "privacy": "public",
              "sourceRange": {
                "file": "track-hover-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 25,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false",
              "inheritedFrom": "MultiChart.mixin.TrackHover"
            },
            {
              "name": "hovered",
              "type": "string | null | undefined",
              "description": "`hovered` the hovered item, tracked when `trackHover` is set to true.\nThis is usefull for instance when we want to highlight the legend being hovered",
              "privacy": "public",
              "sourceRange": {
                "file": "track-hover-mixin.html",
                "start": {
                  "line": 31,
                  "column": 10
                },
                "end": {
                  "line": 35,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "observer": "\"_observerHovered\"",
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.TrackHover"
            },
            {
              "name": "_hasSelection",
              "type": "?",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 138,
                  "column": 6
                },
                "end": {
                  "line": 140,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "attrForSelected",
              "type": "string | null | undefined",
              "description": "If you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 78,
                  "column": 10
                },
                "end": {
                  "line": 81,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"key\""
            },
            {
              "name": "selectedAttribute",
              "type": "string | null | undefined",
              "description": "The attribute to set on elements when selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 87,
                  "column": 10
                },
                "end": {
                  "line": 90,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"selected\""
            }
          ],
          "methods": [
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 53,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "postRemove",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 98,
                  "column": 6
                },
                "end": {
                  "line": 100,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 51,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "attachListeners",
              "description": "`attachListeners` listen to click, mouseenter and mouseleave and\nfires their respective `multi` events (`multi-tap`, `multi-mouse-enter` and `multi-mouse-leave`)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 106,
                  "column": 6
                },
                "end": {
                  "line": 116,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "detatchListeners",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 118,
                  "column": 6
                },
                "end": {
                  "line": 124,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "onMouseenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "track-hover-mixin.html",
                "start": {
                  "line": 58,
                  "column": 6
                },
                "end": {
                  "line": 61,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                },
                {
                  "name": "el"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.TrackHover"
            },
            {
              "name": "onMouseleave",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "track-hover-mixin.html",
                "start": {
                  "line": 63,
                  "column": 6
                },
                "end": {
                  "line": 66,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                },
                {
                  "name": "el"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.TrackHover"
            },
            {
              "name": "getKey",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 128,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ]
            },
            {
              "name": "_observerHovered",
              "description": "`_observerHoveredItem` add `.hovered` class to all items with same key as hovered",
              "privacy": "protected",
              "sourceRange": {
                "file": "track-hover-mixin.html",
                "start": {
                  "line": 75,
                  "column": 6
                },
                "end": {
                  "line": 83,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hovered"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.TrackHover"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 94,
                  "column": 6
                },
                "end": {
                  "line": 96,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "onClick",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 130,
                  "column": 6
                },
                "end": {
                  "line": 135,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                },
                {
                  "name": "el"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_updateSelected",
              "description": "`_updateSelected` will set `has-selection` attribute to svgHost.\nThis is used in multi-container-svg css rules.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 145,
                  "column": 6
                },
                "end": {
                  "line": 150,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 152,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiSelector",
          "attributes": [
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-order",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.\n`multi-selector` need to be last in the list of registered items, so that we attach\nevents after all shapes are drawn.",
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 10
                },
                "end": {
                  "line": 66,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "track-hover",
              "description": "`trackHover` set true if selector listen to mouseenter/mouseleave events and set hoveredItem accordingly.\nWhen true, this element also and fires `multi-mouseenter` and multi-mouseleave.",
              "sourceRange": {
                "file": "track-hover-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 25,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.TrackHover"
            },
            {
              "name": "hovered",
              "description": "`hovered` the hovered item, tracked when `trackHover` is set to true.\nThis is usefull for instance when we want to highlight the legend being hovered",
              "sourceRange": {
                "file": "track-hover-mixin.html",
                "start": {
                  "line": 31,
                  "column": 10
                },
                "end": {
                  "line": 35,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.TrackHover"
            },
            {
              "name": "attr-for-selected",
              "description": "If you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)",
              "sourceRange": {
                "start": {
                  "line": 78,
                  "column": 10
                },
                "end": {
                  "line": 81,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "selected-attribute",
              "description": "The attribute to set on elements when selected.",
              "sourceRange": {
                "start": {
                  "line": 87,
                  "column": 10
                },
                "end": {
                  "line": 90,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-selector",
          "mixins": [
            "MultiChart.mixin.DispatchSVG",
            "MultiChart.mixin.Registerable",
            "MultiChart.mixin.TrackHover"
          ]
        },
        {
          "description": "## MultiBrush\n\n`<multi-brush>` implements a brush selection as in  [d3-brush](https://github.com/d3/d3-brush)",
          "summary": "",
          "path": "helper/multi-brush.html",
          "properties": [
            {
              "name": "targetElement",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 177,
                  "column": 6
                },
                "end": {
                  "line": 179,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "selectedValues",
              "type": "Array | null | undefined",
              "description": "Gets or sets the selected elements. This is used instead of `selected` when `multi`\nis true.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 65,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "defaultValue": "[]"
            },
            {
              "name": "selectedItems",
              "type": "Array | null | undefined",
              "description": "Returns an array of currently selected items.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 70,
                  "column": 10
                },
                "end": {
                  "line": 77,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "defaultValue": "[]"
            },
            {
              "name": "brushType",
              "type": "string | null | undefined",
              "description": "`brushType` the type of selection,  either `brush`, `brushX`, `brushY`.\nWhen set to `brushX` (resp. `brusY`) the `xScale` (resp. `yScale`) scale must be set. for bidirectional brush (`brush`), both scales must be given.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 10
                },
                "end": {
                  "line": 86,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"brushX\""
            },
            {
              "name": "accessor",
              "type": "Function | null | undefined",
              "description": "`accessor` the accessor function to retrieve the key of selected items (it should be the xAccessor in coordinate-chart)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 91,
                  "column": 10
                },
                "end": {
                  "line": 98,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "xScale",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 103,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "yScale",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 105,
                  "column": 10
                },
                "end": {
                  "line": 108,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "brush",
              "type": "Function | null | undefined",
              "description": "`brush` brushing for mouse or touch event implementation [d3-brush](https://github.com/d3/d3-brush)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 114,
                  "column": 10
                },
                "end": {
                  "line": 117,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "extent",
              "type": "Array | null | undefined",
              "description": "`extent` extent of the brush",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 122,
                  "column": 10
                },
                "end": {
                  "line": 124,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "isSelecting",
              "type": "boolean | null | undefined",
              "description": "`isSelection` is true when a selection is being done (e.g. by brushing). The attribute is used for css rules.\nThis property is aimed at being bound to a multi-container-svg",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 130,
                  "column": 10
                },
                "end": {
                  "line": 135,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_observeIsSelecting\"",
                  "readOnly": true,
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "hasSelection",
              "type": "boolean | null | undefined",
              "description": "`hasSelection`  is true when a selection exists. The attribute is used for css rules.\nThis property is aimed at being bound to a multi-container-svg",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 141,
                  "column": 10
                },
                "end": {
                  "line": 146,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "observer": "\"_observeHasSelection\"",
                  "readOnly": true,
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "isRange",
              "type": "boolean | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 148,
                  "column": 10
                },
                "end": {
                  "line": 152,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "readOnly": true,
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "xContinuous",
              "type": "boolean | null | undefined",
              "description": "`xContinuous` indicate true if we have a `continuous` scale on X when the xScale is `ordinal` (e.g. a scaleBand for bar charts). If true a `xContinuousScale` is computed",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 156,
                  "column": 10
                },
                "end": {
                  "line": 158,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "xContinuousScale",
              "type": "Function | null | undefined",
              "description": "`xContinuousScale` the continuous scale to use when selecting ranges",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 163,
                  "column": 10
                },
                "end": {
                  "line": 168,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 172,
                  "column": 6
                },
                "end": {
                  "line": 175,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_observeIsSelecting",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 181,
                  "column": 6
                },
                "end": {
                  "line": 185,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "isSelecting"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_observeHasSelection",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 187,
                  "column": 6
                },
                "end": {
                  "line": 191,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hasSelection"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "clearSelection",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 193,
                  "column": 6
                },
                "end": {
                  "line": 200,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeExtent",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 202,
                  "column": 6
                },
                "end": {
                  "line": 207,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_computeBrush",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 209,
                  "column": 6
                },
                "end": {
                  "line": 230,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "brushType"
                },
                {
                  "name": "extent"
                }
              ]
            },
            {
              "name": "onMultiBrush",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 232,
                  "column": 6
                },
                "end": {
                  "line": 269,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "onMultiBrushStart",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 271,
                  "column": 6
                },
                "end": {
                  "line": 277,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "onMultiBrushEnd",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 279,
                  "column": 6
                },
                "end": {
                  "line": 287,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_refreshContiunousScale",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 289,
                  "column": 6
                },
                "end": {
                  "line": 303,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "scale"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_getEffectiveScale",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 305,
                  "column": 6
                },
                "end": {
                  "line": 320,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiBrush",
          "attributes": [
            {
              "name": "selected-values",
              "description": "Gets or sets the selected elements. This is used instead of `selected` when `multi`\nis true.",
              "sourceRange": {
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 65,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "selected-items",
              "description": "Returns an array of currently selected items.",
              "sourceRange": {
                "start": {
                  "line": 70,
                  "column": 10
                },
                "end": {
                  "line": 77,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "brush-type",
              "description": "`brushType` the type of selection,  either `brush`, `brushX`, `brushY`.\nWhen set to `brushX` (resp. `brusY`) the `xScale` (resp. `yScale`) scale must be set. for bidirectional brush (`brush`), both scales must be given.",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 10
                },
                "end": {
                  "line": 86,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "accessor",
              "description": "`accessor` the accessor function to retrieve the key of selected items (it should be the xAccessor in coordinate-chart)",
              "sourceRange": {
                "start": {
                  "line": 91,
                  "column": 10
                },
                "end": {
                  "line": 98,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "x-scale",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 103,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "y-scale",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 105,
                  "column": 10
                },
                "end": {
                  "line": 108,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "brush",
              "description": "`brush` brushing for mouse or touch event implementation [d3-brush](https://github.com/d3/d3-brush)",
              "sourceRange": {
                "start": {
                  "line": 114,
                  "column": 10
                },
                "end": {
                  "line": 117,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "extent",
              "description": "`extent` extent of the brush",
              "sourceRange": {
                "start": {
                  "line": 122,
                  "column": 10
                },
                "end": {
                  "line": 124,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "is-selecting",
              "description": "`isSelection` is true when a selection is being done (e.g. by brushing). The attribute is used for css rules.\nThis property is aimed at being bound to a multi-container-svg",
              "sourceRange": {
                "start": {
                  "line": 130,
                  "column": 10
                },
                "end": {
                  "line": 135,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "has-selection",
              "description": "`hasSelection`  is true when a selection exists. The attribute is used for css rules.\nThis property is aimed at being bound to a multi-container-svg",
              "sourceRange": {
                "start": {
                  "line": 141,
                  "column": 10
                },
                "end": {
                  "line": 146,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "is-range",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 148,
                  "column": 10
                },
                "end": {
                  "line": 152,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "x-continuous",
              "description": "`xContinuous` indicate true if we have a `continuous` scale on X when the xScale is `ordinal` (e.g. a scaleBand for bar charts). If true a `xContinuousScale` is computed",
              "sourceRange": {
                "start": {
                  "line": 156,
                  "column": 10
                },
                "end": {
                  "line": 158,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "x-continuous-scale",
              "description": "`xContinuousScale` the continuous scale to use when selecting ranges",
              "sourceRange": {
                "start": {
                  "line": 163,
                  "column": 10
                },
                "end": {
                  "line": 168,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "selected-values-changed",
              "description": "Fired when the `selectedValues` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "selected-items-changed",
              "description": "Fired when the `selectedItems` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "has-selection-changed",
              "description": "Fired when the `hasSelection` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "is-range-changed",
              "description": "Fired when the `isRange` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-brush"
        },
        {
          "description": "## D3Transition\n\n`<d3-transition>` a wrapper around d3.transition",
          "summary": "",
          "path": "d3-transition/d3-transition.html",
          "properties": [
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` a transition composer as per https://github.com/d3/d3-transition",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 30,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "duration",
              "type": "Function | null | undefined",
              "description": "[`duration`](https://github.com/d3/d3-transition#transition_duration) the duration of the transition in ms",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "delay",
              "type": "Function | null | undefined",
              "description": "[`delay`] (https://github.com/d3/d3-transition#transition_delay) the delay for the transition",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "ease",
              "type": "Function | null | undefined",
              "description": "`ease` : (https://github.com/d3/d3-transition#transition_ease) Specifies the transition easing function for all selected elements.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 61,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "pauseObserver",
              "description": "`pauserObserver` call this to cancel observeConfig to run",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 19,
                  "column": 6
                },
                "end": {
                  "line": 21,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "activateObserver",
              "description": "`activateObserver` make observer functions  active again",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 26,
                  "column": 6
                },
                "end": {
                  "line": 28,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "applyConfig",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 30,
                  "column": 6
                },
                "end": {
                  "line": 36,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                },
                {
                  "name": "properties"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "observeConfig",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 38,
                  "column": 6
                },
                "end": {
                  "line": 63,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                },
                {
                  "name": "name"
                },
                {
                  "name": "targetName"
                },
                {
                  "name": "eventName"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "observeConfigSplices",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 64,
                  "column": 6
                },
                "end": {
                  "line": 78,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "splice"
                },
                {
                  "name": "name"
                },
                {
                  "name": "targetName"
                },
                {
                  "name": "eventName"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 72,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.D3Transition",
          "attributes": [
            {
              "name": "transition",
              "description": "`transition` a transition composer as per https://github.com/d3/d3-transition",
              "sourceRange": {
                "start": {
                  "line": 30,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "duration",
              "description": "[`duration`](https://github.com/d3/d3-transition#transition_duration) the duration of the transition in ms",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "delay",
              "description": "[`delay`] (https://github.com/d3/d3-transition#transition_delay) the delay for the transition",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "ease",
              "description": "`ease` : (https://github.com/d3/d3-transition#transition_ease) Specifies the transition easing function for all selected elements.",
              "sourceRange": {
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 61,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "transition-changed",
              "description": "Fired when the `transition` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-transition",
          "mixins": [
            "MultiChart.mixin.ConfigHelper"
          ]
        },
        {
          "description": "## D3ShapeStack\n\n`<d3-shape-stack>` path generator for [d3-stack](https://github.com/d3/d3-shape#stack),",
          "summary": "",
          "path": "d3-shape/d3-shape-stack.html",
          "properties": [
            {
              "name": "shaper",
              "type": "Function | null | undefined",
              "description": "`shaper` the [stack](https://github.com/d3/d3-shape#satck) shaper function",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 32,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "keys",
              "type": "Array | null | undefined",
              "description": "[`keys`](https://github.com/d3/d3-shape#stack_keys)  - the keys accessors for the stack",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 44,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "valuePath",
              "type": "string | null | undefined",
              "description": "`valuePath` is specified, will generate an `value` accessor.\nFor instance `valuePath` = 'value' fill create a value accessor function `(d,key) => d.value[key]`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "value",
              "type": "Function | null | undefined",
              "description": "[`value`](https://github.com/d3/d3-shape#stack_value)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 61,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "order",
              "type": "Function | null | undefined",
              "description": "[`order`](https://github.com/d3/d3-shape#stack_order)  The order function for the stack.\nSee stack [orders](https://github.com/d3/d3-shape#stack-orders) for the built-in orders.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 69,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "offset",
              "type": "Function | null | undefined",
              "description": "[`offset`](https://github.com/d3/d3-shape#stack_offset)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 74,
                  "column": 10
                },
                "end": {
                  "line": 76,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [
            {
              "url": "index.html#multi-bar-demo",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.D3ShapeStack",
          "attributes": [
            {
              "name": "shaper",
              "description": "`shaper` the [stack](https://github.com/d3/d3-shape#satck) shaper function",
              "sourceRange": {
                "start": {
                  "line": 32,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "keys",
              "description": "[`keys`](https://github.com/d3/d3-shape#stack_keys)  - the keys accessors for the stack",
              "sourceRange": {
                "start": {
                  "line": 44,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "value-path",
              "description": "`valuePath` is specified, will generate an `value` accessor.\nFor instance `valuePath` = 'value' fill create a value accessor function `(d,key) => d.value[key]`",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "value",
              "description": "[`value`](https://github.com/d3/d3-shape#stack_value)",
              "sourceRange": {
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 61,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "order",
              "description": "[`order`](https://github.com/d3/d3-shape#stack_order)  The order function for the stack.\nSee stack [orders](https://github.com/d3/d3-shape#stack-orders) for the built-in orders.",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 69,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "offset",
              "description": "[`offset`](https://github.com/d3/d3-shape#stack_offset)",
              "sourceRange": {
                "start": {
                  "line": 74,
                  "column": 10
                },
                "end": {
                  "line": 76,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "shaper-changed",
              "description": "Fired when the `shaper` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-shape-stack"
        },
        {
          "description": "## MultiDrawableBar\n\n`<multi-drawable-bar>` draws bar as in https://github.com/d3/d3-shape#bar",
          "summary": "",
          "path": "drawable/multi-drawable-bar.html",
          "properties": [
            {
              "name": "shapeClass",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 97,
                  "column": 6
                },
                "end": {
                  "line": 99,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "shapeName",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 102,
                  "column": 6
                },
                "end": {
                  "line": 104,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "shaper",
              "type": "Function | null | undefined",
              "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "xAccessor",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "yAccessor",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 32,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "stacked",
              "type": "boolean | null | undefined",
              "description": "`stacked` if true, draw a stack chart, otherwise, default bar chart",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 11
                },
                "end": {
                  "line": 48,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"redraw\"",
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "keys",
              "type": "Array | null | undefined",
              "description": "[`keys`](https://github.com/d3/d3-shape#bar_keys)  - the keys accessors for the bar",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 53,
                  "column": 10
                },
                "end": {
                  "line": 56,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "valuePath",
              "type": "string | null | undefined",
              "description": "`valuePath` is specified, will generate an `value` accessor.\nFor instance `valuePath` = 'value' fill create a value accessor function `(d,key) => d.value[key]`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 61,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "value",
              "type": "Function | null | undefined",
              "description": "[`value`](https://github.com/d3/d3-shape#bar_value)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 68,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "order",
              "type": "Function | null | undefined",
              "description": "[`order`](https://github.com/d3/d3-shape#bar_order)  The order function for the bar.\nSee bar [orders](https://github.com/d3/d3-shape#bar-orders) for the built-in orders.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 76,
                  "column": 10
                },
                "end": {
                  "line": 78,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "offset",
              "type": "Function | null | undefined",
              "description": "[`offset`](https://github.com/d3/d3-shape#bar_offset)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 10
                },
                "end": {
                  "line": 85,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` used for resetting value domain.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 90,
                  "column": 10
                },
                "end": {
                  "line": 93,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"default\""
            }
          ],
          "methods": [
            {
              "name": "drawSerieElement",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 138,
                  "column": 6
                },
                "end": {
                  "line": 176,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "drawSerieGroup",
              "description": "`drawSerieGroup` builds one level of data  binding -> remove superfluous -> append new -> merge -> return chart\nWe can hence call this function for first grouping all keys and then build individual shapes (see multi-drawable-bubble)",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 59,
                  "column": 6
                },
                "end": {
                  "line": 79,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "shapeName"
                },
                {
                  "name": "shapeClass"
                },
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "draw",
              "description": "`draw` serie data, which are in the form of [{key, label, data: [dataValues]}]",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 84,
                  "column": 6
                },
                "end": {
                  "line": 91,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "shape",
              "description": "`shape` @override draw-mixin",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 109,
                  "column": 6
                },
                "end": {
                  "line": 136,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [
            {
              "url": "index.html#multi-bar-demo",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 4
            },
            "end": {
              "line": 177,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiDrawableBar",
          "attributes": [
            {
              "name": "shaper",
              "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "x-accessor",
              "description": "",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "y-accessor",
              "description": "",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 32,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "stacked",
              "description": "`stacked` if true, draw a stack chart, otherwise, default bar chart",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 11
                },
                "end": {
                  "line": 48,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "keys",
              "description": "[`keys`](https://github.com/d3/d3-shape#bar_keys)  - the keys accessors for the bar",
              "sourceRange": {
                "start": {
                  "line": 53,
                  "column": 10
                },
                "end": {
                  "line": 56,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "value-path",
              "description": "`valuePath` is specified, will generate an `value` accessor.\nFor instance `valuePath` = 'value' fill create a value accessor function `(d,key) => d.value[key]`",
              "sourceRange": {
                "start": {
                  "line": 61,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "value",
              "description": "[`value`](https://github.com/d3/d3-shape#bar_value)",
              "sourceRange": {
                "start": {
                  "line": 68,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "order",
              "description": "[`order`](https://github.com/d3/d3-shape#bar_order)  The order function for the bar.\nSee bar [orders](https://github.com/d3/d3-shape#bar-orders) for the built-in orders.",
              "sourceRange": {
                "start": {
                  "line": 76,
                  "column": 10
                },
                "end": {
                  "line": 78,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "offset",
              "description": "[`offset`](https://github.com/d3/d3-shape#bar_offset)",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 10
                },
                "end": {
                  "line": 85,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "group-name",
              "description": "`groupName` used for resetting value domain.",
              "sourceRange": {
                "start": {
                  "line": 90,
                  "column": 10
                },
                "end": {
                  "line": 93,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-drawable-bar",
          "mixins": [
            "MultiChart.mixin.MultiDrawableSerie",
            "MultiChart.mixin.D3ShapeCoordinate"
          ]
        },
        {
          "description": "## MultiDrawableLinePath\n\n`<multi-drawable-line-path>` draws a line in a single svg path element",
          "summary": "",
          "path": "drawable/multi-drawable-line-path.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerOrder",
              "type": "number | null | undefined",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "drawableData",
              "type": "?",
              "description": " \n`getDrawable` allows to specify which data to use for generating the chart.\nThis is usefull for multi-geo where chart is generated by topojson feature and not by raw data.\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "shallTransition",
              "type": "?",
              "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 162,
                  "column": 6
                },
                "end": {
                  "line": 165,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data`  to draw the chart from",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` a transition composer function",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` a way to filter data passed to draw method",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_verbose",
              "type": "?",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 35,
                  "column": 5
                },
                "end": {
                  "line": 37,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "verbose",
              "type": "boolean | null | undefined",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "logPrefix",
              "type": "string | null | undefined",
              "description": "`logPrefix`",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"[multi-chart]\"",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "targetElement",
              "type": "?",
              "description": "`targetElement` getter override lifecycle Behavior and called during attached\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 53,
                  "column": 6
                },
                "end": {
                  "line": 55,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 43,
                  "column": 11
                },
                "end": {
                  "line": 45,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "shaper",
              "type": "Function | null | undefined",
              "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 43,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 67,
                  "column": 4
                },
                "end": {
                  "line": 72,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called when the element is disconnected from DOM",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 184,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 53,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 172,
                  "column": 6
                },
                "end": {
                  "line": 175,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 79,
                  "column": 4
                },
                "end": {
                  "line": 81,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 83,
                  "column": 4
                },
                "end": {
                  "line": 88,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "setData",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 64,
                  "column": 6
                },
                "end": {
                  "line": 73,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "redraw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 75,
                  "column": 6
                },
                "end": {
                  "line": 79,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 81,
                  "column": 6
                },
                "end": {
                  "line": 84,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "shape",
              "description": "`shape` some charts are easier to draw is data is reshaped (for instance, stack chart)",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 89,
                  "column": 6
                },
                "end": {
                  "line": 91,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "render",
              "description": "`render` the rendering logic: predraw => shape => draw => postDraw\nif drawing is not successfull, `render` function is called again in 50ms, 4 additional time.",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 97,
                  "column": 6
                },
                "end": {
                  "line": 124,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "debounceRender",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 132,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "preDraw",
              "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 137,
                  "column": 6
                },
                "end": {
                  "line": 142,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 47,
                  "column": 6
                },
                "end": {
                  "line": 61,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "postDraw",
              "description": "`postDraw` set click/tap/mouseenter/mouseleave event.",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 154,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onMultiRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 167,
                  "column": 6
                },
                "end": {
                  "line": 170,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "applyTransition",
              "description": "`applyTransition`  applies a transition to chart",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 189,
                  "column": 6
                },
                "end": {
                  "line": 192,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onEndTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 194,
                  "column": 6
                },
                "end": {
                  "line": 194,
                  "column": 26
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_log",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 39,
                  "column": 5
                },
                "end": {
                  "line": 43,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_warn",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 45,
                  "column": 5
                },
                "end": {
                  "line": 49,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "_error",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 51,
                  "column": 5
                },
                "end": {
                  "line": 55,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args",
                  "rest": true
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "identity",
              "description": "helper functions",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 60,
                  "column": 7
                },
                "end": {
                  "line": 60,
                  "column": 30
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "indexAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 61,
                  "column": 7
                },
                "end": {
                  "line": 61,
                  "column": 38
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "keyAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 62,
                  "column": 7
                },
                "end": {
                  "line": 62,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "valueAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 63,
                  "column": 7
                },
                "end": {
                  "line": 63,
                  "column": 44
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "dataAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 64,
                  "column": 7
                },
                "end": {
                  "line": 64,
                  "column": 42
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "MultiChart.MultiDrawable",
          "name": "MultiChart.MultiDrawableLinePath",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-order",
              "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "../helper/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "../helper/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "data",
              "description": "`data`  to draw the chart from",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "description": "`transition` a transition composer function",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "description": "`filter` a way to filter data passed to draw method",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "verbose",
              "description": "`verbose`  If true, error messages will automatically be logged to the console.",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 21,
                  "column": 9
                },
                "end": {
                  "line": 23,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "log-prefix",
              "description": "`logPrefix`",
              "sourceRange": {
                "file": "../helper/logger-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Logger"
            },
            {
              "name": "key",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 43,
                  "column": 11
                },
                "end": {
                  "line": 45,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "shaper",
              "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
              "sourceRange": {
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 43,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-drawable-line-path"
        },
        {
          "description": "## MultiDrawableBubble\n\n`<multi-drawable-bubble>` draw bubbles from serie data",
          "summary": "",
          "path": "drawable/multi-drawable-bubble.html",
          "properties": [
            {
              "name": "shapeClass",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 6
                },
                "end": {
                  "line": 69,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "shapeName",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 71,
                  "column": 6
                },
                "end": {
                  "line": 73,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "shaper",
              "type": "Function | null | undefined",
              "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "xAccessor",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "yAccessor",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 32,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "z",
              "type": "Function | null | undefined",
              "description": "`z` calculating radius for all data point radius = z(d)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "zAccessor",
              "type": "Function | null | undefined",
              "description": "`zAccessor`  the accessor function for z data (circle radius)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 10
                },
                "end": {
                  "line": 50,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "zScale",
              "type": "Function | null | undefined",
              "description": "`zScale` scale function for z domain (circle radius)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 55,
                  "column": 10
                },
                "end": {
                  "line": 57,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "drawSerieElement",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 75,
                  "column": 6
                },
                "end": {
                  "line": 87,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "drawSerieGroup",
              "description": "`drawSerieGroup` builds one level of data  binding -> remove superfluous -> append new -> merge -> return chart\nWe can hence call this function for first grouping all keys and then build individual shapes (see multi-drawable-bubble)",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 59,
                  "column": 6
                },
                "end": {
                  "line": 79,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "shapeName"
                },
                {
                  "name": "shapeClass"
                },
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "draw",
              "description": "`draw` serie data, which are in the form of [{key, label, data: [dataValues]}]",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 84,
                  "column": 6
                },
                "end": {
                  "line": 91,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 24,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiDrawableBubble",
          "attributes": [
            {
              "name": "shaper",
              "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "x-accessor",
              "description": "",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "y-accessor",
              "description": "",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 32,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "z",
              "description": "`z` calculating radius for all data point radius = z(d)",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "z-accessor",
              "description": "`zAccessor`  the accessor function for z data (circle radius)",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 10
                },
                "end": {
                  "line": 50,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "z-scale",
              "description": "`zScale` scale function for z domain (circle radius)",
              "sourceRange": {
                "start": {
                  "line": 55,
                  "column": 10
                },
                "end": {
                  "line": 57,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-drawable-bubble",
          "mixins": [
            "MultiChart.mixin.MultiDrawableSerie",
            "MultiChart.mixin.D3ShapeCoordinate"
          ]
        }
      ]
    }
  ]
}
