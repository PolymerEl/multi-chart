{
  "schema_version": "1.0.0",
  "namespaces": [
    {
      "name": "MultiChart",
      "description": " ",
      "summary": "",
      "sourceRange": {
        "file": "drawable/multi-drawable-bubble.html",
        "start": {
          "line": 93,
          "column": 4
        },
        "end": {
          "line": 93,
          "column": 64
        }
      },
      "namespaces": [
        {
          "name": "MultiChart.mixin",
          "description": " ",
          "summary": "",
          "sourceRange": {
            "file": "drawable/multi-drawable-serie-mixin.html",
            "start": {
              "line": 101,
              "column": 2
            },
            "end": {
              "line": 101,
              "column": 58
            }
          },
          "mixins": [
            {
              "description": "##  ConfigHelper\n\nA helper to handle observers",
              "summary": "",
              "path": "helper/config-helper-mixin.html",
              "properties": [],
              "methods": [
                {
                  "name": "applyConfig",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 16,
                      "column": 6
                    },
                    "end": {
                      "line": 22,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "obj"
                    },
                    {
                      "name": "properties"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "observeConfig",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 24,
                      "column": 6
                    },
                    "end": {
                      "line": 42,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "name"
                    },
                    {
                      "name": "targetName"
                    },
                    {
                      "name": "eventName"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "observeConfigSplices",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 43,
                      "column": 6
                    },
                    "end": {
                      "line": 56,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "splice"
                    },
                    {
                      "name": "name"
                    },
                    {
                      "name": "targetName"
                    },
                    {
                      "name": "eventName"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "notifyChanged",
                  "description": "`notifyChanged` update the `changed` attribute of the `name` object.\nThis is used to propagate changes on Function properties that other element need to react on.\nFor instance, a setting a new scale in `d3-geo-projection` Function should trigger a redraw of the map.\nIn this case, we will have an observer like `observeProjection(projection.changed)`",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 64,
                      "column": 6
                    },
                    "end": {
                      "line": 66,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "name"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 68,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.ConfigHelper",
              "attributes": [],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  PolymerExtends\n\nallows to still use `this.fire` and `this.debounce`",
              "summary": "",
              "path": "helper/polymer-extends-mixin.html",
              "properties": [],
              "methods": [],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "line": 26,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.PolymerExtends",
              "attributes": [],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  SVGHelper\n\nA helper mixin for some SVG utility methods",
              "summary": "",
              "path": "helper/svg-helper-mixin.html",
              "properties": [],
              "methods": [
                {
                  "name": "translateCenter",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 16,
                      "column": 6
                    },
                    "end": {
                      "line": 18,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "w"
                    },
                    {
                      "name": "h"
                    }
                  ]
                },
                {
                  "name": "translate",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 20,
                      "column": 6
                    },
                    "end": {
                      "line": 22,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "x"
                    },
                    {
                      "name": "y"
                    }
                  ]
                },
                {
                  "name": "rotate",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 23,
                      "column": 6
                    },
                    "end": {
                      "line": 25,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "angle"
                    }
                  ]
                },
                {
                  "name": "svgScale",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 27,
                      "column": 6
                    },
                    "end": {
                      "line": 29,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "factor"
                    }
                  ]
                },
                {
                  "name": "matrix",
                  "description": "TODO",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 32,
                      "column": 6
                    },
                    "end": {
                      "line": 34,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "fitTo",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 51,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "source"
                    },
                    {
                      "name": "target"
                    },
                    {
                      "name": "factor"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 53,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.SVGHelper",
              "attributes": [],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  Registerable\n\nAllow component to be registerable by containters that will listen to `multi-register` event\n\n### Events\nFired when the component is attached so that container can register it",
              "summary": "",
              "path": "helper/registerable-mixin.html",
              "properties": [
                {
                  "name": "groupName",
                  "type": "string | null | undefined",
                  "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "String"
                    }
                  }
                },
                {
                  "name": "registerEventName",
                  "type": "string | null | undefined",
                  "description": "`registerEventName`  the name of the event to be used for registering",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 35,
                      "column": 10
                    },
                    "end": {
                      "line": 38,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "String"
                    }
                  },
                  "defaultValue": "\"multi-register\""
                }
              ],
              "methods": [
                {
                  "name": "connectedCallback",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 42,
                      "column": 6
                    },
                    "end": {
                      "line": 47,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "disconnectedCallback",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 49,
                      "column": 6
                    },
                    "end": {
                      "line": 52,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "postRemove",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 54,
                      "column": 6
                    },
                    "end": {
                      "line": 56,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 18,
                  "column": 2
                },
                "end": {
                  "line": 60,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.Registerable",
              "attributes": [
                {
                  "name": "group-name",
                  "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "string | null | undefined"
                },
                {
                  "name": "register-event-name",
                  "description": "`registerEventName`  the name of the event to be used for registering",
                  "sourceRange": {
                    "start": {
                      "line": 35,
                      "column": 10
                    },
                    "end": {
                      "line": 38,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "string | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  Draw\n\nhandles drawable drawing mechanism",
              "summary": "",
              "path": "drawable/draw-mixin.html",
              "properties": [
                {
                  "name": "shallTransition",
                  "type": "?",
                  "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 126,
                      "column": 6
                    },
                    "end": {
                      "line": 129,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "data",
                  "type": "Array | null | undefined",
                  "description": "`data`  to draw the chart from",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 22,
                      "column": 10
                    },
                    "end": {
                      "line": 24,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  }
                },
                {
                  "name": "transition",
                  "type": "Function | null | undefined",
                  "description": "`transition` a transition composer function",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 10
                    },
                    "end": {
                      "line": 36,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "filter",
                  "type": "Function | null | undefined",
                  "description": "`filter` a way to filter data passed to draw method",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 42,
                      "column": 11
                    },
                    "end": {
                      "line": 44,
                      "column": 14
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                }
              ],
              "methods": [
                {
                  "name": "ready",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 49,
                      "column": 6
                    },
                    "end": {
                      "line": 54,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "dataChanged",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 56,
                      "column": 6
                    },
                    "end": {
                      "line": 58,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "transition"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "render",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 60,
                      "column": 6
                    },
                    "end": {
                      "line": 89,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "transition"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "debouceRender",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 91,
                      "column": 6
                    },
                    "end": {
                      "line": 97,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "preDraw",
                  "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 102,
                      "column": 6
                    },
                    "end": {
                      "line": 107,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": []
                },
                {
                  "name": "draw",
                  "description": "`draw` this is where we work !",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 112,
                      "column": 6
                    },
                    "end": {
                      "line": 114,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "postDraw",
                  "description": "`postDraw` if some cleanup is needed",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 119,
                      "column": 6
                    },
                    "end": {
                      "line": 121,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "onMultiRefresh",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 131,
                      "column": 6
                    },
                    "end": {
                      "line": 134,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "e"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "onResize",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 136,
                      "column": 6
                    },
                    "end": {
                      "line": 139,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "postRemove",
                  "description": "`postRemove` is called when the element is disconnected from DOM",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 144,
                      "column": 6
                    },
                    "end": {
                      "line": 148,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "applyTransition",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 150,
                      "column": 6
                    },
                    "end": {
                      "line": 155,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "chart"
                    },
                    {
                      "name": "transition"
                    }
                  ]
                },
                {
                  "name": "onEndTransition",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 157,
                      "column": 6
                    },
                    "end": {
                      "line": 157,
                      "column": 26
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 159,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.Draw",
              "attributes": [
                {
                  "name": "data",
                  "description": "`data`  to draw the chart from",
                  "sourceRange": {
                    "start": {
                      "line": 22,
                      "column": 10
                    },
                    "end": {
                      "line": 24,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                },
                {
                  "name": "transition",
                  "description": "`transition` a transition composer function",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 10
                    },
                    "end": {
                      "line": 36,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "filter",
                  "description": "`filter` a way to filter data passed to draw method",
                  "sourceRange": {
                    "start": {
                      "line": 42,
                      "column": 11
                    },
                    "end": {
                      "line": 44,
                      "column": 14
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  Resizable\n\nhandles size and resizing",
              "summary": "",
              "path": "drawable/resizable-mixin.html",
              "properties": [
                {
                  "name": "container",
                  "type": "?",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 55,
                      "column": 5
                    },
                    "end": {
                      "line": 57,
                      "column": 6
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "containerWidth",
                  "type": "?",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 59,
                      "column": 5
                    },
                    "end": {
                      "line": 61,
                      "column": 6
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "containerHeight",
                  "type": "?",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 63,
                      "column": 5
                    },
                    "end": {
                      "line": 65,
                      "column": 6
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "width",
                  "type": "number | null | undefined",
                  "description": "`width`  of SVG host",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 26,
                      "column": 9
                    },
                    "end": {
                      "line": 29,
                      "column": 10
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true,
                      "attributeType": "Number"
                    }
                  }
                },
                {
                  "name": "height",
                  "type": "number | null | undefined",
                  "description": "`height` of SVG host",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 34,
                      "column": 9
                    },
                    "end": {
                      "line": 37,
                      "column": 10
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true,
                      "attributeType": "Number"
                    }
                  }
                },
                {
                  "name": "center",
                  "type": "Array | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 39,
                      "column": 9
                    },
                    "end": {
                      "line": 42,
                      "column": 10
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true,
                      "attributeType": "Array"
                    }
                  }
                },
                {
                  "name": "minSize",
                  "type": "number | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 44,
                      "column": 9
                    },
                    "end": {
                      "line": 47,
                      "column": 10
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true,
                      "attributeType": "Number"
                    }
                  }
                }
              ],
              "methods": [
                {
                  "name": "connectedCallback",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 67,
                      "column": 4
                    },
                    "end": {
                      "line": 73,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "onResize",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 75,
                      "column": 4
                    },
                    "end": {
                      "line": 78,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "e"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "_computeCenter",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 80,
                      "column": 4
                    },
                    "end": {
                      "line": 82,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "width"
                    },
                    {
                      "name": "height"
                    }
                  ]
                },
                {
                  "name": "_computeMinSize",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 84,
                      "column": 4
                    },
                    "end": {
                      "line": 89,
                      "column": 5
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "width"
                    },
                    {
                      "name": "height"
                    }
                  ]
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "line": 94,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.Resizable",
              "attributes": [
                {
                  "name": "width",
                  "description": "`width`  of SVG host",
                  "sourceRange": {
                    "start": {
                      "line": 26,
                      "column": 9
                    },
                    "end": {
                      "line": 29,
                      "column": 10
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                },
                {
                  "name": "height",
                  "description": "`height` of SVG host",
                  "sourceRange": {
                    "start": {
                      "line": 34,
                      "column": 9
                    },
                    "end": {
                      "line": 37,
                      "column": 10
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                },
                {
                  "name": "center",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 39,
                      "column": 9
                    },
                    "end": {
                      "line": 42,
                      "column": 10
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                },
                {
                  "name": "min-size",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 44,
                      "column": 9
                    },
                    "end": {
                      "line": 47,
                      "column": 10
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  DispatchSVG\n\ndispatch template elements marked as slot-svg=\"svgID\" to svgHost",
              "summary": "",
              "path": "drawable/dispatch-svg-mixin.html",
              "properties": [
                {
                  "name": "svgHost",
                  "type": "Object | null | undefined",
                  "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 23,
                      "column": 10
                    },
                    "end": {
                      "line": 26,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "observer": "\"observeSvgHost\"",
                      "attributeType": "Object"
                    }
                  }
                },
                {
                  "name": "_hostedNodes",
                  "type": "Object | null | undefined",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 10
                    },
                    "end": {
                      "line": 31,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Object"
                    }
                  },
                  "defaultValue": "{}"
                }
              ],
              "methods": [
                {
                  "name": "observeSvgHost",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 36,
                      "column": 6
                    },
                    "end": {
                      "line": 54,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "host"
                    },
                    {
                      "name": "old"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "afterRegister",
                  "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 57,
                      "column": 6
                    },
                    "end": {
                      "line": 59,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "host"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "afterUnregister",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 61,
                      "column": 6
                    },
                    "end": {
                      "line": 63,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "postRemove",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 65,
                      "column": 6
                    },
                    "end": {
                      "line": 70,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 13,
                  "column": 2
                },
                "end": {
                  "line": 73,
                  "column": 5
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.DispatchSVG",
              "attributes": [
                {
                  "name": "svg-host",
                  "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
                  "sourceRange": {
                    "start": {
                      "line": 23,
                      "column": 10
                    },
                    "end": {
                      "line": 26,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Object | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "## MultiRegister\n\nThe responsibility of this mixin is to observe nodes added to `#obseveNodes`.\nIt adds elements fireing a`multi-register to `_registeredItems` and elements\nfireing `multi-serie-register` to `_serieItems`.",
              "summary": "",
              "path": "container/multi-register-mixin.html",
              "properties": [
                {
                  "name": "_registeredItems",
                  "type": "Array | null | undefined",
                  "description": "`_registeredItems`  the list of registered items (registerable items)",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 10
                    },
                    "end": {
                      "line": 33,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  },
                  "defaultValue": "[]"
                },
                {
                  "name": "_serieItems",
                  "type": "Array | null | undefined",
                  "description": "`_serieItems`  the list of data serie. registered for this container. A serie is an element holding an accessor function for building\neasier to draw data set .",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 40,
                      "column": 10
                    },
                    "end": {
                      "line": 45,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  },
                  "defaultValue": "[]"
                },
                {
                  "name": "data",
                  "type": "Array | null | undefined",
                  "description": "`data` to display the chart",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 51,
                      "column": 10
                    },
                    "end": {
                      "line": 53,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  }
                },
                {
                  "name": "serieValueDomain",
                  "type": "Object | null | undefined",
                  "description": "`serieValueDomain` value domain for each serie groupName.\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 59,
                      "column": 10
                    },
                    "end": {
                      "line": 62,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Object"
                    }
                  }
                },
                {
                  "name": "serieOrdinalDomain",
                  "type": "Object | null | undefined",
                  "description": "`serieOrdinalDomain` ordinal domain for series",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 67,
                      "column": 11
                    },
                    "end": {
                      "line": 70,
                      "column": 12
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Object"
                    }
                  }
                },
                {
                  "name": "ordinalDomainMapper",
                  "type": "Function | null | undefined",
                  "description": "`ordinalDomainMapper` a mapper for serie ordinal valued. By default, identity function.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 75,
                      "column": 11
                    },
                    "end": {
                      "line": 80,
                      "column": 12
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "_multiData",
                  "type": "Array | null | undefined",
                  "description": "`_multiData` reshaped data to use internally within MultiChart.",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 86,
                      "column": 10
                    },
                    "end": {
                      "line": 88,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  }
                }
              ],
              "methods": [
                {
                  "name": "ready",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 99,
                      "column": 6
                    },
                    "end": {
                      "line": 104,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "_observeDataGenerators",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 106,
                      "column": 6
                    },
                    "end": {
                      "line": 131,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "_callDataChanged",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 133,
                      "column": 6
                    },
                    "end": {
                      "line": 137,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "splices"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "_registerItem",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 139,
                      "column": 6
                    },
                    "end": {
                      "line": 146,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "name"
                    },
                    {
                      "name": "item"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "_onMultiRegister",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 148,
                      "column": 6
                    },
                    "end": {
                      "line": 156,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "e"
                    },
                    {
                      "name": "d"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "_onMultiSerieRegister",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 158,
                      "column": 6
                    },
                    "end": {
                      "line": 161,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "e"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "_onRefresh",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 164,
                      "column": 6
                    },
                    "end": {
                      "line": 167,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "e"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "unregister",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 169,
                      "column": 6
                    },
                    "end": {
                      "line": 176,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "registered"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "shallNotify",
                  "description": "`shallNotify` should return true to actually render the component",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 181,
                      "column": 6
                    },
                    "end": {
                      "line": 183,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "data"
                    }
                  ]
                },
                {
                  "name": "callRegistered",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 185,
                      "column": 6
                    },
                    "end": {
                      "line": 195,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "methodName"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 15,
                  "column": 2
                },
                "end": {
                  "line": 199,
                  "column": 5
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.MultiRegister",
              "attributes": [
                {
                  "name": "data",
                  "description": "`data` to display the chart",
                  "sourceRange": {
                    "start": {
                      "line": 51,
                      "column": 10
                    },
                    "end": {
                      "line": 53,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                },
                {
                  "name": "serie-value-domain",
                  "description": "`serieValueDomain` value domain for each serie groupName.\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
                  "sourceRange": {
                    "start": {
                      "line": 59,
                      "column": 10
                    },
                    "end": {
                      "line": 62,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Object | null | undefined"
                },
                {
                  "name": "serie-ordinal-domain",
                  "description": "`serieOrdinalDomain` ordinal domain for series",
                  "sourceRange": {
                    "start": {
                      "line": 67,
                      "column": 11
                    },
                    "end": {
                      "line": 70,
                      "column": 12
                    }
                  },
                  "metadata": {},
                  "type": "Object | null | undefined"
                },
                {
                  "name": "ordinal-domain-mapper",
                  "description": "`ordinalDomainMapper` a mapper for serie ordinal valued. By default, identity function.",
                  "sourceRange": {
                    "start": {
                      "line": 75,
                      "column": 11
                    },
                    "end": {
                      "line": 80,
                      "column": 12
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  MultiChartProperty\n\nSmall mixing holding",
              "summary": "",
              "path": "chart/multi-chart-property-mixin.html",
              "properties": [
                {
                  "name": "data",
                  "type": "Array | null | undefined",
                  "description": "`data` to display the chart",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 22,
                      "column": 10
                    },
                    "end": {
                      "line": 24,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  }
                },
                {
                  "name": "transition",
                  "type": "Array | null | undefined",
                  "description": "`transition` to apply while drawing",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 10
                    },
                    "end": {
                      "line": 31,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  }
                }
              ],
              "methods": [],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "line": 35,
                  "column": 3
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.MultiChartProperty",
              "attributes": [
                {
                  "name": "data",
                  "description": "`data` to display the chart",
                  "sourceRange": {
                    "start": {
                      "line": 22,
                      "column": 10
                    },
                    "end": {
                      "line": 24,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                },
                {
                  "name": "transition",
                  "description": "`transition` to apply while drawing",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 10
                    },
                    "end": {
                      "line": 31,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  D3ScaleProperty\n\nProperties for d3-scale",
              "summary": "",
              "path": "d3-scale/d3-scale-property-mixin.html",
              "properties": [
                {
                  "name": "scaleType",
                  "type": "string | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 19,
                      "column": 10
                    },
                    "end": {
                      "line": 23,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "String"
                    }
                  },
                  "defaultValue": "\"scaleLinear\""
                },
                {
                  "name": "elastic",
                  "type": "boolean | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 25,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Boolean"
                    }
                  },
                  "defaultValue": "false"
                },
                {
                  "name": "domain",
                  "type": "Array | null | undefined",
                  "description": "`domain` domain for this scale. It will be recomputed when data changes",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 35,
                      "column": 10
                    },
                    "end": {
                      "line": 39,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Array"
                    }
                  }
                },
                {
                  "name": "accessor",
                  "type": "Function | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 41,
                      "column": 10
                    },
                    "end": {
                      "line": 44,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "range",
                  "type": "Array | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 46,
                      "column": 10
                    },
                    "end": {
                      "line": 49,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  }
                },
                {
                  "name": "padding",
                  "type": "number | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 51,
                      "column": 10
                    },
                    "end": {
                      "line": 54,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Number"
                    }
                  }
                },
                {
                  "name": "domainMin",
                  "type": "number | null | undefined",
                  "description": "`domainMin` if set, will be used as the min value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 59,
                      "column": 10
                    },
                    "end": {
                      "line": 62,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Number"
                    }
                  }
                },
                {
                  "name": "domainMax",
                  "type": "number | null | undefined",
                  "description": "`domainMax` if set, will be used as the max value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 67,
                      "column": 10
                    },
                    "end": {
                      "line": 70,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Number"
                    }
                  }
                }
              ],
              "methods": [],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 78,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.D3ScaleProperty",
              "attributes": [
                {
                  "name": "scale-type",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 19,
                      "column": 10
                    },
                    "end": {
                      "line": 23,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "string | null | undefined"
                },
                {
                  "name": "elastic",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 25,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "boolean | null | undefined"
                },
                {
                  "name": "domain",
                  "description": "`domain` domain for this scale. It will be recomputed when data changes",
                  "sourceRange": {
                    "start": {
                      "line": 35,
                      "column": 10
                    },
                    "end": {
                      "line": 39,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                },
                {
                  "name": "accessor",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 41,
                      "column": 10
                    },
                    "end": {
                      "line": 44,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "range",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 46,
                      "column": 10
                    },
                    "end": {
                      "line": 49,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                },
                {
                  "name": "padding",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 51,
                      "column": 10
                    },
                    "end": {
                      "line": 54,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                },
                {
                  "name": "domain-min",
                  "description": "`domainMin` if set, will be used as the min value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
                  "sourceRange": {
                    "start": {
                      "line": 59,
                      "column": 10
                    },
                    "end": {
                      "line": 62,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                },
                {
                  "name": "domain-max",
                  "description": "`domainMax` if set, will be used as the max value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
                  "sourceRange": {
                    "start": {
                      "line": 67,
                      "column": 10
                    },
                    "end": {
                      "line": 70,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "## AxisProperty\n\na mixin for constructing `top`, `left`, `bottom` and `right` properties",
              "summary": "",
              "path": "d3-axis/multi-axis-property-mixin.html",
              "properties": [],
              "methods": [],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 13,
                  "column": 1
                },
                "end": {
                  "line": 39,
                  "column": 3
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.AxisProperty",
              "attributes": [],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  D3ShapeCoordinate\n\nCoordinate properties (x and y)",
              "summary": "",
              "path": "d3-shape/d3-shape-coordinate-mixin.html",
              "properties": [
                {
                  "name": "x",
                  "type": "Function | null | undefined",
                  "description": "`x` the x accessor to be applied to the line generator",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 10
                    },
                    "end": {
                      "line": 24,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true,
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "xAccessor",
                  "type": "Function | null | undefined",
                  "description": "`xAccessor`  the accessor function for x data",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 10
                    },
                    "end": {
                      "line": 31,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "xScale",
                  "type": "Function | null | undefined",
                  "description": "`xScale`  scale function for x domain",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 36,
                      "column": 10
                    },
                    "end": {
                      "line": 38,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "y",
                  "type": "Function | null | undefined",
                  "description": "`y` the y accessor to be applied to the line generator",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 43,
                      "column": 10
                    },
                    "end": {
                      "line": 46,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true,
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "yAccessor",
                  "type": "Function | null | undefined",
                  "description": "`yAccessor`  the accessor function for y data",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 51,
                      "column": 10
                    },
                    "end": {
                      "line": 53,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "yScale",
                  "type": "Function | null | undefined",
                  "description": "`yScale`  scale function for y domain",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 58,
                      "column": 10
                    },
                    "end": {
                      "line": 60,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                }
              ],
              "methods": [
                {
                  "name": "computeDataAccessor",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 64,
                      "column": 6
                    },
                    "end": {
                      "line": 70,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "scale"
                    },
                    {
                      "name": "accessor"
                    }
                  ]
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 72,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.D3ShapeCoordinate",
              "attributes": [
                {
                  "name": "x",
                  "description": "`x` the x accessor to be applied to the line generator",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 10
                    },
                    "end": {
                      "line": 24,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "x-accessor",
                  "description": "`xAccessor`  the accessor function for x data",
                  "sourceRange": {
                    "start": {
                      "line": 29,
                      "column": 10
                    },
                    "end": {
                      "line": 31,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "x-scale",
                  "description": "`xScale`  scale function for x domain",
                  "sourceRange": {
                    "start": {
                      "line": 36,
                      "column": 10
                    },
                    "end": {
                      "line": 38,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "y",
                  "description": "`y` the y accessor to be applied to the line generator",
                  "sourceRange": {
                    "start": {
                      "line": 43,
                      "column": 10
                    },
                    "end": {
                      "line": 46,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "y-accessor",
                  "description": "`yAccessor`  the accessor function for y data",
                  "sourceRange": {
                    "start": {
                      "line": 51,
                      "column": 10
                    },
                    "end": {
                      "line": 53,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "y-scale",
                  "description": "`yScale`  scale function for y domain",
                  "sourceRange": {
                    "start": {
                      "line": 58,
                      "column": 10
                    },
                    "end": {
                      "line": 60,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  MultiDrawableSerie\n\na Mixin to implement generic draw function for seriest",
              "summary": "",
              "path": "drawable/multi-drawable-serie-mixin.html",
              "properties": [
                {
                  "name": "shapeClass",
                  "type": "?",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 41,
                      "column": 6
                    },
                    "end": {
                      "line": 44,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "shapeName",
                  "type": "?",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 46,
                      "column": 6
                    },
                    "end": {
                      "line": 48,
                      "column": 7
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "shaper",
                  "type": "Function | null | undefined",
                  "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 10
                    },
                    "end": {
                      "line": 23,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "xAccessor",
                  "type": "Function | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 25,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                },
                {
                  "name": "yAccessor",
                  "type": "Function | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 32,
                      "column": 10
                    },
                    "end": {
                      "line": 37,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Function"
                    }
                  }
                }
              ],
              "methods": [
                {
                  "name": "drawSerieElement",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 50,
                      "column": 6
                    },
                    "end": {
                      "line": 53,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "chart"
                    },
                    {
                      "name": "data"
                    }
                  ]
                },
                {
                  "name": "drawSerieGroup",
                  "description": "`drawSerieGroup` builds one level of data  binding -> remove superfluous -> append new -> merge -> return chart\nWe can hence call this function for first grouping all keys and then build individual shapes (see multi-drawable-bubble)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 59,
                      "column": 6
                    },
                    "end": {
                      "line": 79,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "shapeName"
                    },
                    {
                      "name": "shapeClass"
                    },
                    {
                      "name": "chart"
                    },
                    {
                      "name": "transition"
                    }
                  ]
                },
                {
                  "name": "draw",
                  "description": "`draw` serie data, which are in the form of [{key, label, data: [dataValues]}]",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 83,
                      "column": 6
                    },
                    "end": {
                      "line": 90,
                      "column": 7
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "data"
                    }
                  ]
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 92,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.MultiDrawableSerie",
              "attributes": [
                {
                  "name": "shaper",
                  "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 10
                    },
                    "end": {
                      "line": 23,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "x-accessor",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 25,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                },
                {
                  "name": "y-accessor",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 32,
                      "column": 10
                    },
                    "end": {
                      "line": 37,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Function | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            }
          ]
        }
      ],
      "elements": [
        {
          "description": "## MultiAccessor\n\n`<multi-accessor>` creates an accessor function from a String path",
          "summary": "",
          "path": "helper/multi-accessor.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1148,
                  "column": 8
                },
                "end": {
                  "line": 1148,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1150,
                  "column": 8
                },
                "end": {
                  "line": 1150,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1152,
                  "column": 8
                },
                "end": {
                  "line": 1152,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1154,
                  "column": 8
                },
                "end": {
                  "line": 1154,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1156,
                  "column": 8
                },
                "end": {
                  "line": 1156,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1158,
                  "column": 8
                },
                "end": {
                  "line": 1158,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1160,
                  "column": 8
                },
                "end": {
                  "line": 1160,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1162,
                  "column": 8
                },
                "end": {
                  "line": 1162,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1164,
                  "column": 8
                },
                "end": {
                  "line": 1164,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1166,
                  "column": 8
                },
                "end": {
                  "line": 1166,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1168,
                  "column": 8
                },
                "end": {
                  "line": 1168,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1170,
                  "column": 8
                },
                "end": {
                  "line": 1170,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1172,
                  "column": 8
                },
                "end": {
                  "line": 1172,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1174,
                  "column": 8
                },
                "end": {
                  "line": 1174,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1176,
                  "column": 8
                },
                "end": {
                  "line": 1176,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1178,
                  "column": 8
                },
                "end": {
                  "line": 1178,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1180,
                  "column": 8
                },
                "end": {
                  "line": 1180,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1182,
                  "column": 8
                },
                "end": {
                  "line": 1182,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1184,
                  "column": 8
                },
                "end": {
                  "line": 1184,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "PROPERTY_EFFECT_TYPES",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1187,
                  "column": 6
                },
                "end": {
                  "line": 1189,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 435,
                  "column": 8
                },
                "end": {
                  "line": 435,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 437,
                  "column": 8
                },
                "end": {
                  "line": 437,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 439,
                  "column": 8
                },
                "end": {
                  "line": 439,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 441,
                  "column": 8
                },
                "end": {
                  "line": 441,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate | HTMLElement | ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 443,
                  "column": 8
                },
                "end": {
                  "line": 443,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 445,
                  "column": 8
                },
                "end": {
                  "line": 445,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "accessor",
              "type": "Function | null | undefined",
              "description": "`accessor` the accessor function\nexample function : `d => {return +d.count}`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 10
                },
                "end": {
                  "line": 27,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "path",
              "type": "string | null | undefined",
              "description": "`path` the path from which tha accessor function is built\nFor instance `+count` will create `d => {return +d.count}` function.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 33,
                  "column": 10
                },
                "end": {
                  "line": 35,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "subPath",
              "type": "boolean | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2424,
                  "column": 6
                },
                "end": {
                  "line": 2449,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "Stamps the element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 553,
                  "column": 6
                },
                "end": {
                  "line": 559,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 460,
                  "column": 6
                },
                "end": {
                  "line": 493,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 342,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertiesChange",
              "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 356,
                  "column": 8
                },
                "end": {
                  "line": 358,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "true if changedProps is truthy"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 372,
                  "column": 8
                },
                "end": {
                  "line": 373,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 413,
                  "column": 8
                },
                "end": {
                  "line": 420,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                },
                {
                  "name": "namespace",
                  "type": "?string",
                  "description": "Attribute namespace."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 434,
                  "column": 8
                },
                "end": {
                  "line": 441,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 453,
                  "column": 8
                },
                "end": {
                  "line": 459,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 474,
                  "column": 8
                },
                "end": {
                  "line": 481,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 494,
                  "column": 8
                },
                "end": {
                  "line": 501,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string | undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 515,
                  "column": 8
                },
                "end": {
                  "line": 524,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1218,
                  "column": 6
                },
                "end": {
                  "line": 1222,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 193,
                  "column": 6
                },
                "end": {
                  "line": 198,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 300,
                  "column": 6
                },
                "end": {
                  "line": 302,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 311,
                  "column": 6
                },
                "end": {
                  "line": 313,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1256,
                  "column": 6
                },
                "end": {
                  "line": 1264,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1274,
                  "column": 6
                },
                "end": {
                  "line": 1280,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1291,
                  "column": 6
                },
                "end": {
                  "line": 1294,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1304,
                  "column": 6
                },
                "end": {
                  "line": 1306,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1316,
                  "column": 6
                },
                "end": {
                  "line": 1318,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1328,
                  "column": 6
                },
                "end": {
                  "line": 1330,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1340,
                  "column": 6
                },
                "end": {
                  "line": 1342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1374,
                  "column": 6
                },
                "end": {
                  "line": 1406,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(number | string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1429,
                  "column": 6
                },
                "end": {
                  "line": 1437,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1544,
                  "column": 6
                },
                "end": {
                  "line": 1549,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1570,
                  "column": 6
                },
                "end": {
                  "line": 1581,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1595,
                  "column": 6
                },
                "end": {
                  "line": 1608,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 571,
                  "column": 6
                },
                "end": {
                  "line": 580,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1637,
                  "column": 6
                },
                "end": {
                  "line": 1648,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1735,
                  "column": 6
                },
                "end": {
                  "line": 1745,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1756,
                  "column": 6
                },
                "end": {
                  "line": 1761,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1773,
                  "column": 6
                },
                "end": {
                  "line": 1778,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1810,
                  "column": 6
                },
                "end": {
                  "line": 1814,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1835,
                  "column": 6
                },
                "end": {
                  "line": 1837,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1860,
                  "column": 6
                },
                "end": {
                  "line": 1870,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1886,
                  "column": 6
                },
                "end": {
                  "line": 1895,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1910,
                  "column": 6
                },
                "end": {
                  "line": 1919,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1938,
                  "column": 6
                },
                "end": {
                  "line": 1975,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1990,
                  "column": 6
                },
                "end": {
                  "line": 1999,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2015,
                  "column": 6
                },
                "end": {
                  "line": 2023,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string | !Array.<(string | number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2038,
                  "column": 6
                },
                "end": {
                  "line": 2055,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2068,
                  "column": 6
                },
                "end": {
                  "line": 2075,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2089,
                  "column": 6
                },
                "end": {
                  "line": 2099,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2112,
                  "column": 6
                },
                "end": {
                  "line": 2118,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2129,
                  "column": 6
                },
                "end": {
                  "line": 2137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2148,
                  "column": 6
                },
                "end": {
                  "line": 2161,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2175,
                  "column": 6
                },
                "end": {
                  "line": 2181,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2358,
                  "column": 6
                },
                "end": {
                  "line": 2381,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2460,
                  "column": 6
                },
                "end": {
                  "line": 2481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 540,
                  "column": 6
                },
                "end": {
                  "line": 545,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "Called when the element is removed from a document",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 216,
                  "column": 6
                },
                "end": {
                  "line": 220,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 594,
                  "column": 6
                },
                "end": {
                  "line": 610,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.\n\nNote: This function does not support updating CSS mixins.\nYou can not dynamically change the value of an `@apply`.",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 633,
                  "column": 6
                },
                "end": {
                  "line": 637,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 654,
                  "column": 6
                },
                "end": {
                  "line": 659,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_observePath",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 48,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "subPath"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 670,
                  "column": 6
                },
                "end": {
                  "line": 673,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2500,
                  "column": 6
                },
                "end": {
                  "line": 2514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2592,
                  "column": 6
                },
                "end": {
                  "line": 2602,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2535,
                  "column": 6
                },
                "end": {
                  "line": 2576,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 326,
                  "column": 7
                },
                "end": {
                  "line": 330,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 181,
                  "column": 6
                },
                "end": {
                  "line": 184,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 129,
                  "column": 6
                },
                "end": {
                  "line": 134,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2221,
                  "column": 6
                },
                "end": {
                  "line": 2223,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2235,
                  "column": 6
                },
                "end": {
                  "line": 2237,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string | function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2252,
                  "column": 6
                },
                "end": {
                  "line": 2254,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2264,
                  "column": 6
                },
                "end": {
                  "line": 2266,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2284,
                  "column": 6
                },
                "end": {
                  "line": 2286,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2296,
                  "column": 6
                },
                "end": {
                  "line": 2298,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2314,
                  "column": 6
                },
                "end": {
                  "line": 2316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean | Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2330,
                  "column": 6
                },
                "end": {
                  "line": 2332,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2396,
                  "column": 6
                },
                "end": {
                  "line": 2402,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n\nThe default implementation uses a regular expression for best\nperformance. However, the regular expression uses a white-list of\nallowed characters in a data-binding, which causes problems for\ndata-bindings that do use characters not in this white-list.\n\nInstead of updating the white-list with all allowed characters,\nthere is a StrictBindingParser (see lib/mixins/strict-binding-parser)\nthat uses a state machine instead. This state machine is able to handle\nall characters. However, it is slightly less performant, therefore we\nextracted it into a separate optional mixin.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2648,
                  "column": 6
                },
                "end": {
                  "line": 2713,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2729,
                  "column": 6
                },
                "end": {
                  "line": 2746,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 129,
                  "column": 6
                },
                "end": {
                  "line": 138,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 294,
                  "column": 5
                },
                "end": {
                  "line": 317,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 343,
                  "column": 6
                },
                "end": {
                  "line": 348,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 505,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "../../polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 516,
                  "column": 6
                },
                "end": {
                  "line": 527,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 14,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "Polymer.Element",
          "name": "MultiChart.MultiAccessor",
          "attributes": [
            {
              "name": "accessor",
              "description": "`accessor` the accessor function\nexample function : `d => {return +d.count}`",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 10
                },
                "end": {
                  "line": 27,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "path",
              "description": "`path` the path from which tha accessor function is built\nFor instance `+count` will create `d => {return +d.count}` function.",
              "sourceRange": {
                "start": {
                  "line": 33,
                  "column": 10
                },
                "end": {
                  "line": 35,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "sub-path",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "accessor-changed",
              "description": "Fired when the `accessor` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-accessor"
        },
        {
          "description": "## D3Shape\n\n`<d3-shape>` a base class for creating d3-shape (https://github.com/d3/d3-shape)",
          "summary": "",
          "path": "d3-shape/d3-shape.html",
          "properties": [
            {
              "name": "shaper",
              "type": "Function | null | undefined",
              "description": "`shaper` the generator function - will be overriden in more specific subClass (e.g. pie, bar)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 31,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "applyConfig",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                },
                {
                  "name": "properties"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "observeConfig",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 24,
                  "column": 6
                },
                "end": {
                  "line": 42,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                },
                {
                  "name": "name"
                },
                {
                  "name": "targetName"
                },
                {
                  "name": "eventName"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "observeConfigSplices",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 43,
                  "column": 6
                },
                "end": {
                  "line": 56,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "splice"
                },
                {
                  "name": "name"
                },
                {
                  "name": "targetName"
                },
                {
                  "name": "eventName"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "notifyChanged",
              "description": "`notifyChanged` update the `changed` attribute of the `name` object.\nThis is used to propagate changes on Function properties that other element need to react on.\nFor instance, a setting a new scale in `d3-geo-projection` Function should trigger a redraw of the map.\nIn this case, we will have an observer like `observeProjection(projection.changed)`",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 64,
                  "column": 6
                },
                "end": {
                  "line": 66,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.D3Shape",
          "attributes": [
            {
              "name": "shaper",
              "description": "`shaper` the generator function - will be overriden in more specific subClass (e.g. pie, bar)",
              "sourceRange": {
                "start": {
                  "line": 31,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "shaper-changed",
              "description": "Fired when the `shaper` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-shape",
          "mixins": [
            "MultiChart.mixin.PolymerExtends",
            "MultiChart.mixin.ConfigHelper"
          ]
        },
        {
          "description": "## D3ShapePie\n\n`<d3-shape-pie>` a path generator for pie",
          "summary": "",
          "path": "d3-shape/d3-shape-pie.html",
          "properties": [
            {
              "name": "shaper",
              "type": "Function | null | undefined",
              "description": "`shaper` the [pie](https://github.com/d3/d3-shape#pie) shaper function",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 26,
                  "column": 10
                },
                "end": {
                  "line": 33,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "value",
              "type": "Function | null | undefined",
              "description": "`value` as in [value](https://github.com/d3/d3-shape#pie_value) to be applied to the pie. If not set by host, can be computed by providing a valuePath.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "padAngle",
              "type": "?",
              "description": "`padAngle` as in [padAngle](https://github.com/d3/d3-shape#pie_padAngle) to be applied to the pie.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            },
            {
              "name": "sort",
              "type": "Function | null | undefined",
              "description": "`sort` as in [sort](https://github.com/d3/d3-shape#pie_sort). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 55,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "defaultValue": "null"
            },
            {
              "name": "sortValues",
              "type": "Function | null | undefined",
              "description": "`sortValue` as in [sortValues](https://github.com/d3/d3-shape#pie_sortValues). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "defaultValue": "null"
            }
          ],
          "methods": [
            {
              "name": "applyConfig",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                },
                {
                  "name": "properties"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "observeConfig",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 24,
                  "column": 6
                },
                "end": {
                  "line": 42,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                },
                {
                  "name": "name"
                },
                {
                  "name": "targetName"
                },
                {
                  "name": "eventName"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "observeConfigSplices",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 43,
                  "column": 6
                },
                "end": {
                  "line": 56,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "splice"
                },
                {
                  "name": "name"
                },
                {
                  "name": "targetName"
                },
                {
                  "name": "eventName"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "notifyChanged",
              "description": "`notifyChanged` update the `changed` attribute of the `name` object.\nThis is used to propagate changes on Function properties that other element need to react on.\nFor instance, a setting a new scale in `d3-geo-projection` Function should trigger a redraw of the map.\nIn this case, we will have an observer like `observeProjection(projection.changed)`",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 64,
                  "column": 6
                },
                "end": {
                  "line": 66,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 17,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "MultiChart.D3Shape",
          "name": "MultiChart.D3ShapePie",
          "attributes": [
            {
              "name": "shaper",
              "description": "`shaper` the [pie](https://github.com/d3/d3-shape#pie) shaper function",
              "sourceRange": {
                "start": {
                  "line": 26,
                  "column": 10
                },
                "end": {
                  "line": 33,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "value",
              "description": "`value` as in [value](https://github.com/d3/d3-shape#pie_value) to be applied to the pie. If not set by host, can be computed by providing a valuePath.",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "pad-angle",
              "description": "`padAngle` as in [padAngle](https://github.com/d3/d3-shape#pie_padAngle) to be applied to the pie.",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {}
            },
            {
              "name": "sort",
              "description": "`sort` as in [sort](https://github.com/d3/d3-shape#pie_sort). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 55,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "sort-values",
              "description": "`sortValue` as in [sortValues](https://github.com/d3/d3-shape#pie_sortValues). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "shaper-changed",
              "description": "Fired when the `shaper` property changes.",
              "metadata": {},
              "inheritedFrom": "MultiChart.D3Shape"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-shape-pie"
        },
        {
          "description": "## MultiDrawable\n\n`<multi-drawable>` it a base Class for chart element that can be drawn (e.g. line, circle ...)",
          "summary": "",
          "path": "drawable/multi-drawable.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "shallTransition",
              "type": "?",
              "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 129,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data`  to draw the chart from",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` a transition composer function",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` a way to filter data passed to draw method",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "targetElement",
              "type": "?",
              "description": "`targetElement` getter override lifecycle Behavior and called during attached\n       ",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 50,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 40,
                  "column": 11
                },
                "end": {
                  "line": 42,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 67,
                  "column": 4
                },
                "end": {
                  "line": 73,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called when the element is disconnected from DOM",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 144,
                  "column": 6
                },
                "end": {
                  "line": 148,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 57,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 61,
                  "column": 6
                },
                "end": {
                  "line": 63,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 136,
                  "column": 6
                },
                "end": {
                  "line": 139,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 80,
                  "column": 4
                },
                "end": {
                  "line": 82,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 84,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "render",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 89,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "debouceRender",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 91,
                  "column": 6
                },
                "end": {
                  "line": 97,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "preDraw",
              "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 102,
                  "column": 6
                },
                "end": {
                  "line": 107,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "draw",
              "description": "`draw` this is where we work !",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 112,
                  "column": 6
                },
                "end": {
                  "line": 114,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "postDraw",
              "description": "`postDraw` if some cleanup is needed",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 119,
                  "column": 6
                },
                "end": {
                  "line": 121,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onMultiRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 131,
                  "column": 6
                },
                "end": {
                  "line": 134,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "applyTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 150,
                  "column": 6
                },
                "end": {
                  "line": 155,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onEndTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 157,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 26
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "identity",
              "description": "helper functions",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 57,
                  "column": 7
                },
                "end": {
                  "line": 57,
                  "column": 30
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ]
            },
            {
              "name": "indexAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 58,
                  "column": 7
                },
                "end": {
                  "line": 58,
                  "column": 38
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ]
            },
            {
              "name": "keyAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 59,
                  "column": 7
                },
                "end": {
                  "line": 59,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ]
            },
            {
              "name": "valueAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 7
                },
                "end": {
                  "line": 60,
                  "column": 44
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ]
            },
            {
              "name": "dataAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 61,
                  "column": 7
                },
                "end": {
                  "line": 61,
                  "column": 42
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 63,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiDrawable",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "data",
              "description": "`data`  to draw the chart from",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "description": "`transition` a transition composer function",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "description": "`filter` a way to filter data passed to draw method",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "key",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "sourceRange": {
                "start": {
                  "line": 40,
                  "column": 11
                },
                "end": {
                  "line": 42,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-drawable",
          "mixins": [
            "MultiChart.mixin.SVGHelper",
            "MultiChart.mixin.Registerable",
            "MultiChart.mixin.DispatchSVG",
            "MultiChart.mixin.Resizable",
            "MultiChart.mixin.Draw"
          ]
        },
        {
          "description": "## MultiDrawablePie\n\n`<multi-drawable-pie>` draws a pie",
          "summary": "",
          "path": "drawable/multi-drawable-pie.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "shallTransition",
              "type": "?",
              "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 129,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data`  to draw the chart from",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` a transition composer function",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` a way to filter data passed to draw method",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "targetElement",
              "type": "?",
              "description": "`targetElement` getter override lifecycle Behavior and called during attached\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 50,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 40,
                  "column": 11
                },
                "end": {
                  "line": 42,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "shapeClass",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 130,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "shapeName",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 131,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "shaper",
              "type": "Function | null | undefined",
              "description": "`shaper`  shaper function for generating a pie path ([pie](https://github.com/d3/d3-shape#pie))",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 10
                },
                "end": {
                  "line": 39,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "innerRadius",
              "type": "?",
              "description": "`innerRadius` the inner radius for the pie chart. It might be calculated by setting `radiusWidth` property",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 44,
                  "column": 10
                },
                "end": {
                  "line": 46,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            },
            {
              "name": "pieWidth",
              "type": "string | null | undefined",
              "description": "`pieWidth` a way to indicate the width of the radius (either in % or absolute value).\nIf set, inner radius will be inferred.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "outerRadius",
              "type": "Function | null | undefined",
              "description": "`outerRadius` the outer radius for the pie. Computed as half the max size of the chart.\nIt can be set as a Function :\n`function(d){return 20 + Math.sqrt(d.value)}`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 61,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "cornerRadius",
              "type": "number | null | undefined",
              "description": "`cornerRadius`corner radius for the arc as in [cornerRadius](https://github.com/d3/d3-shape#arc_cornerRadius)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 68,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            },
            {
              "name": "arc",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 73,
                  "column": 10
                },
                "end": {
                  "line": 76,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "sort",
              "type": "Function | null | undefined",
              "description": "`sort` as in [sort](https://github.com/d3/d3-shape#pie_sort). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 81,
                  "column": 10
                },
                "end": {
                  "line": 83,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "sortValues",
              "type": "Function | null | undefined",
              "description": "`sortValue` as in [sortValues](https://github.com/d3/d3-shape#pie_sortValues). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 88,
                  "column": 10
                },
                "end": {
                  "line": 90,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "accessor",
              "type": "Function | null | undefined",
              "description": "`accessor` function to get value from dataset (e.g. `d => +d.value.count`)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 95,
                  "column": 10
                },
                "end": {
                  "line": 97,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 67,
                  "column": 4
                },
                "end": {
                  "line": 73,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called when the element is disconnected from DOM",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 144,
                  "column": 6
                },
                "end": {
                  "line": 148,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 57,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 61,
                  "column": 6
                },
                "end": {
                  "line": 63,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 136,
                  "column": 6
                },
                "end": {
                  "line": 139,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 80,
                  "column": 4
                },
                "end": {
                  "line": 82,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 84,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "render",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 89,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "debouceRender",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 91,
                  "column": 6
                },
                "end": {
                  "line": 97,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "preDraw",
              "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 102,
                  "column": 6
                },
                "end": {
                  "line": 107,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 135,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "postDraw",
              "description": "`postDraw` if some cleanup is needed",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 119,
                  "column": 6
                },
                "end": {
                  "line": 121,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onMultiRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 131,
                  "column": 6
                },
                "end": {
                  "line": 134,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "applyTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 150,
                  "column": 6
                },
                "end": {
                  "line": 155,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onEndTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 157,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 26
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "identity",
              "description": "helper functions",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 57,
                  "column": 7
                },
                "end": {
                  "line": 57,
                  "column": 30
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "indexAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 58,
                  "column": 7
                },
                "end": {
                  "line": 58,
                  "column": 38
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "keyAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 59,
                  "column": 7
                },
                "end": {
                  "line": 59,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "valueAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 60,
                  "column": 7
                },
                "end": {
                  "line": 60,
                  "column": 44
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "dataAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 61,
                  "column": 7
                },
                "end": {
                  "line": 61,
                  "column": 42
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "_observeForRadius",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 108,
                  "column": 6
                },
                "end": {
                  "line": 112,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "minSize"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_observePieWidth",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 114,
                  "column": 6
                },
                "end": {
                  "line": 118,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "radius"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeArc",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 120,
                  "column": 6
                },
                "end": {
                  "line": 126,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "innerRadius"
                },
                {
                  "name": "outerRadius"
                },
                {
                  "name": "cornerRadius"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 4
            },
            "end": {
              "line": 198,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "MultiChart.MultiDrawable",
          "name": "MultiChart.MultiDrawablePie",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "data",
              "description": "`data`  to draw the chart from",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "description": "`transition` a transition composer function",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "description": "`filter` a way to filter data passed to draw method",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "key",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 40,
                  "column": 11
                },
                "end": {
                  "line": 42,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "shaper",
              "description": "`shaper`  shaper function for generating a pie path ([pie](https://github.com/d3/d3-shape#pie))",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 10
                },
                "end": {
                  "line": 39,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "inner-radius",
              "description": "`innerRadius` the inner radius for the pie chart. It might be calculated by setting `radiusWidth` property",
              "sourceRange": {
                "start": {
                  "line": 44,
                  "column": 10
                },
                "end": {
                  "line": 46,
                  "column": 11
                }
              },
              "metadata": {}
            },
            {
              "name": "pie-width",
              "description": "`pieWidth` a way to indicate the width of the radius (either in % or absolute value).\nIf set, inner radius will be inferred.",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "outer-radius",
              "description": "`outerRadius` the outer radius for the pie. Computed as half the max size of the chart.\nIt can be set as a Function :\n`function(d){return 20 + Math.sqrt(d.value)}`",
              "sourceRange": {
                "start": {
                  "line": 61,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "corner-radius",
              "description": "`cornerRadius`corner radius for the arc as in [cornerRadius](https://github.com/d3/d3-shape#arc_cornerRadius)",
              "sourceRange": {
                "start": {
                  "line": 68,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "arc",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 73,
                  "column": 10
                },
                "end": {
                  "line": 76,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "sort",
              "description": "`sort` as in [sort](https://github.com/d3/d3-shape#pie_sort). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "sourceRange": {
                "start": {
                  "line": 81,
                  "column": 10
                },
                "end": {
                  "line": 83,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "sort-values",
              "description": "`sortValue` as in [sortValues](https://github.com/d3/d3-shape#pie_sortValues). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "sourceRange": {
                "start": {
                  "line": 88,
                  "column": 10
                },
                "end": {
                  "line": 90,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "accessor",
              "description": "`accessor` function to get value from dataset (e.g. `d => +d.value.count`)",
              "sourceRange": {
                "start": {
                  "line": 95,
                  "column": 10
                },
                "end": {
                  "line": 97,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-drawable-pie"
        },
        {
          "description": "# MultiChartContainer\n\n`<multi-chart-base>` is a base element for buiding charts\n\n\n### Events\nFired when `multi-container-svg` is attached .",
          "summary": "",
          "path": "container/multi-container-svg.html",
          "properties": [
            {
              "name": "_registeredItems",
              "type": "Array | null | undefined",
              "description": "`_registeredItems`  the list of registered items (registerable items)",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 33,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "defaultValue": "[]",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_serieItems",
              "type": "Array | null | undefined",
              "description": "`_serieItems`  the list of data serie. registered for this container. A serie is an element holding an accessor function for building\neasier to draw data set .",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 40,
                  "column": 10
                },
                "end": {
                  "line": 45,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "defaultValue": "[]",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data` to display the chart",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 53,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "serieValueDomain",
              "type": "Object | null | undefined",
              "description": "`serieValueDomain` value domain for each serie groupName.\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 62,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "serieOrdinalDomain",
              "type": "Object | null | undefined",
              "description": "`serieOrdinalDomain` ordinal domain for series",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 67,
                  "column": 11
                },
                "end": {
                  "line": 70,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "ordinalDomainMapper",
              "type": "Function | null | undefined",
              "description": "`ordinalDomainMapper` a mapper for serie ordinal valued. By default, identity function.",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 75,
                  "column": 11
                },
                "end": {
                  "line": 80,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_multiData",
              "type": "Array | null | undefined",
              "description": "`_multiData` reshaped data to use internally within MultiChart.",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 86,
                  "column": 10
                },
                "end": {
                  "line": 88,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "margin",
              "type": "Object | null | undefined",
              "description": "`margin` applied to svg container (not css margin, wich can also be applied as per normal css rules)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 132,
                  "column": 10
                },
                "end": {
                  "line": 140,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{\"top\":10,\"right\":5,\"bottom\":10,\"left\":5}"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of the chart area. Equals actual width of component - margins",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 145,
                  "column": 10
                },
                "end": {
                  "line": 148,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height`  of the chart area. Equals actual height of component - margins",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 153,
                  "column": 10
                },
                "end": {
                  "line": 156,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 161,
                  "column": 10
                },
                "end": {
                  "line": 163,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 99,
                  "column": 6
                },
                "end": {
                  "line": 104,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_observeDataGenerators",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 106,
                  "column": 6
                },
                "end": {
                  "line": 131,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_callDataChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 133,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "splices"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_registerItem",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 139,
                  "column": 6
                },
                "end": {
                  "line": 146,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name"
                },
                {
                  "name": "item"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_onMultiRegister",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 148,
                  "column": 6
                },
                "end": {
                  "line": 156,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                },
                {
                  "name": "d"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_onMultiSerieRegister",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 158,
                  "column": 6
                },
                "end": {
                  "line": 161,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "_onRefresh",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 164,
                  "column": 6
                },
                "end": {
                  "line": 167,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "unregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 169,
                  "column": 6
                },
                "end": {
                  "line": 176,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "registered"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "shallNotify",
              "description": "`shallNotify` should return true to actually render the component",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 181,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "callRegistered",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 185,
                  "column": 6
                },
                "end": {
                  "line": 195,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "methodName"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 167,
                  "column": 6
                },
                "end": {
                  "line": 178,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 185,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 187,
                  "column": 6
                },
                "end": {
                  "line": 191,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiChartContainer",
          "attributes": [
            {
              "name": "data",
              "description": "`data` to display the chart",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 53,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "serie-value-domain",
              "description": "`serieValueDomain` value domain for each serie groupName.\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 62,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "serie-ordinal-domain",
              "description": "`serieOrdinalDomain` ordinal domain for series",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 67,
                  "column": 11
                },
                "end": {
                  "line": 70,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "ordinal-domain-mapper",
              "description": "`ordinalDomainMapper` a mapper for serie ordinal valued. By default, identity function.",
              "sourceRange": {
                "file": "multi-register-mixin.html",
                "start": {
                  "line": 75,
                  "column": 11
                },
                "end": {
                  "line": 80,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiRegister"
            },
            {
              "name": "margin",
              "description": "`margin` applied to svg container (not css margin, wich can also be applied as per normal css rules)",
              "sourceRange": {
                "start": {
                  "line": 132,
                  "column": 10
                },
                "end": {
                  "line": 140,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "width",
              "description": "`width`  of the chart area. Equals actual width of component - margins",
              "sourceRange": {
                "start": {
                  "line": 145,
                  "column": 10
                },
                "end": {
                  "line": 148,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "height",
              "description": "`height`  of the chart area. Equals actual height of component - margins",
              "sourceRange": {
                "start": {
                  "line": 153,
                  "column": 10
                },
                "end": {
                  "line": 156,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "start": {
                  "line": 161,
                  "column": 10
                },
                "end": {
                  "line": 163,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [
            {
              "description": "",
              "name": "header",
              "range": {
                "start": {
                  "line": 71,
                  "column": 4
                },
                "end": {
                  "line": 71,
                  "column": 31
                }
              }
            },
            {
              "description": "",
              "name": "",
              "range": {
                "start": {
                  "line": 73,
                  "column": 6
                },
                "end": {
                  "line": 73,
                  "column": 19
                }
              }
            },
            {
              "description": "",
              "name": "footer",
              "range": {
                "start": {
                  "line": 88,
                  "column": 4
                },
                "end": {
                  "line": 88,
                  "column": 31
                }
              }
            }
          ],
          "tagname": "multi-container-svg",
          "mixins": [
            "MultiChart.mixin.MultiRegister",
            "MultiChart.mixin.SVGHelper",
            "MultiChart.mixin.PolymerExtends"
          ]
        },
        {
          "description": "## MultiChartPie\n\n`<multi-chart-pie>` a simple Pie chart",
          "summary": "",
          "path": "chart/multi-chart-pie.html",
          "properties": [
            {
              "name": "innerRadius",
              "type": "?",
              "description": "`innerRadius` the inner radius for the pie chart. It might be calculated by setting `radiusWidth` property",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 10
                },
                "end": {
                  "line": 58,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            },
            {
              "name": "pieWidth",
              "type": "string | null | undefined",
              "description": "`pieWidth` a way to indicate the width of the radius (either in % or absolute value).\nIf set, inner radius will be inferred.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 64,
                  "column": 10
                },
                "end": {
                  "line": 66,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "outerRadius",
              "type": "Function | null | undefined",
              "description": "`outerRadius` the outer radius for the pie. Computed as half the max size of the chart.\nIt can be set as a Function :\n`function(d){return 20 + Math.sqrt(d.value)}`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 73,
                  "column": 10
                },
                "end": {
                  "line": 75,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "cornerRadius",
              "type": "number | null | undefined",
              "description": "`cornerRadius`corner radius for the arc as in [cornerRadius](https://github.com/d3/d3-shape#arc_cornerRadius)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 80,
                  "column": 10
                },
                "end": {
                  "line": 83,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            },
            {
              "name": "sort",
              "type": "Function | null | undefined",
              "description": "`sort` as in [sort](https://github.com/d3/d3-shape#pie_sort). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 88,
                  "column": 10
                },
                "end": {
                  "line": 90,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "sortValues",
              "type": "Function | null | undefined",
              "description": "`sortValue` as in [sortValues](https://github.com/d3/d3-shape#pie_sortValues). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 95,
                  "column": 10
                },
                "end": {
                  "line": 97,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "accessor",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 103,
                  "column": 10
                },
                "end": {
                  "line": 105,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [
            {
              "url": "demo/index.html",
              "description": "Chart Pie"
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiChartPie",
          "attributes": [
            {
              "name": "inner-radius",
              "description": "`innerRadius` the inner radius for the pie chart. It might be calculated by setting `radiusWidth` property",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 10
                },
                "end": {
                  "line": 58,
                  "column": 11
                }
              },
              "metadata": {}
            },
            {
              "name": "pie-width",
              "description": "`pieWidth` a way to indicate the width of the radius (either in % or absolute value).\nIf set, inner radius will be inferred.",
              "sourceRange": {
                "start": {
                  "line": 64,
                  "column": 10
                },
                "end": {
                  "line": 66,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "outer-radius",
              "description": "`outerRadius` the outer radius for the pie. Computed as half the max size of the chart.\nIt can be set as a Function :\n`function(d){return 20 + Math.sqrt(d.value)}`",
              "sourceRange": {
                "start": {
                  "line": 73,
                  "column": 10
                },
                "end": {
                  "line": 75,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "corner-radius",
              "description": "`cornerRadius`corner radius for the arc as in [cornerRadius](https://github.com/d3/d3-shape#arc_cornerRadius)",
              "sourceRange": {
                "start": {
                  "line": 80,
                  "column": 10
                },
                "end": {
                  "line": 83,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "sort",
              "description": "`sort` as in [sort](https://github.com/d3/d3-shape#pie_sort). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "sourceRange": {
                "start": {
                  "line": 88,
                  "column": 10
                },
                "end": {
                  "line": 90,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "sort-values",
              "description": "`sortValue` as in [sortValues](https://github.com/d3/d3-shape#pie_sortValues). It is null by default so as to render arcs in the provided order (same order as bound data)",
              "sourceRange": {
                "start": {
                  "line": 95,
                  "column": 10
                },
                "end": {
                  "line": 97,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "accessor",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 103,
                  "column": 10
                },
                "end": {
                  "line": 105,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [
            {
              "description": "",
              "name": "header",
              "range": {
                "start": {
                  "line": 15,
                  "column": 6
                },
                "end": {
                  "line": 15,
                  "column": 47
                }
              }
            },
            {
              "description": "",
              "name": "",
              "range": {
                "start": {
                  "line": 28,
                  "column": 6
                },
                "end": {
                  "line": 28,
                  "column": 19
                }
              }
            },
            {
              "description": "",
              "name": "footer",
              "range": {
                "start": {
                  "line": 29,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 47
                }
              }
            }
          ],
          "tagname": "multi-chart-pie"
        },
        {
          "description": "## MultiScale\n\n`<d3-scale->` d3-scale component wrapper",
          "summary": "",
          "path": "d3-scale/d3-scale.html",
          "properties": [
            {
              "name": "scaleType",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 19,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"scaleLinear\"",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "elastic",
              "type": "boolean | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domain",
              "type": "Array | null | undefined",
              "description": "`domain` domain for this scale. It will be recomputed when data changes",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 39,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "accessor",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 44,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "range",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 46,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "padding",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domainMin",
              "type": "number | null | undefined",
              "description": "`domainMin` if set, will be used as the min value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 62,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domainMax",
              "type": "number | null | undefined",
              "description": "`domainMax` if set, will be used as the max value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "scale",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 32,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "readOnly": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "_effectiveDomain",
              "type": "Array | null | undefined",
              "description": "`_effectiveDomain` needed to reflect domain change to associated scale.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 44,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "pretendContinuous",
              "type": "boolean | null | undefined",
              "description": "`pretendContinuous` set true to force ordinal scale into continuous range",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 49,
                  "column": 10
                },
                "end": {
                  "line": 51,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "family",
              "type": "string | null | undefined",
              "description": "`family` inferred by scaleType.\nOne of `continuous`, `sequential`, `quantize`, `quantile`, `threshold`, `ordinal`,",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 57,
                  "column": 10
                },
                "end": {
                  "line": 61,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "readOnly": true,
                  "attributeType": "String"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "applyConfig",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                },
                {
                  "name": "properties"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "observeConfig",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 24,
                  "column": 6
                },
                "end": {
                  "line": 42,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                },
                {
                  "name": "name"
                },
                {
                  "name": "targetName"
                },
                {
                  "name": "eventName"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "observeConfigSplices",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 43,
                  "column": 6
                },
                "end": {
                  "line": 56,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "splice"
                },
                {
                  "name": "name"
                },
                {
                  "name": "targetName"
                },
                {
                  "name": "eventName"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "notifyChanged",
              "description": "`notifyChanged` update the `changed` attribute of the `name` object.\nThis is used to propagate changes on Function properties that other element need to react on.\nFor instance, a setting a new scale in `d3-geo-projection` Function should trigger a redraw of the map.\nIn this case, we will have an observer like `observeProjection(projection.changed)`",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/config-helper-mixin.html",
                "start": {
                  "line": 64,
                  "column": 6
                },
                "end": {
                  "line": 66,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.ConfigHelper"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 75,
                  "column": 6
                },
                "end": {
                  "line": 86,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_observeDomainMinMax",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 88,
                  "column": 6
                },
                "end": {
                  "line": 95,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "min"
                },
                {
                  "name": "max"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeDomain",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 97,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "force"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeScale",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 139,
                  "column": 6
                },
                "end": {
                  "line": 146,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "type"
                }
              ]
            },
            {
              "name": "_computeEffectiveDomain",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 148,
                  "column": 6
                },
                "end": {
                  "line": 155,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "domain"
                },
                {
                  "name": "family"
                }
              ]
            },
            {
              "name": "_computeFamily",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 157,
                  "column": 6
                },
                "end": {
                  "line": 185,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "type"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 22,
              "column": 4
            },
            "end": {
              "line": 186,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiScale",
          "attributes": [
            {
              "name": "scale-type",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 19,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "elastic",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domain",
              "description": "`domain` domain for this scale. It will be recomputed when data changes",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 39,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "accessor",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 44,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "range",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 46,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "padding",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domain-min",
              "description": "`domainMin` if set, will be used as the min value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 62,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domain-max",
              "description": "`domainMax` if set, will be used as the max value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "scale",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 32,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "pretend-continuous",
              "description": "`pretendContinuous` set true to force ordinal scale into continuous range",
              "sourceRange": {
                "start": {
                  "line": 49,
                  "column": 10
                },
                "end": {
                  "line": 51,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "family",
              "description": "`family` inferred by scaleType.\nOne of `continuous`, `sequential`, `quantize`, `quantile`, `threshold`, `ordinal`,",
              "sourceRange": {
                "start": {
                  "line": 57,
                  "column": 10
                },
                "end": {
                  "line": 61,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "scale-changed",
              "description": "Fired when the `scale` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "family-changed",
              "description": "Fired when the `family` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-scale",
          "mixins": [
            "MultiChart.mixin.Registerable",
            "MultiChart.mixin.ConfigHelper",
            "MultiChart.mixin.D3ScaleProperty"
          ]
        },
        {
          "description": "## D3Axis\n\n`<d3-axis>` a wrapper for d3-axis",
          "summary": "",
          "path": "d3-axis/d3-axis.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "shallTransition",
              "type": "?",
              "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 129,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data`  to draw the chart from",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` a transition composer function",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` a way to filter data passed to draw method",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "targetElement",
              "type": "?",
              "description": "`targetElement` getter override lifecycle Behavior and called during attached\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 50,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 40,
                  "column": 11
                },
                "end": {
                  "line": 42,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "type": "Function | null | undefined",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 42,
                  "column": 10
                },
                "end": {
                  "line": 45,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "scale",
              "type": "Function | null | undefined",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 53,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "range",
              "type": "Array | null | undefined",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "_x",
              "type": "number | null | undefined",
              "description": "`_x` x translation for the axis. is set depending on position and height",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 68,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            },
            {
              "name": "_y",
              "type": "number | null | undefined",
              "description": "`_y` y translation for the axis. is set depending on position and width",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 76,
                  "column": 10
                },
                "end": {
                  "line": 79,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            },
            {
              "name": "text",
              "type": "string | null | undefined",
              "description": "`text` text for the axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 84,
                  "column": 10
                },
                "end": {
                  "line": 87,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "xText",
              "type": "number | null | undefined",
              "description": "`xText` value to be set to the axisText x attribute",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 92,
                  "column": 10
                },
                "end": {
                  "line": 95,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "yText",
              "type": "number | null | undefined",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 104,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            },
            {
              "name": "dx",
              "type": "string | null | undefined",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 109,
                  "column": 10
                },
                "end": {
                  "line": 112,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "dy",
              "type": "string | null | undefined",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 117,
                  "column": 10
                },
                "end": {
                  "line": 120,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "textAngle",
              "type": "number | null | undefined",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 129,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            },
            {
              "name": "ticks",
              "type": "Array | null | undefined",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 138,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "tickFormat",
              "type": "string | null | undefined",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 148,
                  "column": 11
                },
                "end": {
                  "line": 151,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "position",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 153,
                  "column": 10
                },
                "end": {
                  "line": 158,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "TODO(cg): Review if this is usefull ?.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 170,
                  "column": 6
                },
                "end": {
                  "line": 173,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called when the element is disconnected from DOM",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 144,
                  "column": 6
                },
                "end": {
                  "line": 148,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 57,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 61,
                  "column": 6
                },
                "end": {
                  "line": 63,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 136,
                  "column": 6
                },
                "end": {
                  "line": 139,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 80,
                  "column": 4
                },
                "end": {
                  "line": 82,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 84,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "render",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 89,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "debouceRender",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 91,
                  "column": 6
                },
                "end": {
                  "line": 97,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "preDraw",
              "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 102,
                  "column": 6
                },
                "end": {
                  "line": 107,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 201,
                  "column": 6
                },
                "end": {
                  "line": 210,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "postDraw",
              "description": "`postDraw` if some cleanup is needed",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 119,
                  "column": 6
                },
                "end": {
                  "line": 121,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onMultiRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 131,
                  "column": 6
                },
                "end": {
                  "line": 134,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "applyTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 150,
                  "column": 6
                },
                "end": {
                  "line": 155,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onEndTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 157,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 26
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "identity",
              "description": "helper functions",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 57,
                  "column": 7
                },
                "end": {
                  "line": 57,
                  "column": 30
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "indexAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 58,
                  "column": 7
                },
                "end": {
                  "line": 58,
                  "column": 38
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "keyAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 59,
                  "column": 7
                },
                "end": {
                  "line": 59,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "valueAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 60,
                  "column": 7
                },
                "end": {
                  "line": 60,
                  "column": 44
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "dataAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 61,
                  "column": 7
                },
                "end": {
                  "line": 61,
                  "column": 42
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "computeAxis",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 175,
                  "column": 6
                },
                "end": {
                  "line": 177,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "observeTicks",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 179,
                  "column": 6
                },
                "end": {
                  "line": 188,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "ticks"
                }
              ]
            },
            {
              "name": "observeTickFormat",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 190,
                  "column": 6
                },
                "end": {
                  "line": 199,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "format"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "MultiChart.MultiDrawable",
          "name": "MultiChart.D3Axis",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "data",
              "description": "`data`  to draw the chart from",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "description": "`transition` a transition composer function",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "description": "`filter` a way to filter data passed to draw method",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "key",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 40,
                  "column": 11
                },
                "end": {
                  "line": 42,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "sourceRange": {
                "start": {
                  "line": 42,
                  "column": 10
                },
                "end": {
                  "line": 45,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "scale",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "sourceRange": {
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 53,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "range",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "text",
              "description": "`text` text for the axis",
              "sourceRange": {
                "start": {
                  "line": 84,
                  "column": 10
                },
                "end": {
                  "line": 87,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "x-text",
              "description": "`xText` value to be set to the axisText x attribute",
              "sourceRange": {
                "start": {
                  "line": 92,
                  "column": 10
                },
                "end": {
                  "line": 95,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "y-text",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "sourceRange": {
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 104,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "dx",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "sourceRange": {
                "start": {
                  "line": 109,
                  "column": 10
                },
                "end": {
                  "line": 112,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "dy",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "sourceRange": {
                "start": {
                  "line": 117,
                  "column": 10
                },
                "end": {
                  "line": 120,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "text-angle",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "sourceRange": {
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 129,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "ticks",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "sourceRange": {
                "start": {
                  "line": 138,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "tick-format",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "sourceRange": {
                "start": {
                  "line": 148,
                  "column": 11
                },
                "end": {
                  "line": 151,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "position",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 153,
                  "column": 10
                },
                "end": {
                  "line": 158,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "range-changed",
              "description": "Fired when the `range` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-axis"
        },
        {
          "description": "## D3TopAxis\n\n`<d3-axis-top>` a drawable top axis",
          "summary": "",
          "path": "d3-axis/d3-axis-top.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "shallTransition",
              "type": "?",
              "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 129,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data`  to draw the chart from",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` a transition composer function",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` a way to filter data passed to draw method",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "targetElement",
              "type": "?",
              "description": "`targetElement` getter override lifecycle Behavior and called during attached\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 50,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 40,
                  "column": 11
                },
                "end": {
                  "line": 42,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "type": "Function | null | undefined",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 42,
                  "column": 10
                },
                "end": {
                  "line": 45,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "scale",
              "type": "Function | null | undefined",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 53,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "range",
              "type": "Array | null | undefined",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "_x",
              "type": "number | null | undefined",
              "description": "`_x` x translation for the axis. is set depending on position and height",
              "privacy": "protected",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 68,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "_y",
              "type": "number | null | undefined",
              "description": "`_y` y translation for the axis. is set depending on position and width",
              "privacy": "protected",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 76,
                  "column": 10
                },
                "end": {
                  "line": 79,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text",
              "type": "string | null | undefined",
              "description": "`text` text for the axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 84,
                  "column": 10
                },
                "end": {
                  "line": 87,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "xText",
              "type": "number | null | undefined",
              "description": "`xText` value to be set to the axisText x attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 92,
                  "column": 10
                },
                "end": {
                  "line": 95,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "yText",
              "type": "number | null | undefined",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 104,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dx",
              "type": "string | null | undefined",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 109,
                  "column": 10
                },
                "end": {
                  "line": 112,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dy",
              "type": "string | null | undefined",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 117,
                  "column": 10
                },
                "end": {
                  "line": 120,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "textAngle",
              "type": "number | null | undefined",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 129,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "ticks",
              "type": "Array | null | undefined",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 138,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "tickFormat",
              "type": "string | null | undefined",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 148,
                  "column": 11
                },
                "end": {
                  "line": 151,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "position",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 153,
                  "column": 10
                },
                "end": {
                  "line": 158,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "TODO(cg): Review if this is usefull ?.",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 170,
                  "column": 6
                },
                "end": {
                  "line": 173,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called when the element is disconnected from DOM",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 144,
                  "column": 6
                },
                "end": {
                  "line": 148,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 57,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 61,
                  "column": 6
                },
                "end": {
                  "line": 63,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 28,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 80,
                  "column": 4
                },
                "end": {
                  "line": 82,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 84,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "render",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 89,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "debouceRender",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 91,
                  "column": 6
                },
                "end": {
                  "line": 97,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "preDraw",
              "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 102,
                  "column": 6
                },
                "end": {
                  "line": 107,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 201,
                  "column": 6
                },
                "end": {
                  "line": 210,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "postDraw",
              "description": "`postDraw` if some cleanup is needed",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 119,
                  "column": 6
                },
                "end": {
                  "line": 121,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onMultiRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 131,
                  "column": 6
                },
                "end": {
                  "line": 134,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "applyTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 150,
                  "column": 6
                },
                "end": {
                  "line": 155,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onEndTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 157,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 26
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "identity",
              "description": "helper functions",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 57,
                  "column": 7
                },
                "end": {
                  "line": 57,
                  "column": 30
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "indexAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 58,
                  "column": 7
                },
                "end": {
                  "line": 58,
                  "column": 38
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "keyAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 59,
                  "column": 7
                },
                "end": {
                  "line": 59,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "valueAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 60,
                  "column": 7
                },
                "end": {
                  "line": 60,
                  "column": 44
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "dataAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 61,
                  "column": 7
                },
                "end": {
                  "line": 61,
                  "column": 42
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "computeAxis",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 6
                },
                "end": {
                  "line": 26,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "scale"
                }
              ]
            },
            {
              "name": "observeTicks",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 179,
                  "column": 6
                },
                "end": {
                  "line": 188,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "ticks"
                }
              ],
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "observeTickFormat",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 190,
                  "column": 6
                },
                "end": {
                  "line": 199,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "format"
                }
              ],
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 35,
              "column": 3
            }
          },
          "privacy": "public",
          "superclass": "MultiChart.D3Axis",
          "name": "MultiChart.D3TopAxis",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "data",
              "description": "`data`  to draw the chart from",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "description": "`transition` a transition composer function",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "description": "`filter` a way to filter data passed to draw method",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "key",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 40,
                  "column": 11
                },
                "end": {
                  "line": 42,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 42,
                  "column": 10
                },
                "end": {
                  "line": 45,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "scale",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 53,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "range",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text",
              "description": "`text` text for the axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 84,
                  "column": 10
                },
                "end": {
                  "line": 87,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "x-text",
              "description": "`xText` value to be set to the axisText x attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 92,
                  "column": 10
                },
                "end": {
                  "line": 95,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "y-text",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 104,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dx",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 109,
                  "column": 10
                },
                "end": {
                  "line": 112,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dy",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 117,
                  "column": 10
                },
                "end": {
                  "line": 120,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text-angle",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 129,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "ticks",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 138,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "tick-format",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 148,
                  "column": 11
                },
                "end": {
                  "line": 151,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "position",
              "description": "",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 153,
                  "column": 10
                },
                "end": {
                  "line": 158,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "range-changed",
              "description": "Fired when the `range` property changes.",
              "metadata": {},
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-axis-top"
        },
        {
          "description": "## D3RightAxis\n\n`<d3-axis-right>` a drawable right axis",
          "summary": "",
          "path": "d3-axis/d3-axis-right.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "shallTransition",
              "type": "?",
              "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 129,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data`  to draw the chart from",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` a transition composer function",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` a way to filter data passed to draw method",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "targetElement",
              "type": "?",
              "description": "`targetElement` getter override lifecycle Behavior and called during attached\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 50,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 40,
                  "column": 11
                },
                "end": {
                  "line": 42,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "type": "Function | null | undefined",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 42,
                  "column": 10
                },
                "end": {
                  "line": 45,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "scale",
              "type": "Function | null | undefined",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 53,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "range",
              "type": "Array | null | undefined",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "_x",
              "type": "number | null | undefined",
              "description": "`_x` x translation for the axis. is set depending on position and height",
              "privacy": "protected",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 68,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "_y",
              "type": "number | null | undefined",
              "description": "`_y` y translation for the axis. is set depending on position and width",
              "privacy": "protected",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 76,
                  "column": 10
                },
                "end": {
                  "line": 79,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text",
              "type": "string | null | undefined",
              "description": "`text` text for the axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 84,
                  "column": 10
                },
                "end": {
                  "line": 87,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "xText",
              "type": "number | null | undefined",
              "description": "`xText` value to be set to the axisText x attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 92,
                  "column": 10
                },
                "end": {
                  "line": 95,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "yText",
              "type": "number | null | undefined",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 104,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dx",
              "type": "string | null | undefined",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 109,
                  "column": 10
                },
                "end": {
                  "line": 112,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dy",
              "type": "string | null | undefined",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 117,
                  "column": 10
                },
                "end": {
                  "line": 120,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "textAngle",
              "type": "number | null | undefined",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 129,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "ticks",
              "type": "Array | null | undefined",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 138,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "tickFormat",
              "type": "string | null | undefined",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 148,
                  "column": 11
                },
                "end": {
                  "line": 151,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "position",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 153,
                  "column": 10
                },
                "end": {
                  "line": 158,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "TODO(cg): Review if this is usefull ?.",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 170,
                  "column": 6
                },
                "end": {
                  "line": 173,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called when the element is disconnected from DOM",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 144,
                  "column": 6
                },
                "end": {
                  "line": 148,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 57,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 61,
                  "column": 6
                },
                "end": {
                  "line": 63,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 28,
                  "column": 6
                },
                "end": {
                  "line": 33,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 80,
                  "column": 4
                },
                "end": {
                  "line": 82,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 84,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "render",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 89,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "debouceRender",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 91,
                  "column": 6
                },
                "end": {
                  "line": 97,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "preDraw",
              "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 102,
                  "column": 6
                },
                "end": {
                  "line": 107,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 201,
                  "column": 6
                },
                "end": {
                  "line": 210,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "postDraw",
              "description": "`postDraw` if some cleanup is needed",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 119,
                  "column": 6
                },
                "end": {
                  "line": 121,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onMultiRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 131,
                  "column": 6
                },
                "end": {
                  "line": 134,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "applyTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 150,
                  "column": 6
                },
                "end": {
                  "line": 155,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onEndTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 157,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 26
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "identity",
              "description": "helper functions",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 57,
                  "column": 7
                },
                "end": {
                  "line": 57,
                  "column": 30
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "indexAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 58,
                  "column": 7
                },
                "end": {
                  "line": 58,
                  "column": 38
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "keyAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 59,
                  "column": 7
                },
                "end": {
                  "line": 59,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "valueAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 60,
                  "column": 7
                },
                "end": {
                  "line": 60,
                  "column": 44
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "dataAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 61,
                  "column": 7
                },
                "end": {
                  "line": 61,
                  "column": 42
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "computeAxis",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 6
                },
                "end": {
                  "line": 26,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "scale"
                }
              ]
            },
            {
              "name": "observeTicks",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 179,
                  "column": 6
                },
                "end": {
                  "line": 188,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "ticks"
                }
              ],
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "observeTickFormat",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 190,
                  "column": 6
                },
                "end": {
                  "line": 199,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "format"
                }
              ],
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 34,
              "column": 3
            }
          },
          "privacy": "public",
          "superclass": "MultiChart.D3Axis",
          "name": "MultiChart.D3RightAxis",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "data",
              "description": "`data`  to draw the chart from",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "description": "`transition` a transition composer function",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "description": "`filter` a way to filter data passed to draw method",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "key",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 40,
                  "column": 11
                },
                "end": {
                  "line": 42,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 42,
                  "column": 10
                },
                "end": {
                  "line": 45,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "scale",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 53,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "range",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text",
              "description": "`text` text for the axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 84,
                  "column": 10
                },
                "end": {
                  "line": 87,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "x-text",
              "description": "`xText` value to be set to the axisText x attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 92,
                  "column": 10
                },
                "end": {
                  "line": 95,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "y-text",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 104,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dx",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 109,
                  "column": 10
                },
                "end": {
                  "line": 112,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dy",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 117,
                  "column": 10
                },
                "end": {
                  "line": 120,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text-angle",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 129,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "ticks",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 138,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "tick-format",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 148,
                  "column": 11
                },
                "end": {
                  "line": 151,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "position",
              "description": "",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 153,
                  "column": 10
                },
                "end": {
                  "line": 158,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "range-changed",
              "description": "Fired when the `range` property changes.",
              "metadata": {},
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-axis-right"
        },
        {
          "description": "## D3LeftAxis\n\n`<d3-axis-left>` a drawable left axis",
          "summary": "",
          "path": "d3-axis/d3-axis-left.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "shallTransition",
              "type": "?",
              "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 129,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data`  to draw the chart from",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` a transition composer function",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` a way to filter data passed to draw method",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "targetElement",
              "type": "?",
              "description": "`targetElement` getter override lifecycle Behavior and called during attached\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 50,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 40,
                  "column": 11
                },
                "end": {
                  "line": 42,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "type": "Function | null | undefined",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 42,
                  "column": 10
                },
                "end": {
                  "line": 45,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "scale",
              "type": "Function | null | undefined",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 53,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "range",
              "type": "Array | null | undefined",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "_x",
              "type": "number | null | undefined",
              "description": "`_x` x translation for the axis. is set depending on position and height",
              "privacy": "protected",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 68,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "_y",
              "type": "number | null | undefined",
              "description": "`_y` y translation for the axis. is set depending on position and width",
              "privacy": "protected",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 76,
                  "column": 10
                },
                "end": {
                  "line": 79,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text",
              "type": "string | null | undefined",
              "description": "`text` text for the axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 84,
                  "column": 10
                },
                "end": {
                  "line": 87,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "xText",
              "type": "number | null | undefined",
              "description": "`xText` value to be set to the axisText x attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 92,
                  "column": 10
                },
                "end": {
                  "line": 95,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "yText",
              "type": "number | null | undefined",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 104,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dx",
              "type": "string | null | undefined",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 109,
                  "column": 10
                },
                "end": {
                  "line": 112,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dy",
              "type": "string | null | undefined",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 117,
                  "column": 10
                },
                "end": {
                  "line": 120,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "textAngle",
              "type": "number | null | undefined",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 129,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "ticks",
              "type": "Array | null | undefined",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 138,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "tickFormat",
              "type": "string | null | undefined",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 148,
                  "column": 11
                },
                "end": {
                  "line": 151,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "position",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 153,
                  "column": 10
                },
                "end": {
                  "line": 158,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "TODO(cg): Review if this is usefull ?.",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 170,
                  "column": 6
                },
                "end": {
                  "line": 173,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called when the element is disconnected from DOM",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 144,
                  "column": 6
                },
                "end": {
                  "line": 148,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 57,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 61,
                  "column": 6
                },
                "end": {
                  "line": 63,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 28,
                  "column": 6
                },
                "end": {
                  "line": 33,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 80,
                  "column": 4
                },
                "end": {
                  "line": 82,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 84,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "render",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 89,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "debouceRender",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 91,
                  "column": 6
                },
                "end": {
                  "line": 97,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "preDraw",
              "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 102,
                  "column": 6
                },
                "end": {
                  "line": 107,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 201,
                  "column": 6
                },
                "end": {
                  "line": 210,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "postDraw",
              "description": "`postDraw` if some cleanup is needed",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 119,
                  "column": 6
                },
                "end": {
                  "line": 121,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onMultiRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 131,
                  "column": 6
                },
                "end": {
                  "line": 134,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "applyTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 150,
                  "column": 6
                },
                "end": {
                  "line": 155,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onEndTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 157,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 26
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "identity",
              "description": "helper functions",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 57,
                  "column": 7
                },
                "end": {
                  "line": 57,
                  "column": 30
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "indexAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 58,
                  "column": 7
                },
                "end": {
                  "line": 58,
                  "column": 38
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "keyAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 59,
                  "column": 7
                },
                "end": {
                  "line": 59,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "valueAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 60,
                  "column": 7
                },
                "end": {
                  "line": 60,
                  "column": 44
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "dataAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 61,
                  "column": 7
                },
                "end": {
                  "line": 61,
                  "column": 42
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "computeAxis",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 6
                },
                "end": {
                  "line": 26,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "scale"
                }
              ]
            },
            {
              "name": "observeTicks",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 179,
                  "column": 6
                },
                "end": {
                  "line": 188,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "ticks"
                }
              ],
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "observeTickFormat",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 190,
                  "column": 6
                },
                "end": {
                  "line": 199,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "format"
                }
              ],
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 34,
              "column": 3
            }
          },
          "privacy": "public",
          "superclass": "MultiChart.D3Axis",
          "name": "MultiChart.D3LeftAxis",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "data",
              "description": "`data`  to draw the chart from",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "description": "`transition` a transition composer function",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "description": "`filter` a way to filter data passed to draw method",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "key",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 40,
                  "column": 11
                },
                "end": {
                  "line": 42,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 42,
                  "column": 10
                },
                "end": {
                  "line": 45,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "scale",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 53,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "range",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text",
              "description": "`text` text for the axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 84,
                  "column": 10
                },
                "end": {
                  "line": 87,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "x-text",
              "description": "`xText` value to be set to the axisText x attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 92,
                  "column": 10
                },
                "end": {
                  "line": 95,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "y-text",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 104,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dx",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 109,
                  "column": 10
                },
                "end": {
                  "line": 112,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dy",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 117,
                  "column": 10
                },
                "end": {
                  "line": 120,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text-angle",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 129,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "ticks",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 138,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "tick-format",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 148,
                  "column": 11
                },
                "end": {
                  "line": 151,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "position",
              "description": "",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 153,
                  "column": 10
                },
                "end": {
                  "line": 158,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "range-changed",
              "description": "Fired when the `range` property changes.",
              "metadata": {},
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-axis-left"
        },
        {
          "description": "## D3BottomAxis\n\n`<d3-axis-bottom>` a drawable bottom axis",
          "summary": "",
          "path": "d3-axis/d3-axis-bottom.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "shallTransition",
              "type": "?",
              "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 129,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data`  to draw the chart from",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` a transition composer function",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` a way to filter data passed to draw method",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "targetElement",
              "type": "?",
              "description": "`targetElement` getter override lifecycle Behavior and called during attached\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 50,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 40,
                  "column": 11
                },
                "end": {
                  "line": 42,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "type": "Function | null | undefined",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 42,
                  "column": 10
                },
                "end": {
                  "line": 45,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "scale",
              "type": "Function | null | undefined",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 53,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "range",
              "type": "Array | null | undefined",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "_x",
              "type": "number | null | undefined",
              "description": "`_x` x translation for the axis. is set depending on position and height",
              "privacy": "protected",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 68,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "_y",
              "type": "number | null | undefined",
              "description": "`_y` y translation for the axis. is set depending on position and width",
              "privacy": "protected",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 76,
                  "column": 10
                },
                "end": {
                  "line": 79,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text",
              "type": "string | null | undefined",
              "description": "`text` text for the axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 84,
                  "column": 10
                },
                "end": {
                  "line": 87,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "xText",
              "type": "number | null | undefined",
              "description": "`xText` value to be set to the axisText x attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 92,
                  "column": 10
                },
                "end": {
                  "line": 95,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "yText",
              "type": "number | null | undefined",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 104,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dx",
              "type": "string | null | undefined",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 109,
                  "column": 10
                },
                "end": {
                  "line": 112,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dy",
              "type": "string | null | undefined",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 117,
                  "column": 10
                },
                "end": {
                  "line": 120,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "textAngle",
              "type": "number | null | undefined",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 129,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "ticks",
              "type": "Array | null | undefined",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 138,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "tickFormat",
              "type": "string | null | undefined",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 148,
                  "column": 11
                },
                "end": {
                  "line": 151,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "position",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 153,
                  "column": 10
                },
                "end": {
                  "line": 158,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "TODO(cg): Review if this is usefull ?.",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 170,
                  "column": 6
                },
                "end": {
                  "line": 173,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called when the element is disconnected from DOM",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 144,
                  "column": 6
                },
                "end": {
                  "line": 148,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 57,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 61,
                  "column": 6
                },
                "end": {
                  "line": 63,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 28,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 80,
                  "column": 4
                },
                "end": {
                  "line": 82,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 84,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "render",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 89,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "debouceRender",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 91,
                  "column": 6
                },
                "end": {
                  "line": 97,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "preDraw",
              "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 102,
                  "column": 6
                },
                "end": {
                  "line": 107,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 201,
                  "column": 6
                },
                "end": {
                  "line": 210,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "postDraw",
              "description": "`postDraw` if some cleanup is needed",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 119,
                  "column": 6
                },
                "end": {
                  "line": 121,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onMultiRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 131,
                  "column": 6
                },
                "end": {
                  "line": 134,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "applyTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 150,
                  "column": 6
                },
                "end": {
                  "line": 155,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onEndTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 157,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 26
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "identity",
              "description": "helper functions",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 57,
                  "column": 7
                },
                "end": {
                  "line": 57,
                  "column": 30
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "indexAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 58,
                  "column": 7
                },
                "end": {
                  "line": 58,
                  "column": 38
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "keyAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 59,
                  "column": 7
                },
                "end": {
                  "line": 59,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "valueAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 60,
                  "column": 7
                },
                "end": {
                  "line": 60,
                  "column": 44
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "dataAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 61,
                  "column": 7
                },
                "end": {
                  "line": 61,
                  "column": 42
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "computeAxis",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 6
                },
                "end": {
                  "line": 26,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "scale"
                }
              ]
            },
            {
              "name": "observeTicks",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 179,
                  "column": 6
                },
                "end": {
                  "line": 188,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "ticks"
                }
              ],
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "observeTickFormat",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 190,
                  "column": 6
                },
                "end": {
                  "line": 199,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "axis"
                },
                {
                  "name": "format"
                }
              ],
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 35,
              "column": 3
            }
          },
          "privacy": "public",
          "superclass": "MultiChart.D3Axis",
          "name": "MultiChart.D3BottomAxis",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "data",
              "description": "`data`  to draw the chart from",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "description": "`transition` a transition composer function",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "description": "`filter` a way to filter data passed to draw method",
              "sourceRange": {
                "file": "../drawable/draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "key",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "sourceRange": {
                "file": "../drawable/multi-drawable.html",
                "start": {
                  "line": 40,
                  "column": 11
                },
                "end": {
                  "line": 42,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "axis",
              "description": "`axis` the [d3 axis](https://github.com/d3/d3-axis) function",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 42,
                  "column": 10
                },
                "end": {
                  "line": 45,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "scale",
              "description": "`scale`  the [d3-scale](https://github.com/d3/d3-axis) to use for this axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 53,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "range",
              "description": "`scale`  the [range](https://github.com/d3/d3-scale#range) to be user by the\nassociated axis scale.\nAxis range is being re-calculated on every resize.",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text",
              "description": "`text` text for the axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 84,
                  "column": 10
                },
                "end": {
                  "line": 87,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "x-text",
              "description": "`xText` value to be set to the axisText x attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 92,
                  "column": 10
                },
                "end": {
                  "line": 95,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "y-text",
              "description": "`yText` value to be set to the axisText `y` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 104,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dx",
              "description": "`dx` value to be set to the axisText `dx` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 109,
                  "column": 10
                },
                "end": {
                  "line": 112,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "dy",
              "description": "`dy` value to be set to the axisText `dy` attribute",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 117,
                  "column": 10
                },
                "end": {
                  "line": 120,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "text-angle",
              "description": "`textAngle` rotation angle to be applied to text axis",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 129,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "ticks",
              "description": "[`ticks`] (https://github.com/d3/d3-axis/blob/master/README.md#axis_ticks) The meaning of the arguments depends on the axis’ scale type:\nmost commonly, the arguments are a suggested count for the number of ticks (or a time interval for time scales), and an optional\nformat specifier to customize how the tick values are formatted.\n\nFor example, to generate twenty ticks with SI-prefix formatting on a linear scale, say: [20, \"s\"];",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 138,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "tick-format",
              "description": "[`tickFormat`](https://github.com/d3/d3-axis/blob/master/README.md#axis_tickFormat) sets the tick format.\nSee [d3-format](https://github.com/d3/d3-format).\nTick format can also be specified as a function. For example `d3.timeFormat(\"%B %d, %Y\");`",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 148,
                  "column": 11
                },
                "end": {
                  "line": 151,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            },
            {
              "name": "position",
              "description": "",
              "sourceRange": {
                "file": "d3-axis.html",
                "start": {
                  "line": 153,
                  "column": 10
                },
                "end": {
                  "line": 158,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "range-changed",
              "description": "Fired when the `range` property changes.",
              "metadata": {},
              "inheritedFrom": "MultiChart.D3Axis"
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-axis-bottom"
        },
        {
          "description": "## MultiScale\n\n`<multi-scale>` compute a scale that can be passed on to an axis",
          "summary": "",
          "path": "d3-scale/multi-scale.html",
          "properties": [
            {
              "name": "scaleType",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 19,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"scaleLinear\"",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "elastic",
              "type": "boolean | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domain",
              "type": "Array | null | undefined",
              "description": "`domain` domain for this scale. It will be recomputed when data changes",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 39,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "accessor",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 44,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "range",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 46,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "padding",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domainMin",
              "type": "number | null | undefined",
              "description": "`domainMin` if set, will be used as the min value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 62,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domainMax",
              "type": "number | null | undefined",
              "description": "`domainMax` if set, will be used as the max value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "scale",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 50,
                  "column": 6
                },
                "end": {
                  "line": 53,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "accessorPath",
              "type": "string | null | undefined",
              "description": "`accessorPath` the path from which tha accessor function is built\nFor instance `+d.count`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 61,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "family",
              "type": "string | null | undefined",
              "description": "`family` inferred by scaleType .\nOne of `continuous`, `sequential`, `quantize`, `quantile`, `threshold`, `ordinal`,",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "String"
                }
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 2
            },
            "end": {
              "line": 78,
              "column": 3
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiScale",
          "attributes": [
            {
              "name": "scale-type",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 19,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "elastic",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domain",
              "description": "`domain` domain for this scale. It will be recomputed when data changes",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 39,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "accessor",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 44,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "range",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 46,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "padding",
              "description": "",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domain-min",
              "description": "`domainMin` if set, will be used as the min value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 62,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "domain-max",
              "description": "`domainMax` if set, will be used as the max value for calculating the domain - otherwise, it will be inferred from provided data (`d3.extent(data, accessor)`)",
              "sourceRange": {
                "file": "d3-scale-property-mixin.html",
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ScaleProperty"
            },
            {
              "name": "scale",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 50,
                  "column": 6
                },
                "end": {
                  "line": 53,
                  "column": 7
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "accessor-path",
              "description": "`accessorPath` the path from which tha accessor function is built\nFor instance `+d.count`",
              "sourceRange": {
                "start": {
                  "line": 59,
                  "column": 10
                },
                "end": {
                  "line": 61,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "family",
              "description": "`family` inferred by scaleType .\nOne of `continuous`, `sequential`, `quantize`, `quantile`, `threshold`, `ordinal`,",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "scale-changed",
              "description": "Fired when the `scale` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "family-changed",
              "description": "Fired when the `family` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-scale",
          "mixins": [
            "MultiChart.mixin.D3ScaleProperty"
          ]
        },
        {
          "description": "## MultiChartCoordinateContainer\n\n`<multi-container-axis>` a container for coordinate data",
          "summary": "",
          "path": "container/multi-container-axis.html",
          "properties": [
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data` to display the chart",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 155,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "margin",
              "type": "Object | null | undefined",
              "description": "`margin` applied to svg container (not css margin, wich can also be applied as per normal css rules)\nBy default margins are slightly bigger than for simple `multi-container-svg`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 163,
                  "column": 10
                },
                "end": {
                  "line": 171,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{\"top\":20,\"right\":20,\"bottom\":20,\"left\":20}"
            },
            {
              "name": "scales",
              "type": "Object | null | undefined",
              "description": "`scales` key-value [scale](https://github.com/d3/d3-scale) for the active axis. `bottom` and `left` scales are always calculated. `right` and `top` scales are set only when\nright and top axis is drawn.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 177,
                  "column": 10
                },
                "end": {
                  "line": 184,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}"
            },
            {
              "name": "domains",
              "type": "Object | null | undefined",
              "description": "`domains` key-value [domain](https://github.com/d3/d3-scale#domain) for active axis. By default, `{bottom: bottomDomain, left:leftDomain}`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 189,
                  "column": 10
                },
                "end": {
                  "line": 196,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}"
            },
            {
              "name": "ranges",
              "type": "Object | null | undefined",
              "description": "`ranges` key-value [range](https://github.com/d3/d3-scale#range) for active axis.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 201,
                  "column": 10
                },
                "end": {
                  "line": 208,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}"
            },
            {
              "name": "accessors",
              "type": "Object | null | undefined",
              "description": "`accessors` key-value accessor functions for active axis.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 212,
                  "column": 10
                },
                "end": {
                  "line": 219,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}"
            },
            {
              "name": "topAxis",
              "type": "boolean | null | undefined",
              "description": "`topAxis` true to display top axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 224,
                  "column": 10
                },
                "end": {
                  "line": 227,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "rightAxis",
              "type": "boolean | null | undefined",
              "description": "`rightAxis` true to display right axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 232,
                  "column": 10
                },
                "end": {
                  "line": 235,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "bottomAxis",
              "type": "boolean | null | undefined",
              "description": "`bottomAxis` true to display bottom axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 239,
                  "column": 10
                },
                "end": {
                  "line": 242,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "leftAxis",
              "type": "boolean | null | undefined",
              "description": "`leftAxis` true to display left axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 247,
                  "column": 10
                },
                "end": {
                  "line": 250,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "leftTextAngle",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 253,
                  "column": 10
                },
                "end": {
                  "line": 256,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "-90"
            },
            {
              "name": "leftYText",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 258,
                  "column": 10
                },
                "end": {
                  "line": 261,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "6"
            },
            {
              "name": "leftDy",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 263,
                  "column": 10
                },
                "end": {
                  "line": 266,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"0.6em\""
            },
            {
              "name": "serieValueDomain",
              "type": "Object | null | undefined",
              "description": "`serieValueDomain` value domain for each serie groupName, calculated in `multi-register-mixin`\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 272,
                  "column": 10
                },
                "end": {
                  "line": 275,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "serieOrdinalDomain",
              "type": "Object | null | undefined",
              "description": "`serieOrdinalDomain` ordinal domain for series",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 280,
                  "column": 11
                },
                "end": {
                  "line": 283,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "serieDomainMapping",
              "type": "Object | null | undefined",
              "description": "`serieDomainMapping` a mapping object that will make sure that scale domains are properly set when we use data series.\nthe default mapping will use value domain for left axis and ordinal domain for bottom axis",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 289,
                  "column": 10
                },
                "end": {
                  "line": 295,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{\"bottom\":\"serieOrdinalDomain.default\",\"left\":\"serieValueDomain.default\"}"
            },
            {
              "name": "topAccessorPath",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 297,
                  "column": 10
                },
                "end": {
                  "line": 297,
                  "column": 33
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "rightAccessorPath",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 298,
                  "column": 10
                },
                "end": {
                  "line": 298,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "bottomAccessorPath",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 299,
                  "column": 10
                },
                "end": {
                  "line": 299,
                  "column": 36
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "leftAccessorPath",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 300,
                  "column": 10
                },
                "end": {
                  "line": 300,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "_observeSerieDomain",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 328,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "mapping"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 329,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiChartCoordinateContainer",
          "attributes": [
            {
              "name": "data",
              "description": "`data` to display the chart",
              "sourceRange": {
                "start": {
                  "line": 155,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "margin",
              "description": "`margin` applied to svg container (not css margin, wich can also be applied as per normal css rules)\nBy default margins are slightly bigger than for simple `multi-container-svg`",
              "sourceRange": {
                "start": {
                  "line": 163,
                  "column": 10
                },
                "end": {
                  "line": 171,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "scales",
              "description": "`scales` key-value [scale](https://github.com/d3/d3-scale) for the active axis. `bottom` and `left` scales are always calculated. `right` and `top` scales are set only when\nright and top axis is drawn.",
              "sourceRange": {
                "start": {
                  "line": 177,
                  "column": 10
                },
                "end": {
                  "line": 184,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "domains",
              "description": "`domains` key-value [domain](https://github.com/d3/d3-scale#domain) for active axis. By default, `{bottom: bottomDomain, left:leftDomain}`",
              "sourceRange": {
                "start": {
                  "line": 189,
                  "column": 10
                },
                "end": {
                  "line": 196,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "ranges",
              "description": "`ranges` key-value [range](https://github.com/d3/d3-scale#range) for active axis.",
              "sourceRange": {
                "start": {
                  "line": 201,
                  "column": 10
                },
                "end": {
                  "line": 208,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "accessors",
              "description": "`accessors` key-value accessor functions for active axis.",
              "sourceRange": {
                "start": {
                  "line": 212,
                  "column": 10
                },
                "end": {
                  "line": 219,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "top-axis",
              "description": "`topAxis` true to display top axis",
              "sourceRange": {
                "start": {
                  "line": 224,
                  "column": 10
                },
                "end": {
                  "line": 227,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "right-axis",
              "description": "`rightAxis` true to display right axis",
              "sourceRange": {
                "start": {
                  "line": 232,
                  "column": 10
                },
                "end": {
                  "line": 235,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "bottom-axis",
              "description": "`bottomAxis` true to display bottom axis",
              "sourceRange": {
                "start": {
                  "line": 239,
                  "column": 10
                },
                "end": {
                  "line": 242,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "left-axis",
              "description": "`leftAxis` true to display left axis",
              "sourceRange": {
                "start": {
                  "line": 247,
                  "column": 10
                },
                "end": {
                  "line": 250,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "left-text-angle",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 253,
                  "column": 10
                },
                "end": {
                  "line": 256,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "left-y-text",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 258,
                  "column": 10
                },
                "end": {
                  "line": 261,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "left-dy",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 263,
                  "column": 10
                },
                "end": {
                  "line": 266,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "serie-value-domain",
              "description": "`serieValueDomain` value domain for each serie groupName, calculated in `multi-register-mixin`\nif no groupName is given a default `default` name is given. Hence this field results to serieValueDomain = {default: [min, max]}",
              "sourceRange": {
                "start": {
                  "line": 272,
                  "column": 10
                },
                "end": {
                  "line": 275,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "serie-ordinal-domain",
              "description": "`serieOrdinalDomain` ordinal domain for series",
              "sourceRange": {
                "start": {
                  "line": 280,
                  "column": 11
                },
                "end": {
                  "line": 283,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "serie-domain-mapping",
              "description": "`serieDomainMapping` a mapping object that will make sure that scale domains are properly set when we use data series.\nthe default mapping will use value domain for left axis and ordinal domain for bottom axis",
              "sourceRange": {
                "start": {
                  "line": 289,
                  "column": 10
                },
                "end": {
                  "line": 295,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "top-accessor-path",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 297,
                  "column": 10
                },
                "end": {
                  "line": 297,
                  "column": 33
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "right-accessor-path",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 298,
                  "column": 10
                },
                "end": {
                  "line": 298,
                  "column": 35
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "bottom-accessor-path",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 299,
                  "column": 10
                },
                "end": {
                  "line": 299,
                  "column": 36
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "left-accessor-path",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 300,
                  "column": 10
                },
                "end": {
                  "line": 300,
                  "column": 34
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "scales-changed",
              "description": "Fired when the `scales` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "domains-changed",
              "description": "Fired when the `domains` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "ranges-changed",
              "description": "Fired when the `ranges` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "accessors-changed",
              "description": "Fired when the `accessors` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "serie-value-domain-changed",
              "description": "Fired when the `serieValueDomain` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "serie-ordinal-domain-changed",
              "description": "Fired when the `serieOrdinalDomain` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [
            {
              "description": "",
              "name": "header",
              "range": {
                "start": {
                  "line": 118,
                  "column": 6
                },
                "end": {
                  "line": 118,
                  "column": 47
                }
              }
            },
            {
              "description": "",
              "name": "",
              "range": {
                "start": {
                  "line": 119,
                  "column": 6
                },
                "end": {
                  "line": 119,
                  "column": 19
                }
              }
            },
            {
              "description": "",
              "name": "footer",
              "range": {
                "start": {
                  "line": 120,
                  "column": 6
                },
                "end": {
                  "line": 120,
                  "column": 47
                }
              }
            }
          ],
          "tagname": "multi-container-axis",
          "mixins": [
            "MultiChart.mixin.AxisProperty('bottom')",
            "MultiChart.mixin.AxisProperty('top')",
            "MultiChart.mixin.AxisProperty('left')",
            "MultiChart.mixin.AxisProperty('right')"
          ]
        },
        {
          "description": "## MultiSerie\n\n`<multi-serie>` a helper to transform data so that it is easier to draw.",
          "summary": "",
          "path": "helper/multi-serie.html",
          "properties": [
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key` the key used for this data serie",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 34,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "label",
              "type": "string | null | undefined",
              "description": "`label` a label describing the serie",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 43,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "accessor",
              "type": "Function | null | undefined",
              "description": "`accessor` the accessor function for transforming data.\nData will be reshaped as  `[{key: key, label: label, value: data.map(d=>accessor(d))}]",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 49,
                  "column": 10
                },
                "end": {
                  "line": 51,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 57,
                  "column": 10
                },
                "end": {
                  "line": 60,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-serie-register\""
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 63,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiSerie",
          "attributes": [
            {
              "name": "key",
              "description": "`key` the key used for this data serie",
              "sourceRange": {
                "start": {
                  "line": 34,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "label",
              "description": "`label` a label describing the serie",
              "sourceRange": {
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 43,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "accessor",
              "description": "`accessor` the accessor function for transforming data.\nData will be reshaped as  `[{key: key, label: label, value: data.map(d=>accessor(d))}]",
              "sourceRange": {
                "start": {
                  "line": 49,
                  "column": 10
                },
                "end": {
                  "line": 51,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "start": {
                  "line": 57,
                  "column": 10
                },
                "end": {
                  "line": 60,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-serie",
          "mixins": [
            "MultiChart.mixin.Registerable"
          ]
        },
        {
          "description": "## MultiLegend\n\n`<multi-legend>` a element for displaying chart legends",
          "summary": "",
          "path": "helper/multi-legend.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "legendType",
              "type": "string | null | undefined",
              "description": "`legendType` the type of legend (`legendColor`, `legendSize`, `legendSymbol`)\nfor instantiating the legend ([d3-legend](http://d3-legend.susielu.com/).",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 46,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"legendColor\""
            },
            {
              "name": "legend",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "anchor",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 10
                },
                "end": {
                  "line": 59,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"legend\""
            },
            {
              "name": "scaleFactor",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 61,
                  "column": 10
                },
                "end": {
                  "line": 64,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0.7"
            },
            {
              "name": "position",
              "type": "string | null | undefined",
              "description": "`position` this position within the chart.\nposition is reset on resize.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 70,
                  "column": 10
                },
                "end": {
                  "line": 72,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "padding",
              "type": "number | null | undefined",
              "description": "`padding` the padding to be applied when calculation the position",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 77,
                  "column": 10
                },
                "end": {
                  "line": 80,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            },
            {
              "name": "chartWidth",
              "type": "number | null | undefined",
              "description": "`chartWidth` the width of the containing chart. If not set, will pick-it up on attached",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 85,
                  "column": 10
                },
                "end": {
                  "line": 89,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "300"
            },
            {
              "name": "chartHeight",
              "type": "number | null | undefined",
              "description": "`chartHeight` the height of the containing chart. If not set, will pick-it up on attached",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 94,
                  "column": 10
                },
                "end": {
                  "line": 98,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "300"
            },
            {
              "name": "x",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 103,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            },
            {
              "name": "y",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 105,
                  "column": 10
                },
                "end": {
                  "line": 108,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "0"
            },
            {
              "name": "scale",
              "type": "Function | null | undefined",
              "description": "API Properties",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 112,
                  "column": 10
                },
                "end": {
                  "line": 114,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "cells",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 115,
                  "column": 10
                },
                "end": {
                  "line": 117,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "orient",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 118,
                  "column": 10
                },
                "end": {
                  "line": 121,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "ascending",
              "type": "boolean | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 122,
                  "column": 10
                },
                "end": {
                  "line": 124,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "shape",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 127,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "shapeWidth",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 128,
                  "column": 10
                },
                "end": {
                  "line": 130,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "shapeHeight",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 131,
                  "column": 10
                },
                "end": {
                  "line": 133,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "shapeRadius",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 134,
                  "column": 10
                },
                "end": {
                  "line": 136,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "shapePadding",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 137,
                  "column": 10
                },
                "end": {
                  "line": 139,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "useClass",
              "type": "boolean | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 140,
                  "column": 10
                },
                "end": {
                  "line": 142,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              }
            },
            {
              "name": "classPrefix",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 143,
                  "column": 10
                },
                "end": {
                  "line": 145,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "title",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 146,
                  "column": 10
                },
                "end": {
                  "line": 148,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "labels",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 149,
                  "column": 10
                },
                "end": {
                  "line": 151,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "labelAlign",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 152,
                  "column": 10
                },
                "end": {
                  "line": 154,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "labelWrap",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 155,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "labelFormat",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 158,
                  "column": 10
                },
                "end": {
                  "line": 160,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "labelOffset",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 161,
                  "column": 10
                },
                "end": {
                  "line": 163,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "labelDelimiter",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 164,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 193,
                  "column": 4
                },
                "end": {
                  "line": 199,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 65,
                  "column": 6
                },
                "end": {
                  "line": 70,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 57,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 61,
                  "column": 6
                },
                "end": {
                  "line": 63,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 206,
                  "column": 6
                },
                "end": {
                  "line": 209,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 80,
                  "column": 4
                },
                "end": {
                  "line": 82,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 84,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "onRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 201,
                  "column": 4
                },
                "end": {
                  "line": 204,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "debounceDraw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 211,
                  "column": 6
                },
                "end": {
                  "line": 216,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 218,
                  "column": 6
                },
                "end": {
                  "line": 220,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_computeLegend",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 222,
                  "column": 6
                },
                "end": {
                  "line": 234,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "legendType"
                }
              ]
            },
            {
              "name": "setPosition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 236,
                  "column": 6
                },
                "end": {
                  "line": 253,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 254,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiLegend",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "../drawable/dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "../drawable/resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "legend-type",
              "description": "`legendType` the type of legend (`legendColor`, `legendSize`, `legendSymbol`)\nfor instantiating the legend ([d3-legend](http://d3-legend.susielu.com/).",
              "sourceRange": {
                "start": {
                  "line": 46,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "legend",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 54,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "anchor",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 10
                },
                "end": {
                  "line": 59,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "scale-factor",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 61,
                  "column": 10
                },
                "end": {
                  "line": 64,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "position",
              "description": "`position` this position within the chart.\nposition is reset on resize.",
              "sourceRange": {
                "start": {
                  "line": 70,
                  "column": 10
                },
                "end": {
                  "line": 72,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "padding",
              "description": "`padding` the padding to be applied when calculation the position",
              "sourceRange": {
                "start": {
                  "line": 77,
                  "column": 10
                },
                "end": {
                  "line": 80,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "chart-width",
              "description": "`chartWidth` the width of the containing chart. If not set, will pick-it up on attached",
              "sourceRange": {
                "start": {
                  "line": 85,
                  "column": 10
                },
                "end": {
                  "line": 89,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "chart-height",
              "description": "`chartHeight` the height of the containing chart. If not set, will pick-it up on attached",
              "sourceRange": {
                "start": {
                  "line": 94,
                  "column": 10
                },
                "end": {
                  "line": 98,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "x",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 103,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "y",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 105,
                  "column": 10
                },
                "end": {
                  "line": 108,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "scale",
              "description": "API Properties",
              "sourceRange": {
                "start": {
                  "line": 112,
                  "column": 10
                },
                "end": {
                  "line": 114,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "cells",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 115,
                  "column": 10
                },
                "end": {
                  "line": 117,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "orient",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 118,
                  "column": 10
                },
                "end": {
                  "line": 121,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "ascending",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 122,
                  "column": 10
                },
                "end": {
                  "line": 124,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "shape",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 125,
                  "column": 10
                },
                "end": {
                  "line": 127,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "shape-width",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 128,
                  "column": 10
                },
                "end": {
                  "line": 130,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "shape-height",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 131,
                  "column": 10
                },
                "end": {
                  "line": 133,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "shape-radius",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 134,
                  "column": 10
                },
                "end": {
                  "line": 136,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "shape-padding",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 137,
                  "column": 10
                },
                "end": {
                  "line": 139,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "use-class",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 140,
                  "column": 10
                },
                "end": {
                  "line": 142,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            },
            {
              "name": "class-prefix",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 143,
                  "column": 10
                },
                "end": {
                  "line": 145,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "title",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 146,
                  "column": 10
                },
                "end": {
                  "line": 148,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "labels",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 149,
                  "column": 10
                },
                "end": {
                  "line": 151,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "label-align",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 152,
                  "column": 10
                },
                "end": {
                  "line": 154,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "label-wrap",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 155,
                  "column": 10
                },
                "end": {
                  "line": 157,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "label-format",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 158,
                  "column": 10
                },
                "end": {
                  "line": 160,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "label-offset",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 161,
                  "column": 10
                },
                "end": {
                  "line": 163,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "label-delimiter",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 164,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-legend",
          "mixins": [
            "MultiChart.mixin.SVGHelper",
            "MultiChart.mixin.Registerable",
            "MultiChart.mixin.DispatchSVG",
            "MultiChart.mixin.Resizable",
            "MultiChart.mixin.Draw"
          ]
        },
        {
          "description": "## D3ShapeLine\n\n`<d3-shape-line>` a wrapper for [d3-line](https://github.com/d3/d3-shape#line), a line generator produces a spline or polyline, as in a line chart",
          "summary": "",
          "path": "d3-shape/d3-shape-line.html",
          "properties": [
            {
              "name": "x",
              "type": "Function | null | undefined",
              "description": "`x` the x accessor to be applied to the line generator",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "xAccessor",
              "type": "Function | null | undefined",
              "description": "`xAccessor`  the accessor function for x data",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "xScale",
              "type": "Function | null | undefined",
              "description": "`xScale`  scale function for x domain",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 36,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "y",
              "type": "Function | null | undefined",
              "description": "`y` the y accessor to be applied to the line generator",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 46,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "yAccessor",
              "type": "Function | null | undefined",
              "description": "`yAccessor`  the accessor function for y data",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 53,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "yScale",
              "type": "Function | null | undefined",
              "description": "`yScale`  scale function for y domain",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 58,
                  "column": 10
                },
                "end": {
                  "line": 60,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "shaper",
              "type": "Function | null | undefined",
              "description": "`shaper` the [line](https://github.com/d3/d3-shape#line) shaper function",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 10
                },
                "end": {
                  "line": 45,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "defined",
              "type": "Function | null | undefined",
              "description": "[`defined`](https://github.com/d3/d3-shape#line_defined)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 50,
                  "column": 10
                },
                "end": {
                  "line": 52,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "computeDataAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 64,
                  "column": 6
                },
                "end": {
                  "line": 70,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "scale"
                },
                {
                  "name": "accessor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 63,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.D3ShapeLine",
          "attributes": [
            {
              "name": "x",
              "description": "`x` the x accessor to be applied to the line generator",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "x-accessor",
              "description": "`xAccessor`  the accessor function for x data",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "x-scale",
              "description": "`xScale`  scale function for x domain",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 36,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "y",
              "description": "`y` the y accessor to be applied to the line generator",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 43,
                  "column": 10
                },
                "end": {
                  "line": 46,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "y-accessor",
              "description": "`yAccessor`  the accessor function for y data",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 51,
                  "column": 10
                },
                "end": {
                  "line": 53,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "y-scale",
              "description": "`yScale`  scale function for y domain",
              "sourceRange": {
                "file": "d3-shape-coordinate-mixin.html",
                "start": {
                  "line": 58,
                  "column": 10
                },
                "end": {
                  "line": 60,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3ShapeCoordinate"
            },
            {
              "name": "shaper",
              "description": "`shaper` the [line](https://github.com/d3/d3-shape#line) shaper function",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 10
                },
                "end": {
                  "line": 45,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "defined",
              "description": "[`defined`](https://github.com/d3/d3-shape#line_defined)",
              "sourceRange": {
                "start": {
                  "line": 50,
                  "column": 10
                },
                "end": {
                  "line": 52,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "shaper-changed",
              "description": "Fired when the `shaper` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-shape-line",
          "mixins": [
            "MultiChart.mixin.D3ShapeCoordinate"
          ]
        },
        {
          "description": "## MultiDrawableLine\n\n`<multi-drawable-line>` draws series of lines",
          "summary": "",
          "path": "drawable/multi-drawable-line.html",
          "properties": [
            {
              "name": "shapeClass",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 43,
                  "column": 6
                },
                "end": {
                  "line": 45,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "shapeName",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 46,
                  "column": 6
                },
                "end": {
                  "line": 48,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "shaper",
              "type": "Function | null | undefined",
              "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "xAccessor",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "yAccessor",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 32,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            }
          ],
          "methods": [
            {
              "name": "drawSerieElement",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 47,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                }
              ]
            },
            {
              "name": "drawSerieGroup",
              "description": "`drawSerieGroup` builds one level of data  binding -> remove superfluous -> append new -> merge -> return chart\nWe can hence call this function for first grouping all keys and then build individual shapes (see multi-drawable-bubble)",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 59,
                  "column": 6
                },
                "end": {
                  "line": 79,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "shapeName"
                },
                {
                  "name": "shapeClass"
                },
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "draw",
              "description": "`draw` serie data, which are in the form of [{key, label, data: [dataValues]}]",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 83,
                  "column": 6
                },
                "end": {
                  "line": 90,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 54,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiDrawableLine",
          "attributes": [
            {
              "name": "shaper",
              "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "x-accessor",
              "description": "",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "y-accessor",
              "description": "",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 32,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-drawable-line",
          "mixins": [
            "MultiChart.mixin.MultiDrawableSerie"
          ]
        },
        {
          "description": "## MultiDrawableLinePath\n\n`<multi-drawable-line-path>` draws a line in a single svg path element",
          "summary": "",
          "path": "drawable/multi-drawable-line-path.html",
          "properties": [
            {
              "name": "groupName",
              "type": "string | null | undefined",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "registerEventName",
              "type": "string | null | undefined",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"multi-register\"",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svgHost",
              "type": "Object | null | undefined",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"observeSvgHost\"",
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "_hostedNodes",
              "type": "Object | null | undefined",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 31,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{}",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "container",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 55,
                  "column": 5
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerWidth",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 59,
                  "column": 5
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "containerHeight",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 63,
                  "column": 5
                },
                "end": {
                  "line": 65,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "width",
              "type": "number | null | undefined",
              "description": "`width`  of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "type": "number | null | undefined",
              "description": "`height` of SVG host",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "minSize",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "shallTransition",
              "type": "?",
              "description": " \n`shallTransition` called within the draw function to know if transition shall be applied\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 129,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "`data`  to draw the chart from",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "type": "Function | null | undefined",
              "description": "`transition` a transition composer function",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` a way to filter data passed to draw method",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "targetElement",
              "type": "?",
              "description": "`targetElement` getter override lifecycle Behavior and called during attached\n       ",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 50,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 40,
                  "column": 11
                },
                "end": {
                  "line": 42,
                  "column": 12
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "shaper",
              "type": "Function | null | undefined",
              "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 43,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "translateCenter",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "translate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "rotate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 23,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "angle"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "svgScale",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 27,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "factor"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "matrix",
              "description": "TODO",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "fitTo",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/svg-helper-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 51,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "target"
                },
                {
                  "name": "factor"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.SVGHelper"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 67,
                  "column": 4
                },
                "end": {
                  "line": 73,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "postRemove",
              "description": "`postRemove` is called when the element is disconnected from DOM",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 144,
                  "column": 6
                },
                "end": {
                  "line": 148,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "observeSvgHost",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 36,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "old"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterRegister",
              "description": "Note(cg): after Register is called by `multi-register-mixin` (multi-container-svg) once",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 57,
                  "column": 6
                },
                "end": {
                  "line": 59,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "host"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "afterUnregister",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 61,
                  "column": 6
                },
                "end": {
                  "line": 63,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 136,
                  "column": 6
                },
                "end": {
                  "line": 139,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "_computeCenter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 80,
                  "column": 4
                },
                "end": {
                  "line": 82,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "_computeMinSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 84,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "height"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 54,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "dataChanged",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 56,
                  "column": 6
                },
                "end": {
                  "line": 58,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "render",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 89,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "transition"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "debouceRender",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 91,
                  "column": 6
                },
                "end": {
                  "line": 97,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "preDraw",
              "description": "`preDraw` do anything that need to be done before we draw.\nreturning false will cancel the draw process",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 102,
                  "column": 6
                },
                "end": {
                  "line": 107,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 47,
                  "column": 6
                },
                "end": {
                  "line": 61,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "postDraw",
              "description": "`postDraw` if some cleanup is needed",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 119,
                  "column": 6
                },
                "end": {
                  "line": 121,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onMultiRefresh",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 131,
                  "column": 6
                },
                "end": {
                  "line": 134,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "applyTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 150,
                  "column": 6
                },
                "end": {
                  "line": 155,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "onEndTransition",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 157,
                  "column": 6
                },
                "end": {
                  "line": 157,
                  "column": 26
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "identity",
              "description": "helper functions",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 57,
                  "column": 7
                },
                "end": {
                  "line": 57,
                  "column": 30
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "indexAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 58,
                  "column": 7
                },
                "end": {
                  "line": 58,
                  "column": 38
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "keyAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 59,
                  "column": 7
                },
                "end": {
                  "line": 59,
                  "column": 40
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "valueAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 60,
                  "column": 7
                },
                "end": {
                  "line": 60,
                  "column": 44
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "dataAccessor",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 61,
                  "column": 7
                },
                "end": {
                  "line": 61,
                  "column": 42
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "d"
                },
                {
                  "name": "i"
                }
              ],
              "inheritedFrom": "MultiChart.MultiDrawable"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "MultiChart.MultiDrawable",
          "name": "MultiChart.MultiDrawableLinePath",
          "attributes": [
            {
              "name": "group-name",
              "description": "`groupName` the name of the group (used when to registering this element under a multi-verse)",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "register-event-name",
              "description": "`registerEventName`  the name of the event to be used for registering",
              "sourceRange": {
                "file": "../helper/registerable-mixin.html",
                "start": {
                  "line": 35,
                  "column": 10
                },
                "end": {
                  "line": 38,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Registerable"
            },
            {
              "name": "svg-host",
              "description": "`svgHost`  the host to which [slog-svg] nodes must be stamped",
              "sourceRange": {
                "file": "dispatch-svg-mixin.html",
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 26,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.DispatchSVG"
            },
            {
              "name": "width",
              "description": "`width`  of SVG host",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 26,
                  "column": 9
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "height",
              "description": "`height` of SVG host",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 34,
                  "column": 9
                },
                "end": {
                  "line": 37,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "center",
              "description": "",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 39,
                  "column": 9
                },
                "end": {
                  "line": 42,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "min-size",
              "description": "",
              "sourceRange": {
                "file": "resizable-mixin.html",
                "start": {
                  "line": 44,
                  "column": 9
                },
                "end": {
                  "line": 47,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Resizable"
            },
            {
              "name": "data",
              "description": "`data`  to draw the chart from",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 22,
                  "column": 10
                },
                "end": {
                  "line": 24,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "transition",
              "description": "`transition` a transition composer function",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "filter",
              "description": "`filter` a way to filter data passed to draw method",
              "sourceRange": {
                "file": "draw-mixin.html",
                "start": {
                  "line": 42,
                  "column": 11
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.Draw"
            },
            {
              "name": "key",
              "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
              "sourceRange": {
                "file": "multi-drawable.html",
                "start": {
                  "line": 40,
                  "column": 11
                },
                "end": {
                  "line": 42,
                  "column": 12
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.MultiDrawable"
            },
            {
              "name": "shaper",
              "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
              "sourceRange": {
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 43,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-drawable-line-path"
        },
        {
          "description": "## MultiDrawableBubble\n\n`<multi-drawable-bubble>` draw bubbles from serie data",
          "summary": "",
          "path": "drawable/multi-drawable-bubble.html",
          "properties": [
            {
              "name": "shapeClass",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 61,
                  "column": 6
                },
                "end": {
                  "line": 63,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "shapeName",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 65,
                  "column": 6
                },
                "end": {
                  "line": 67,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "shaper",
              "type": "Function | null | undefined",
              "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "xAccessor",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "yAccessor",
              "type": "Function | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 32,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "z",
              "type": "Function | null | undefined",
              "description": "`z` calculating radius for all data point radius = z(d)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 36,
                  "column": 10
                },
                "end": {
                  "line": 39,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "zAccessor",
              "type": "Function | null | undefined",
              "description": "`zAccessor`  the accessor function for z data (circle radius)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 44,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "zScale",
              "type": "Function | null | undefined",
              "description": "`zScale` scale function for z domain (circle radius)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 54,
                  "column": 10
                },
                "end": {
                  "line": 56,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "drawSerieElement",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 69,
                  "column": 6
                },
                "end": {
                  "line": 80,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "chart"
                },
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "drawSerieGroup",
              "description": "`drawSerieGroup` builds one level of data  binding -> remove superfluous -> append new -> merge -> return chart\nWe can hence call this function for first grouping all keys and then build individual shapes (see multi-drawable-bubble)",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 59,
                  "column": 6
                },
                "end": {
                  "line": 79,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "shapeName"
                },
                {
                  "name": "shapeClass"
                },
                {
                  "name": "chart"
                },
                {
                  "name": "transition"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "draw",
              "description": "`draw` serie data, which are in the form of [{key, label, data: [dataValues]}]",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 83,
                  "column": 6
                },
                "end": {
                  "line": 90,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 4
            },
            "end": {
              "line": 82,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiDrawableBubble",
          "attributes": [
            {
              "name": "shaper",
              "description": "`shaper`  shaper function for generating a line path ([pie](https://github.com/d3/d3-shape#lines)",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "x-accessor",
              "description": "",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "y-accessor",
              "description": "",
              "sourceRange": {
                "file": "multi-drawable-serie-mixin.html",
                "start": {
                  "line": 32,
                  "column": 10
                },
                "end": {
                  "line": 37,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiDrawableSerie"
            },
            {
              "name": "z",
              "description": "`z` calculating radius for all data point radius = z(d)",
              "sourceRange": {
                "start": {
                  "line": 36,
                  "column": 10
                },
                "end": {
                  "line": 39,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "z-accessor",
              "description": "`zAccessor`  the accessor function for z data (circle radius)",
              "sourceRange": {
                "start": {
                  "line": 44,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "z-scale",
              "description": "`zScale` scale function for z domain (circle radius)",
              "sourceRange": {
                "start": {
                  "line": 54,
                  "column": 10
                },
                "end": {
                  "line": 56,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-drawable-bubble",
          "mixins": [
            "MultiChart.mixin.MultiDrawableSerie"
          ]
        }
      ]
    }
  ]
}
