{
  "version": "experimental",
  "tags": [
    {
      "name": "multi-chart-pie",
      "path": "./../src/chart/multi-chart-pie.js",
      "description": "## MultiChartPie",
      "attributes": [
        {
          "name": "value-path",
          "type": "string"
        },
        {
          "name": "pie-width",
          "description": "`pieWidth` a way to indicate the width of the radius (either in % or absolute value). \nIf set, inner radius will be inferred.",
          "type": "string"
        },
        {
          "name": "top-margin",
          "type": "number"
        },
        {
          "name": "right-margin",
          "type": "number"
        },
        {
          "name": "bottom-margin",
          "type": "number"
        },
        {
          "name": "left-margin",
          "type": "number"
        },
        {
          "name": "group",
          "description": "`group` the name of the group (used when to registering this element under a multi-verse)",
          "type": "string"
        },
        {
          "name": "multi-verse-group",
          "description": "`multiVerseGroup` group name send along with `multi-verse-added`",
          "type": "string",
          "default": "\"default\""
        },
        {
          "name": "color-scale",
          "description": "colorScale for the chart"
        },
        {
          "name": "pattern",
          "description": "`pattern` set true for charts using patterns (e.g. geo charts)",
          "type": "boolean"
        },
        {
          "name": "process-type",
          "description": "`processType`  the type of process type, e.g. stack for bar Chart",
          "type": "string"
        },
        {
          "name": "data",
          "description": "`data` to display the chart",
          "type": "array"
        },
        {
          "name": "transition",
          "description": "`transition` to apply while drawing"
        },
        {
          "name": "width",
          "description": "`width`  of the chart area. Equals actual width of component - margins",
          "type": "number"
        },
        {
          "name": "height",
          "description": "`height`  of the chart area. Equals actual height of component - margins",
          "type": "number"
        },
        {
          "name": "register-container-name",
          "description": "`registerContainerName` the name of the container set to registered items. This is needed because\nsome items can be registered agains mutiple domain. For instance, multi-g : as an resizable svg item\nand against multi-verse.",
          "type": "string",
          "default": "\"svgHost\""
        },
        {
          "name": "enable-zoom",
          "description": "`enableZoom` set true to enable zoom behaviors",
          "type": "boolean"
        },
        {
          "name": "log",
          "description": "`log`  true to show log",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "valuePath",
          "attribute": "value-path",
          "type": "string"
        },
        {
          "name": "pieWidth",
          "attribute": "pie-width",
          "description": "`pieWidth` a way to indicate the width of the radius (either in % or absolute value). \nIf set, inner radius will be inferred.",
          "type": "string"
        },
        {
          "name": "html",
          "type": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
        },
        {
          "name": "topMargin",
          "attribute": "top-margin",
          "type": "number"
        },
        {
          "name": "rightMargin",
          "attribute": "right-margin",
          "type": "number"
        },
        {
          "name": "bottomMargin",
          "attribute": "bottom-margin",
          "type": "number"
        },
        {
          "name": "leftMargin",
          "attribute": "left-margin",
          "type": "number"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "`group` the name of the group (used when to registering this element under a multi-verse)",
          "type": "string"
        },
        {
          "name": "multiVerseGroup",
          "attribute": "multi-verse-group",
          "description": "`multiVerseGroup` group name send along with `multi-verse-added`",
          "type": "string",
          "default": "\"default\""
        },
        {
          "name": "colorScale",
          "attribute": "color-scale",
          "description": "colorScale for the chart"
        },
        {
          "name": "pattern",
          "attribute": "pattern",
          "description": "`pattern` set true for charts using patterns (e.g. geo charts)",
          "type": "boolean"
        },
        {
          "name": "processType",
          "attribute": "process-type",
          "description": "`processType`  the type of process type, e.g. stack for bar Chart",
          "type": "string"
        },
        {
          "name": "data",
          "attribute": "data",
          "description": "`data` to display the chart",
          "type": "array"
        },
        {
          "name": "transition",
          "attribute": "transition",
          "description": "`transition` to apply while drawing"
        },
        {
          "name": "width",
          "attribute": "width",
          "description": "`width`  of the chart area. Equals actual width of component - margins",
          "type": "number"
        },
        {
          "name": "height",
          "attribute": "height",
          "description": "`height`  of the chart area. Equals actual height of component - margins",
          "type": "number"
        },
        {
          "name": "registerContainerName",
          "attribute": "register-container-name",
          "description": "`registerContainerName` the name of the container set to registered items. This is needed because\nsome items can be registered agains mutiple domain. For instance, multi-g : as an resizable svg item\nand against multi-verse.",
          "type": "string",
          "default": "\"svgHost\""
        },
        {
          "name": "registerEventListen",
          "description": "`registerEventListen` the name of the event that will trigger\na registration. This event is fired by an element applying\nResiterable Mixin\n",
          "type": "string"
        },
        {
          "name": "registeredItems",
          "type": "array"
        },
        {
          "name": "enableZoom",
          "attribute": "enable-zoom",
          "description": "`enableZoom` set true to enable zoom behaviors",
          "type": "boolean"
        },
        {
          "name": "zoomedEl"
        },
        {
          "name": "log",
          "attribute": "log",
          "description": "`log`  true to show log",
          "type": "boolean"
        }
      ],
      "events": [
        {
          "name": "multi-verse-added"
        },
        {
          "name": "multi-container-removed"
        },
        {
          "name": "multi-verse-removed"
        }
      ],
      "slots": [
        {
          "name": ""
        }
      ]
    }
  ]
}