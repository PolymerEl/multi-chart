{
  "version": "experimental",
  "tags": [
    {
      "name": "",
      "description": "",
      "slots": [
        {
          "name": ""
        }
      ]
    },
    {
      "name": "",
      "path": "./../src/container/multi-container.js",
      "description": "# MultiContainer\n\n`<multi-chart-base>` is a base element for buiding charts\n\n\n### Events\nFired when `multi-container` is attached .",
      "attributes": [
        {
          "name": "top-margin",
          "type": "number"
        },
        {
          "name": "right-margin",
          "type": "number"
        },
        {
          "name": "bottom-margin",
          "type": "number"
        },
        {
          "name": "left-margin",
          "type": "number"
        },
        {
          "name": "group",
          "description": "`group` the name of the group (used when to registering this element under a multi-verse)",
          "type": "string"
        },
        {
          "name": "multi-verse-group",
          "description": "`multiVerseGroup` group name send along with `multi-verse-added`",
          "type": "string",
          "default": "\"default\""
        },
        {
          "name": "color-scale",
          "description": "colorScale for the chart"
        },
        {
          "name": "pattern",
          "description": "`pattern` set true for charts using patterns (e.g. geo charts)",
          "type": "boolean"
        },
        {
          "name": "process-type",
          "description": "`processType`  the type of process type, e.g. stack for bar Chart",
          "type": "string"
        },
        {
          "name": "data",
          "description": "the data to display",
          "type": "array"
        },
        {
          "name": "transition",
          "description": "`transition` to apply while drawing"
        },
        {
          "name": "width",
          "description": "`width`  of the chart area. Equals actual width of component - margins",
          "type": "number"
        },
        {
          "name": "height",
          "description": "`height`  of the chart area. Equals actual height of component - margins",
          "type": "number"
        },
        {
          "name": "register-container-name",
          "description": "`registerContainerName` the name of the container set to registered items. This is needed because\nsome items can be registered agains mutiple domain. For instance, multi-g : as an resizable svg item\nand against multi-verse.",
          "type": "string",
          "default": "\"svgHost\""
        },
        {
          "name": "enable-zoom",
          "description": "`enableZoom` set true to enable zoom behaviors",
          "type": "boolean"
        },
        {
          "name": "log",
          "description": "`log`  true to show log",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "html",
          "type": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
        },
        {
          "name": "topMargin",
          "attribute": "top-margin",
          "type": "number"
        },
        {
          "name": "rightMargin",
          "attribute": "right-margin",
          "type": "number"
        },
        {
          "name": "bottomMargin",
          "attribute": "bottom-margin",
          "type": "number"
        },
        {
          "name": "leftMargin",
          "attribute": "left-margin",
          "type": "number"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "`group` the name of the group (used when to registering this element under a multi-verse)",
          "type": "string"
        },
        {
          "name": "multiVerseGroup",
          "attribute": "multi-verse-group",
          "description": "`multiVerseGroup` group name send along with `multi-verse-added`",
          "type": "string",
          "default": "\"default\""
        },
        {
          "name": "colorScale",
          "attribute": "color-scale",
          "description": "colorScale for the chart"
        },
        {
          "name": "pattern",
          "attribute": "pattern",
          "description": "`pattern` set true for charts using patterns (e.g. geo charts)",
          "type": "boolean"
        },
        {
          "name": "processType",
          "attribute": "process-type",
          "description": "`processType`  the type of process type, e.g. stack for bar Chart",
          "type": "string"
        },
        {
          "name": "data",
          "attribute": "data",
          "description": "the data to display",
          "type": "array"
        },
        {
          "name": "transition",
          "attribute": "transition",
          "description": "`transition` to apply while drawing"
        },
        {
          "name": "width",
          "attribute": "width",
          "description": "`width`  of the chart area. Equals actual width of component - margins",
          "type": "number"
        },
        {
          "name": "height",
          "attribute": "height",
          "description": "`height`  of the chart area. Equals actual height of component - margins",
          "type": "number"
        },
        {
          "name": "registerContainerName",
          "attribute": "register-container-name",
          "description": "`registerContainerName` the name of the container set to registered items. This is needed because\nsome items can be registered agains mutiple domain. For instance, multi-g : as an resizable svg item\nand against multi-verse.",
          "type": "string",
          "default": "\"svgHost\""
        },
        {
          "name": "registerEventListen",
          "description": "`registerEventListen` the name of the event that will trigger\na registration. This event is fired by an element applying\nResiterable Mixin\n",
          "type": "string"
        },
        {
          "name": "registeredItems",
          "type": "array"
        },
        {
          "name": "enableZoom",
          "attribute": "enable-zoom",
          "description": "`enableZoom` set true to enable zoom behaviors",
          "type": "boolean"
        },
        {
          "name": "zoomedEl"
        },
        {
          "name": "log",
          "attribute": "log",
          "description": "`log`  true to show log",
          "type": "boolean"
        }
      ],
      "events": [
        {
          "name": "multi-verse-added"
        },
        {
          "name": "multi-container-removed"
        },
        {
          "name": "multi-verse-removed"
        }
      ],
      "slots": [
        {
          "name": ""
        }
      ]
    },
    {
      "name": "",
      "path": "./../src/drawable/multi-drawable.js",
      "description": "## MultiDrawable\n\n`<multi-drawable>` it a base Class for chart element that can be drawn (e.g. line, circle ...)",
      "attributes": [
        {
          "name": "key",
          "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
          "type": "string"
        },
        {
          "name": "color-scale",
          "description": "`colorScale` colorScale to use for the chart (example d3.scaleOrdinal().range(d3.schemeCategory10);)"
        },
        {
          "name": "width",
          "type": "number"
        },
        {
          "name": "height",
          "type": "number"
        }
      ],
      "properties": [
        {
          "name": "html",
          "type": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
        },
        {
          "name": "key",
          "attribute": "key",
          "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
          "type": "string"
        },
        {
          "name": "colorScale",
          "attribute": "color-scale",
          "description": "`colorScale` colorScale to use for the chart (example d3.scaleOrdinal().range(d3.schemeCategory10);)"
        },
        {
          "name": "width",
          "attribute": "width",
          "type": "number"
        },
        {
          "name": "height",
          "attribute": "height",
          "type": "number"
        },
        {
          "name": "dataProcessType",
          "description": "`dataProcessType` the type of data processing. Stacked data (e.g. for bar chart) will be stacked",
          "type": "string"
        },
        {
          "name": "targetElement",
          "description": "`targetElement` getter override lifecycle Behavior and called during attached"
        },
        {
          "name": "minSize",
          "type": "number | null"
        }
      ]
    },
    {
      "name": "",
      "description": "",
      "attributes": [
        {
          "name": "highlighted-keys",
          "type": "array"
        },
        {
          "name": "highlighted-cls",
          "type": "string",
          "default": "\"highlighted\""
        },
        {
          "name": "layer-id",
          "description": "`layerId` id of the layer containing elements to be highlighted.",
          "type": "string",
          "default": "\"slot-layer\""
        },
        {
          "name": "highlight-accessor",
          "description": "`highlightAccessor` accessor function to fetch keys to be highlighted\ndefault value supposes that we have elements like `<path data-key=\"tyhKey\"></path>`"
        }
      ],
      "properties": [
        {
          "name": "highlightedKeys",
          "attribute": "highlighted-keys",
          "type": "array"
        },
        {
          "name": "highlightedCls",
          "attribute": "highlighted-cls",
          "type": "string",
          "default": "\"highlighted\""
        },
        {
          "name": "layerId",
          "attribute": "layer-id",
          "description": "`layerId` id of the layer containing elements to be highlighted.",
          "type": "string",
          "default": "\"slot-layer\""
        },
        {
          "name": "highlightAccessor",
          "attribute": "highlight-accessor",
          "description": "`highlightAccessor` accessor function to fetch keys to be highlighted\ndefault value supposes that we have elements like `<path data-key=\"tyhKey\"></path>`"
        },
        {
          "name": "highlightedLayer"
        }
      ],
      "slots": [
        {
          "name": ""
        }
      ]
    },
    {
      "name": "",
      "path": "./../src/container/multi-container-layer.js",
      "description": "# MultiContainerLayer\n\n`<multi-container-layer>` is a proxy for svg g element. \nIt will be inserted within `multi-container-svg#slot-chart` and can contain other svg content like geo layer. \n\n\n### Events\nFired when `multi-container-layer` is attached .",
      "attributes": [
        {
          "name": "layer",
          "description": "`layer` the name of the layer - is set to g#svg-slot",
          "type": "string"
        },
        {
          "name": "svg-host",
          "description": "`svgHost` the host to which [slog-svg] nodes must be stamped",
          "type": "object"
        },
        {
          "name": "highlighted-keys",
          "type": "array"
        },
        {
          "name": "highlighted-cls",
          "type": "string",
          "default": "\"highlighted\""
        },
        {
          "name": "layer-id",
          "description": "`layerId` id of the layer containing elements to be highlighted.",
          "type": "string",
          "default": "\"slot-layer\""
        },
        {
          "name": "highlight-accessor",
          "description": "`highlightAccessor` accessor function to fetch keys to be highlighted\ndefault value supposes that we have elements like `<path data-key=\"tyhKey\"></path>`"
        },
        {
          "name": "register-container-name",
          "description": "`registerContainerName` the name of the container set to registered items. This is needed because\nsome items can be registered agains mutiple domain. For instance, multi-g : as an resizable svg item\nand against multi-verse.",
          "type": "string",
          "default": "\"svgHost\""
        },
        {
          "name": "group",
          "description": "`group` the name of the group (used when to registering this element under a multi-verse)",
          "type": "string",
          "default": "\"default\""
        },
        {
          "name": "multi-position",
          "description": "`multiPosition` position used to re-order items when appended by dispatch-svg\nnodePosition larger than 0 will render on top.",
          "type": "number",
          "default": "0"
        },
        {
          "name": "log",
          "description": "`log`  true to show log",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "layer",
          "attribute": "layer",
          "description": "`layer` the name of the layer - is set to g#svg-slot",
          "type": "string"
        },
        {
          "name": "svgHost",
          "attribute": "svg-host",
          "description": "`svgHost` the host to which [slog-svg] nodes must be stamped",
          "type": "object"
        },
        {
          "name": "highlightedKeys",
          "attribute": "highlighted-keys",
          "type": "array"
        },
        {
          "name": "highlightedCls",
          "attribute": "highlighted-cls",
          "type": "string",
          "default": "\"highlighted\""
        },
        {
          "name": "layerId",
          "attribute": "layer-id",
          "description": "`layerId` id of the layer containing elements to be highlighted.",
          "type": "string",
          "default": "\"slot-layer\""
        },
        {
          "name": "highlightAccessor",
          "attribute": "highlight-accessor",
          "description": "`highlightAccessor` accessor function to fetch keys to be highlighted\ndefault value supposes that we have elements like `<path data-key=\"tyhKey\"></path>`"
        },
        {
          "name": "highlightedLayer"
        },
        {
          "name": "registerContainerName",
          "attribute": "register-container-name",
          "description": "`registerContainerName` the name of the container set to registered items. This is needed because\nsome items can be registered agains mutiple domain. For instance, multi-g : as an resizable svg item\nand against multi-verse.",
          "type": "string",
          "default": "\"svgHost\""
        },
        {
          "name": "registerEventListen",
          "description": "`registerEventListen` the name of the event that will trigger\na registration. This event is fired by an element applying\nResiterable Mixin\n",
          "type": "string"
        },
        {
          "name": "registeredItems"
        },
        {
          "name": "registerEventDispatch",
          "description": "`registerEventDispatch`  the name of the event to be fired when connected.\nA container with multi-register-mixin applied\nwill listen to this event to register the component.\n",
          "type": "string"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "`group` the name of the group (used when to registering this element under a multi-verse)",
          "type": "string",
          "default": "\"default\""
        },
        {
          "name": "multiPosition",
          "attribute": "multi-position",
          "description": "`multiPosition` position used to re-order items when appended by dispatch-svg\nnodePosition larger than 0 will render on top.",
          "type": "number",
          "default": "0"
        },
        {
          "name": "registerOrder",
          "description": "`registerOrder` - registerable elements are sorted on the basis of this property.",
          "type": "number"
        },
        {
          "name": "log",
          "attribute": "log",
          "description": "`log`  true to show log",
          "type": "boolean"
        }
      ],
      "events": [
        {
          "name": "multi-verse-added"
        },
        {
          "name": "multi-verse-removed"
        }
      ],
      "slots": [
        {
          "name": ""
        }
      ]
    },
    {
      "name": "",
      "path": "./../src/drawable/multi-drawable-line-path.js",
      "description": "## MultiDrawableLinePath\n\n`<multi-drawable-line-path>` draws a line in a single svg path element",
      "attributes": [
        {
          "name": "shaper",
          "description": "`shaper`  shaper function for generating path ([for instance, pie](https://github.com/d3/d3-shape#lines)"
        },
        {
          "name": "key",
          "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
          "type": "string"
        },
        {
          "name": "color-scale",
          "description": "`colorScale` colorScale to use for the chart (example d3.scaleOrdinal().range(d3.schemeCategory10);)"
        },
        {
          "name": "width",
          "type": "number"
        },
        {
          "name": "height",
          "type": "number"
        }
      ],
      "properties": [
        {
          "name": "shaper",
          "attribute": "shaper",
          "description": "`shaper`  shaper function for generating path ([for instance, pie](https://github.com/d3/d3-shape#lines)"
        },
        {
          "name": "html",
          "type": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
        },
        {
          "name": "key",
          "attribute": "key",
          "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
          "type": "string"
        },
        {
          "name": "colorScale",
          "attribute": "color-scale",
          "description": "`colorScale` colorScale to use for the chart (example d3.scaleOrdinal().range(d3.schemeCategory10);)"
        },
        {
          "name": "width",
          "attribute": "width",
          "type": "number"
        },
        {
          "name": "height",
          "attribute": "height",
          "type": "number"
        },
        {
          "name": "dataProcessType",
          "description": "`dataProcessType` the type of data processing. Stacked data (e.g. for bar chart) will be stacked",
          "type": "string"
        },
        {
          "name": "targetElement",
          "description": "`targetElement` getter override lifecycle Behavior and called during attached"
        },
        {
          "name": "minSize",
          "type": "number | null"
        }
      ]
    },
    {
      "name": "",
      "path": "./../src/drawable/multi-drawable-bubble.js",
      "description": "## MultiDrawableBubble\n\n`<multi-drawable-bubble>` draw bubbles from serie data\n     \n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--drawable-bubble` | mixin applied to drawable | `{}`\n`--drawable-bubble-fill` | fill color applied to bubble | `none`\n`--drawable-bubble-strole` | stroke color applied to bubble | `none`",
      "attributes": [
        {
          "name": "z",
          "description": "`z` calculating radius for all data point radius = z(d,i)"
        },
        {
          "name": "select-serie",
          "description": "`selectSerie` if true, will set the `selectable` attribute at serie level. Default (falsy) will\nadd `selectable` attribute to each individual shape (rect in car chart, circle in bubble chart)",
          "type": "boolean"
        },
        {
          "name": "key",
          "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
          "type": "string"
        },
        {
          "name": "color-scale",
          "description": "`colorScale` colorScale to use for the chart (example d3.scaleOrdinal().range(d3.schemeCategory10);)"
        },
        {
          "name": "width",
          "type": "number"
        },
        {
          "name": "height",
          "type": "number"
        }
      ],
      "properties": [
        {
          "name": "z",
          "attribute": "z",
          "description": "`z` calculating radius for all data point radius = z(d,i)"
        },
        {
          "name": "selectSerie",
          "attribute": "select-serie",
          "description": "`selectSerie` if true, will set the `selectable` attribute at serie level. Default (falsy) will\nadd `selectable` attribute to each individual shape (rect in car chart, circle in bubble chart)",
          "type": "boolean"
        },
        {
          "name": "shapeClass",
          "type": "string"
        },
        {
          "name": "shapeName",
          "type": "string"
        },
        {
          "name": "html",
          "type": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
        },
        {
          "name": "key",
          "attribute": "key",
          "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
          "type": "string"
        },
        {
          "name": "colorScale",
          "attribute": "color-scale",
          "description": "`colorScale` colorScale to use for the chart (example d3.scaleOrdinal().range(d3.schemeCategory10);)"
        },
        {
          "name": "width",
          "attribute": "width",
          "type": "number"
        },
        {
          "name": "height",
          "attribute": "height",
          "type": "number"
        },
        {
          "name": "dataProcessType",
          "description": "`dataProcessType` the type of data processing. Stacked data (e.g. for bar chart) will be stacked",
          "type": "string"
        },
        {
          "name": "targetElement",
          "description": "`targetElement` getter override lifecycle Behavior and called during attached"
        },
        {
          "name": "minSize",
          "type": "number | null"
        }
      ]
    },
    {
      "name": "",
      "path": "./../src/drawable/multi-drawable-bar.js",
      "description": "## MultiDrawableBar\n\n`<multi-drawable-bar>` draws bar as in https://github.com/d3/d3-shape#bar\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--drawable-bar` | mixin applied to drawable | `{}`\n`--drawable-bar-fill` | fill color applied to bar | `none`\n`--drawable-bar-strole` | stroke color applied to bar | `none`",
      "attributes": [
        {
          "name": "stacked",
          "description": "`stacked` if true, draw a stack chart, otherwise, default bar chart",
          "type": "boolean"
        },
        {
          "name": "serie-name",
          "description": "`serieName` used for resetting value domain.",
          "type": "string",
          "default": "\"default\""
        },
        {
          "name": "x-scale"
        },
        {
          "name": "y-scale"
        },
        {
          "name": "value-path",
          "description": "`valuePath` path for creating value accessor",
          "type": "string"
        },
        {
          "name": "select-serie",
          "description": "`selectSerie` if true, will set the `selectable` attribute at serie level. Default (falsy) will\nadd `selectable` attribute to each individual shape (rect in car chart, circle in bubble chart)",
          "type": "boolean"
        },
        {
          "name": "shaper",
          "description": "`shaper`  shaper function for generating path ([for instance, pie](https://github.com/d3/d3-shape#lines)"
        },
        {
          "name": "key",
          "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
          "type": "string"
        },
        {
          "name": "color-scale",
          "description": "`colorScale` colorScale to use for the chart (example d3.scaleOrdinal().range(d3.schemeCategory10);)"
        },
        {
          "name": "width",
          "type": "number"
        },
        {
          "name": "height",
          "type": "number"
        }
      ],
      "properties": [
        {
          "name": "stacked",
          "attribute": "stacked",
          "description": "`stacked` if true, draw a stack chart, otherwise, default bar chart",
          "type": "boolean"
        },
        {
          "name": "serieName",
          "attribute": "serie-name",
          "description": "`serieName` used for resetting value domain.",
          "type": "string",
          "default": "\"default\""
        },
        {
          "name": "xScale",
          "attribute": "x-scale"
        },
        {
          "name": "yScale",
          "attribute": "y-scale"
        },
        {
          "name": "valuePath",
          "attribute": "value-path",
          "description": "`valuePath` path for creating value accessor",
          "type": "string"
        },
        {
          "name": "selectSerie",
          "attribute": "select-serie",
          "description": "`selectSerie` if true, will set the `selectable` attribute at serie level. Default (falsy) will\nadd `selectable` attribute to each individual shape (rect in car chart, circle in bubble chart)",
          "type": "boolean"
        },
        {
          "name": "shapeClass",
          "type": "string"
        },
        {
          "name": "shapeName",
          "type": "string"
        },
        {
          "name": "shaper",
          "attribute": "shaper",
          "description": "`shaper`  shaper function for generating path ([for instance, pie](https://github.com/d3/d3-shape#lines)"
        },
        {
          "name": "html",
          "type": "(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult"
        },
        {
          "name": "key",
          "attribute": "key",
          "description": "`key`  some drawable need to have a key (for example lines in a line chart, to as to apply a colorScale)",
          "type": "string"
        },
        {
          "name": "colorScale",
          "attribute": "color-scale",
          "description": "`colorScale` colorScale to use for the chart (example d3.scaleOrdinal().range(d3.schemeCategory10);)"
        },
        {
          "name": "width",
          "attribute": "width",
          "type": "number"
        },
        {
          "name": "height",
          "attribute": "height",
          "type": "number"
        },
        {
          "name": "dataProcessType",
          "description": "`dataProcessType` the type of data processing.",
          "type": "string"
        },
        {
          "name": "targetElement",
          "description": "`targetElement` getter override lifecycle Behavior and called during attached"
        },
        {
          "name": "minSize",
          "type": "number | null"
        }
      ]
    },
    {
      "name": "",
      "path": "./../src/helper/multi-select.js",
      "description": "## MultiSelect\n\n`<multi-select>` is an element for selecting ranges or chart shapes.",
      "attributes": [
        {
          "name": "attr-for-selected",
          "description": "If you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)",
          "type": "string",
          "default": "\"key\""
        },
        {
          "name": "selected-attribute",
          "description": "The attribute to set on elements when selected.",
          "type": "string",
          "default": "\"selected\""
        },
        {
          "name": "svg-host",
          "description": "`svgHost` the host to which [slog-svg] nodes must be stamped",
          "type": "object"
        },
        {
          "name": "group",
          "description": "`group` against which the drawable object is registered.\nA chart can have multiple group (e.g. one displayed against right axis,\nthe other against the left axis).\nSet another group name for objects belonging to alternate chart settings.",
          "type": "string",
          "default": "\"default\""
        },
        {
          "name": "multi-position",
          "description": "`multiPosition` position used to re-order items when appended by dispatch-svg\nnodePosition larger than 0 will render on top.",
          "type": "number",
          "default": "0"
        },
        {
          "name": "track-hover",
          "description": "`trackHover` set true if selector listen to mouseenter/mouseleave events and set hoveredItem accordingly.\nWhen true, this element also and fires `multi-mouseenter` and multi-mouseleave.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hovered",
          "description": "`hovered` the hovered item, tracked when `trackHover` is set to true.\nThis is usefull for instance when we want to highlight the legend being hovered",
          "type": "string"
        },
        {
          "name": "log",
          "description": "`log`  true to show log",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "attrForSelected",
          "attribute": "attr-for-selected",
          "description": "If you want to use an attribute value or property of an element for\n`selected` instead of the index, set this to the name of the attribute\nor property. Hyphenated values are converted to camel case when used to\nlook up the property of a selectable element. Camel cased values are\n*not* converted to hyphenated values for attribute lookup. It's\nrecommended that you provide the hyphenated form of the name so that\nselection works in both cases. (Use `attr-or-property-name` instead of\n`attrOrPropertyName`.)",
          "type": "string",
          "default": "\"key\""
        },
        {
          "name": "selectedAttribute",
          "attribute": "selected-attribute",
          "description": "The attribute to set on elements when selected.",
          "type": "string",
          "default": "\"selected\""
        },
        {
          "name": "selectableItems"
        },
        {
          "name": "svgHost",
          "attribute": "svg-host",
          "description": "`svgHost` the host to which [slog-svg] nodes must be stamped",
          "type": "object"
        },
        {
          "name": "registerEventDispatch",
          "description": "`registerEventDispatch`  the name of the event to be fired when connected.\nA container with multi-register-mixin applied\nwill listen to this event to register the component.\n",
          "type": "string"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "`group` against which the drawable object is registered.\nA chart can have multiple group (e.g. one displayed against right axis,\nthe other against the left axis).\nSet another group name for objects belonging to alternate chart settings.",
          "type": "string",
          "default": "\"default\""
        },
        {
          "name": "multiPosition",
          "attribute": "multi-position",
          "description": "`multiPosition` position used to re-order items when appended by dispatch-svg\nnodePosition larger than 0 will render on top.",
          "type": "number",
          "default": "0"
        },
        {
          "name": "registerOrder",
          "description": "`registerOrder` - registerable elements are sorted on the basis of this property.\n`multi-select` need to be last in the list of registered items, so that we attach\nevents after all shapes are drawn.",
          "type": "number"
        },
        {
          "name": "trackHover",
          "attribute": "track-hover",
          "description": "`trackHover` set true if selector listen to mouseenter/mouseleave events and set hoveredItem accordingly.\nWhen true, this element also and fires `multi-mouseenter` and multi-mouseleave.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hovered",
          "attribute": "hovered",
          "description": "`hovered` the hovered item, tracked when `trackHover` is set to true.\nThis is usefull for instance when we want to highlight the legend being hovered",
          "type": "string"
        },
        {
          "name": "log",
          "attribute": "log",
          "description": "`log`  true to show log",
          "type": "boolean"
        }
      ],
      "events": [
        {
          "name": "multi-tap"
        },
        {
          "name": "multi-select"
        },
        {
          "name": "multi-mouseenter"
        },
        {
          "name": "multi-mouseleave"
        }
      ]
    }
  ]
}